Directory structure:
└── widgets/
    ├── shims.d.ts
    ├── blankcanvas/
    │   ├── _styles.scss
    │   ├── config.ts
    │   ├── layout.hbs
    │   ├── tile.hbs
    │   ├── widget.scss
    │   └── widget.tsx
    ├── carousel/
    │   ├── _dimens.scss
    │   ├── _inline-tile.scss
    │   ├── _styles.scss
    │   ├── inline-carousel-swiper.loader.ts
    │   ├── layout.hbs
    │   ├── tile.hbs
    │   ├── widget.scss
    │   └── widget.tsx
    ├── grid/
    │   ├── _styles.scss
    │   ├── config.ts
    │   ├── layout.hbs
    │   ├── tile.hbs
    │   ├── widget.scss
    │   └── widget.tsx
    ├── masonry/
    │   ├── _styles.scss
    │   ├── layout.hbs
    │   ├── tile.hbs
    │   ├── widget.scss
    │   └── widget.tsx
    ├── nightfall/
    │   ├── _components.scss
    │   ├── _styles.scss
    │   ├── layout.hbs
    │   ├── products.template.tsx
    │   ├── tile.hbs
    │   ├── widget.scss
    │   └── widget.tsx
    ├── quadrant/
    │   ├── _styles.scss
    │   ├── layout.hbs
    │   ├── quadrant.lib.ts
    │   ├── tile.hbs
    │   ├── widget.scss
    │   └── widget.tsx
    ├── samples/
    │   ├── README.md
    │   ├── add-to-cart.template.tsx
    │   ├── expanded-tile.template.tsx
    │   ├── load-more.template.tsx
    │   ├── products.template.tsx
    │   ├── share-menu.template.tsx
    │   ├── tile-content.template.tsx
    │   └── tile.template.tsx
    ├── shortvideo/
    │   ├── _dimens.scss
    │   ├── _icon-sections-override.scss
    │   ├── _inline-tile.scss
    │   ├── _styles.scss
    │   ├── _tile-content-override.scss
    │   ├── inline-shortvideo-swiper.loader.ts
    │   ├── layout.hbs
    │   ├── tile.hbs
    │   ├── widget.scss
    │   └── widget.tsx
    ├── slider/
    │   ├── _icon-sections-overrides.scss
    │   ├── _responsive.scss
    │   ├── _styles.scss
    │   ├── layout.hbs
    │   ├── load-slider.ts
    │   ├── navigator.ts
    │   ├── observers.ts
    │   ├── tile.hbs
    │   ├── utils.ts
    │   ├── widget.scss
    │   ├── widget.tsx
    │   └── components/
    │       ├── responsive-patterns.ts
    │       └── tile-content/
    │           └── overrides.scss
    ├── starter-project/
    │   ├── README.md
    │   ├── _extras.scss
    │   ├── _styles.scss
    │   ├── config.ts
    │   ├── expanded-tile.template.tsx
    │   ├── layout.hbs
    │   ├── products.template.tsx
    │   ├── starter-project.lib.ts
    │   ├── tile.hbs
    │   ├── tile.template.tsx
    │   ├── widget.scss
    │   └── widget.tsx
    ├── storyline/
    │   ├── _dimens.scss
    │   ├── _icon-sections-override.scss
    │   ├── _inline-tile.scss
    │   ├── _styles.scss
    │   ├── _tile-content-override.scss
    │   ├── inline-story-swiper.loader.ts
    │   ├── layout.hbs
    │   ├── slides-per-view.ts
    │   ├── tile.hbs
    │   ├── utils.ts
    │   ├── widget.scss
    │   ├── widget.tsx
    │   └── templates/
    │       ├── base.template.tsx
    │       └── tile.template.tsx
    ├── storypage/
    │   ├── _direct-uploader.scss
    │   ├── _expanded-tile.scss
    │   ├── _inline-tile.scss
    │   ├── _styles.scss
    │   ├── direct-uploader.component.tsx
    │   ├── direct-uploader.lib.ts
    │   ├── layout.hbs
    │   ├── tile.hbs
    │   ├── widget.scss
    │   └── widget.tsx
    ├── styles/
    │   ├── partials/
    │   │   ├── _expanded-swiper.scss
    │   │   ├── _fonts.scss
    │   │   ├── _grid.scss
    │   │   ├── _icon-sections.scss
    │   │   ├── _icons.scss
    │   │   ├── _inline-dimens.scss
    │   │   ├── _inline.scss
    │   │   ├── _loading.scss
    │   │   ├── _media-queries.scss
    │   │   ├── _swiper.scss
    │   │   └── _tile-overlay.scss
    │   └── templates/
    │       ├── add-to-cart.scss
    │       ├── load-more.scss
    │       ├── products.scss
    │       ├── share-menu.scss
    │       ├── shopspot-icon.scss
    │       ├── swiper-overrides.scss
    │       ├── tags.scss
    │       ├── tile-content.scss
    │       ├── time-phrase.scss
    │       ├── expanded-tiles/
    │       │   ├── _colors.scss
    │       │   ├── _dimens.scss
    │       │   ├── _index.scss
    │       │   └── _responsive.scss
    │       └── story-line-expanded/
    │           ├── _dimens.scss
    │           └── _index.scss
    └── waterfall/
        ├── _styles.scss
        ├── layout.hbs
        ├── tile.hbs
        ├── waterfall.lib.ts
        ├── widget.scss
        └── widget.tsx

================================================
File: shims.d.ts
================================================
declare module "*.scss"
declare module "*.css"

interface Window {
  scrollLocked: boolean
  refreshMasonryLayout: Timeout
  __isLoading: boolean
  StacklaGoConnectConfig: {
    cdn: string,
    domain: string
  }
}



================================================
File: blankcanvas/_styles.scss
================================================
@forward "@styles/partials/icons";
@forward "@styles/partials/loading";
@forward "@styles/partials/tile-overlay";
@forward "@styles/templates/expanded-tiles";
@forward "@styles/templates/swiper-overrides";
@use "@styles/partials/inline";
@use "@styles/templates/tags";
@use "@styles/templates/load-more";
@use "@styles/templates/tile-content" as tc;
@use "@styles/templates/shopspot-icon" as sicon;
@use "@styles/templates/time-phrase" as tphrase;
@use "@styles/templates/share-menu" as smenu;
@use "@styles/partials/icon-sections" as is;

.grid-inline,
expanded-tiles {
  @include is.icon-sections-styles;
  @include sicon.shopspot-icon-styles;
  @include tphrase.time-phrase-styles;
  @include smenu.share-menu-styles;
  @include tags.tile-tags-styles;
  @include tc.tile-content-styles;
}



================================================
File: blankcanvas/config.ts
================================================
import { ExpandedTileOptions, InlineTileOptions, Style } from "@stackla/widget-utils"

export const config: {
  style: Style
  inlineTile: InlineTileOptions
  expandedTile: ExpandedTileOptions
} = {
  style: {
    // The background color of the widget, uses var(--widget-background) in css-variables.ts
    widget_background: "#ffffff",
    // The background color of the tile, uses var(--text-tile-background) in css-variables.ts
    text_tile_background: "#ffffff",
    // The font color of the tiles, uses var(--text-tile-font-color) in css-variables.ts
    text_tile_font_color: "#000000",
    // The font color of the user handle, uses var(--text-tile-user-handle-font-color) in css-variables.ts
    text_tile_user_handle_font_color: "#636062",
    // The font color of the user name, uses var(--text-tile-user-name-font-color) in css-variables.ts
    text_tile_user_name_font_color: "#ffffff",
    // The font size of the tile contents, uses var(--text-tile-font-size) in css-variables.ts
    text_tile_font_size: "10",
    // The font size of the user handle, uses var(--text-tile-user-handle-font-size) in css-variables.ts
    text_tile_user_handle_font_size: "14",
    // The font size of the user name, uses var(--text-tile-user-name-font-size) in css-variables.ts
    text_tile_user_name_font_size: "14",
    // The margin of the widget, and gap between tiles, uses var(--margin) in css-variables.ts
    margin: "10",
    // The mode of what happens when a tile is clicked, options: [EXPAND], [ORIGINAL_URL] or [CUSTOM]
    // [EXPAND] will expand the tile, [ORIGINAL_URL] will open the original URL associated with a social media image, [CUSTOM] will open a custom URL (not implemented)
    click_through_url: "[EXPAND]",
    // The background image of the icon, uses var(--shopspot-icon) in css-variables.ts, defaults to #000
    shopspot_icon: "",
    // Whether the tile should automatically pull new tiles or not
    auto_refresh: "true",
    // Whether the widget should only load x amount of tiles per page
    tiles_per_page: "",
    enable_custom_tiles_per_page: true,
    // Whether the widget should load more tiles on scroll, button or static
    load_more_type: "button",
    // The name of the widget
    name: "Blank Canvas",
    // The link color of the tile, uses var(--text-tile-link-color) in css-variables.ts
    text_tile_link_color: "",
    // The minimum amount of tiles required to show the widget
    minimal_tiles: "6",
    // Tile size: small, medium, large
    inline_tile_size: "medium",
    // The border radius of the inline tile, uses var(--inline-tile-border-radius) in css-variables.ts
    inline_tile_border_radius: "5",
    // The border radius of the expanded tile, uses var(--expanded-tile-border-radius) in css-variables.ts
    expanded_tile_border_radius: "5"
  },
  expandedTile: {
    // Whether to show the caption of the tile
    show_caption: true,
    // Whether to show the timestamp of the tile
    show_timestamp: true,
    // Whether to show the navigation options of the tile
    show_nav: true,
    // Whether to show the sharing options of the tile
    show_sharing: true,
    // Whether to show the shopspots of the tile
    show_shopspots: true,
    // Whether to show the products of the tile
    show_products: true,
    // Whether to show the tags of the tile
    show_tags: true,
    // Whether to show the votes of the tile
    show_votes: true,
    // Whether to show the cross sellers of the tile
    show_cross_sellers: true,
    // Whether to show the add to cart
    show_add_to_cart: true,
    // Whether to show the carousel grouping
    show_carousel_grouping: true
  },
  inlineTile: {
    // Whether to show the navigation options of the tile
    show_nav: true,
    // Whether to show the sharing options of the tile
    show_sharing: true,
    // Whether to show the shopspots
    show_shopspots: true,
    // Whether to show the tags of the tile
    show_tags: true,
    // Whether to show the timestamp of the tile
    show_timestamp: true,
    // Whether to show the caption of the tile
    show_caption: true,
    // Whether to show the products of the tile
    show_products: true,
    // Whether to show the add to cart functionality
    show_add_to_cart: true,
    // Whether to auto play the video
    auto_play_video: false,
    // Whether to show the inline tiles
    show_inline_tiles: true,
    // Whether to show the carousel
    show_carousel: false
  }
}



================================================
File: blankcanvas/layout.hbs
================================================
<div id="search">
    <input type="text" id="search-input" placeholder="Search for tiles" />
</div>
<div class="ugc-tiles grid grid-inline">
    {{#tiles}}
    {{>tpl-tile}}
    {{/tiles}}
</div>
<load-more />


================================================
File: blankcanvas/tile.hbs
================================================
{{#tile class="grid-item"}}
<div class="tile" data-background-image="{{image_thumbnail_url}}">
  <div class="icon-section">
    <div class="top-section">
      {{#each attrs}}
      {{#ifequals this "instagram.reel"}}
      <div class="content-icon icon-reel"></div>
      {{/ifequals}}
      {{/each}}
      {{#ifHasProductTags this}}
      <div class="shopping-icon icon-products"></div>
      {{/ifHasProductTags}}
    </div>
    <div class="center-section">
      {{#ifequals media "video"}}
      <div class="icon-play"></div>
      {{/ifequals}}
    </div>
    <div class="bottom-section">
      <tile-tags tile-id="{{id}}" variant="dark" mode="swiper" context="grid-inline"></tile-tags>
      <div class="network-icon icon-{{source}}"></div>
    </div>

    <shopspot-icon tile-id={{id}} />
  </div>
</div>
{{/tile}}


================================================
File: blankcanvas/widget.scss
================================================
@use "styles" as gridStyles;
@use "@styles/partials/media-queries";
@use "@styles/partials/inline-dimens" as dimens;

:host {
  transition: ease all 0.5s;
}

.grid {
  display: grid;
  justify-content: center;
  gap: var(--margin);
  grid-template-columns: repeat(auto-fit, minmax(var(--tile-size), 1fr));
  grid-auto-flow: row;
  margin-bottom: 20px;

  .ugc-tile {
    color: white;
    text-align: center;
    border-radius: var(--inline-tile-border-radius, dimens.$inline-tile-border-radius);
    position: relative;
    background-size: cover;
    background-position: top;
    background-repeat: no-repeat;
    height: 100%;
    box-sizing: border-box;
    object-fit: cover;
    object-position: var(--image-position);
    overflow: hidden;
    width: 100%;
    aspect-ratio: 1 / 1;
  }

  @include media-queries.breakpoint(mobile) {
    grid-template-columns: repeat(auto-fit, minmax(min-content, 100%));

    .ugc-tile {
      height: auto;
    }

    .tile {
      aspect-ratio: 1 / 1;
    }
  }
}

#nosto-ugc-container {
  background-color: var(--widget-background);
  padding: var(--margin);

  .tile {
    background-size: cover;
    background-position: top;
    height: 100%;
    width: 100%;
    position: relative;
  }
}



================================================
File: blankcanvas/widget.tsx
================================================
import { ISdk, loadWidget } from "@stackla/widget-utils"
import { config } from "./config"

declare const sdk: ISdk

loadWidget({
  config: {
    ...config
  }
})

sdk.querySelector("#search-input")?.addEventListener("input", async e => {
  const eventTarget = e.target
  if (eventTarget instanceof HTMLInputElement) {
    const searchValue = eventTarget.value
    await sdk.searchTiles(searchValue, true)
  }
})



================================================
File: carousel/_dimens.scss
================================================
@forward "@styles/partials/inline-dimens";

// swiper element width for large screens
$swiper-container-width-lg: 100%;

// nosto-ugc-container styles
$nosto-container-margin: 20px;

// swiper slide / tile width for medium/small screens
$tile-width-md: 95%;
$tile-height-md: 100%;

// swiper element width for medium/small screens
$swiper-container-width-md: auto;



================================================
File: carousel/_inline-tile.scss
================================================
@use "sass:map";
@use "@styles/partials/media-queries";
@use "dimens";

#nosto-ugc-container {
  .ugc-tile {
    border-radius: var(--inline-tile-border-radius);
    overflow: hidden;
    position: relative;
    width: 100%;
    display: flex;

    .tile {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;

      .tile-image-wrapper {
        display: flex;
        width: 100%;
        height: var(--tile-size) !important;

        img {
          aspect-ratio: auto;
          width: 100%;
          object-fit: cover;
          overflow: hidden;
          border-radius: dimens.$inline-tile-border-radius;
          position: relative;
          opacity: 1;
          object-position: var(--image-position);
        }

        video {
          object-fit: cover;
        }
      }
    }
  }

  .icon-play {
    width: dimens.$play-icon_width;
    height: dimens.$play-icon_height;
    background-image: url('data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 30 30" fill="none"><circle cx="15" cy="15" r="15" fill="%23BCBBBC"/><path d="M19.5 14.1336C20.1667 14.5185 20.1667 15.4808 19.5 15.8657L13.5 19.3298C12.8333 19.7147 12 19.2335 12 18.4637L12 11.5355C12 10.7657 12.8333 10.2846 13.5 10.6695L19.5 14.1336Z" fill="black"/></svg>');
    background-size: contain;
  }

  .swiper-button-next,
  .swiper-button-prev {
    --swiper-navigation-sides-offset: 0px;

    display: var(--navigation-arrow-display) !important;
    top: calc(var(--swiper-navigation-top-offset, 50%) - dimens.$nosto-container-margin + 10) !important;
  }
}



================================================
File: carousel/_styles.scss
================================================
@use "@styles/partials/fonts";
@forward "pkg:swiper/swiper-bundle.css";
@forward "@styles/partials/icons";
@forward "@styles/partials/loading";
@forward "inline-tile";
@forward "@styles/partials/tile-overlay";
@forward "@styles/templates/expanded-tiles";
@forward "@styles/templates/swiper-overrides";
@use "@styles/partials/inline";
@use "@styles/templates/tile-content" as tc;
@use "@styles/templates/shopspot-icon" as sicon;
@use "@styles/templates/time-phrase" as tphrase;
@use "@styles/templates/share-menu" as smenu;
@use "@styles/partials/icon-sections" as is;
@use "@styles/partials/expanded-swiper" as es;
@use "@styles/templates/tags";

.carousel-inline,
expanded-tiles {
  @include is.icon-sections-styles;
  @include sicon.shopspot-icon-styles;
  @include tphrase.time-phrase-styles;
  @include smenu.share-menu-styles;
  @include tc.tile-content-styles;
  @include tags.tile-tags-styles;
  @include es.swiper-expanded-styles;
}



================================================
File: carousel/inline-carousel-swiper.loader.ts
================================================
import { Sdk, SwiperData } from "types"
import {
  initializeSwiper,
  refreshSwiper,
  setSwiperLoadingStatus,
  isSwiperLoading,
  updateSwiperInstance
} from "@stackla/widget-utils/extensions/swiper"
import type { Swiper } from "swiper"
import { enableTileImages, loadAllUnloadedTiles } from "@stackla/widget-utils/libs"
import { EVENT_LOAD_MORE } from "@stackla/widget-utils"

declare const sdk: Sdk

export function initializeInlineSwiperListeners() {
  const swiper = sdk.querySelector(".carousel-inline.swiper-inline")

  if (!swiper) {
    throw new Error("Failed to find swiper element")
  }

  initializeSwiperForInlineTiles()
}

function initializeSwiperForInlineTiles() {
  const widgetSelector = sdk.querySelector<HTMLElement>(".carousel-inline.swiper-inline")

  if (!widgetSelector) {
    throw new Error("Failed to find widget UI element. Failed to initialise Swiper")
  }

  initializeSwiper({
    id: "inline-carousel",
    mode: "inline",
    widgetSelector,
    prevButton: "swiper-inline-carousel-button-prev",
    nextButton: "swiper-inline-carousel-button-next",
    paramsOverrides: {
      loop: false,
      slidesPerView: "auto",
      grabCursor: true,
      allowTouchMove: false,
      mousewheel: true,
      breakpointsBase: "container",
      breakpoints: {
        0: {
          slidesPerView: 1
        },
        537: {
          slidesPerView: 3
        },
        952: {
          slidesPerView: 7
        }
      },
      keyboard: {
        enabled: true,
        onlyInViewport: false
      },
      on: {
        reachEnd: () => {
          sdk.triggerEvent(EVENT_LOAD_MORE)
        },
        beforeInit: (swiper: Swiper) => {
          enableLoadedTiles()
          swiper.slideToLoop(0, 0, false)
        },
        afterInit: (swiper: Swiper) => {
          setSwiperLoadingStatus("inline-carousel", true)
          void loadTilesAsync(swiper)
        },
        activeIndexChange: (swiper: Swiper) => {
          if (swiper.navigation.prevEl) {
            if (swiper.realIndex === 0 && isSwiperLoading("inline-carousel")) {
              disablePrevNavigation(swiper)
            } else {
              enablePrevNavigation(swiper)
            }
          }
        }
      }
    }
  })
}

export function enableLoadedTiles() {
  sdk
    .querySelectorAll<HTMLElement>(".ugc-tiles > .ugc-tile[style*='display: none']")
    ?.forEach((tileElement: HTMLElement) => (tileElement.style.display = ""))
}

async function loadTilesAsync(swiper: Swiper) {
  const observer = registerObserver(swiper)

  loadAllUnloadedTiles()
  swiper.update()

  observer.disconnect()
  swiper.navigation.nextEl.classList.remove("swiper-button-hidden")
  updateLoadingStateInterval(swiper.el)
}

function updateLoadingStateInterval(swiperElem: HTMLElement) {
  const intervalId = setInterval(function () {
    const elements = swiperElem.querySelectorAll<HTMLElement>(".swiper-slide:has(.icon-section.hidden)")
    if (elements.length === 0) {
      clearInterval(intervalId)
      updateSwiperInstance("inline-carousel", (swiperData: SwiperData) => {
        swiperData.isLoading = false
        if (swiperData.instance) {
          swiperData.instance.off("activeIndexChange")
          swiperData.instance.setGrabCursor()
          swiperData.instance.allowTouchMove = true
          swiperData.instance.params.loop = true
          enablePrevNavigation(swiperData.instance)
        }
      })
      refreshSwiper("inline-carousel")
    }
  }, 200)
}

function enablePrevNavigation(swiper: Swiper) {
  swiper.allowSlidePrev = true
  swiper.navigation.prevEl.classList.remove("swiper-button-hidden")
}

function disablePrevNavigation(swiper: Swiper) {
  swiper.allowSlidePrev = false
  swiper.navigation.prevEl.classList.add("swiper-button-hidden")
}

function registerObserver(swiper: Swiper) {
  const observer = new MutationObserver(() => {
    enableTileImages(swiper.wrapperEl)
  })
  observer.observe(swiper.wrapperEl, {
    childList: true
  })
  return observer
}



================================================
File: carousel/layout.hbs
================================================
<div class="track swiper carousel-inline swiper-inline" style="display:none;">
	<div class="swiper-wrapper ugc-tiles">
		{{#tiles}}
		{{>tpl-tile options=../options.config}}
		{{/tiles}}
	</div>
</div>
<div class="swiper-inline-carousel-button-prev swiper-button-prev btn-lg">
	<span class="swiper-nav-icon icon-prev-circle" />
</div>
<div class="swiper-inline-carousel-button-next swiper-button-next btn-lg">
	<span class="swiper-nav-icon icon-next-circle" />
</div>



================================================
File: carousel/tile.hbs
================================================
{{#tile class="swiper-slide" }}
<div class="tile">
  {{#ifequals media "video"}}
    {{#unless options.tile_options.auto_play_video }}
      <div class="tile-loading"></div>
    {{/unless}}
  {{/ifequals}}
  <div class="icon-section hidden">
    <div class="top-section">
      {{#each attrs}}
      {{#ifequals this "instagram.reel"}}
      <div class="content-icon icon-reel"></div>
      {{/ifequals}}
      {{#ifequals this "youtube.short"}}
      <div class="content-icon icon-youtube-short"></div>
      {{/ifequals}}
      {{/each}}
      {{#ifHasProductTags this}}
      <div class="shopping-icon icon-products"></div>
      {{/ifHasProductTags}}
    </div>
    <div class="center-section">
      {{#ifequals media "video"}}
          <div class="icon-play"></div>
      {{/ifequals}}
    </div>
    <div class="bottom-section">
      <tile-tags tile-id="{{id}}" variant="dark" mode="swiper" context="carousel-inline"></tile-tags>
      <div class="network-icon icon-{{source}}"></div>
    </div>
  </div>
  <div class="tile-image-wrapper">
    {{#ifAutoPlayVideo media options.tile_options.auto_play_video }}
      {{playVideo this "100%" "100%"}}
    {{else}}
      <shopspot-icon tile-id={{id}}></shopspot-icon>
      {{#lazy image_thumbnail_url }}{{/lazy}}
    {{/ifAutoPlayVideo}}
    <div class="swiper-lazy-preloader"></div>
  </div>
</div>
{{/tile}}



================================================
File: carousel/widget.scss
================================================
@use "styles" as carouselStyles;
@use "@styles/partials/media-queries";
@use "dimens";

:host {
  transition: ease all 0.5s;
}

#nosto-ugc-container {
  background-color: var(--widget-background);
  display: flex;
  place-items: center;
  margin: dimens.$nosto-container-margin;
  width: calc(100% - (dimens.$nosto-container-margin * 2));
  height: var(--tile-size);

  .icon-section {
    display: flex;
    position: absolute;
    height: 100%;

    .bottom-section {
      tile-tags {
        margin-left: 5px;
      }
    }
  }
}

.hidden {
  display: none;
}

@include media-queries.breakpoint(mobile) {
  #nosto-ugc-container {
    height: auto;

    .carousel-inline.swiper-inline {
      width: dimens.$swiper-container-width-md !important;

      .swiper-slide {
        width: 100% !important;
      }
    }

    .tile {
      width: dimens.$tile-width-md !important;
      height: dimens.$tile-height-md !important;

      .icon-section {
        width: dimens.$tile-width-md;
      }
    }
  }
}



================================================
File: carousel/widget.tsx
================================================
import { Sdk } from "types"

declare const sdk: Sdk

import { loadWidget } from "@stackla/widget-utils"
import { initializeInlineSwiperListeners } from "./inline-carousel-swiper.loader"

loadWidget({
  extensions: {
    swiper: true
  },
  features: {
    handleLoadMore: false,
    cssVariables: {
      "--navigation-arrow-display": sdk.isPaginationEnabled() && !sdk.isScrollWidget() ? "flex" : "none"
    }
  }
})

sdk.querySelector(".track")?.style.removeProperty("display")

initializeInlineSwiperListeners()



================================================
File: grid/_styles.scss
================================================
@forward "pkg:swiper/swiper-bundle.css";
@use "@styles/partials/fonts";
@forward "@styles/partials/icons";
@forward "@styles/partials/loading";
@forward "@styles/partials/tile-overlay";
@forward "@styles/templates/expanded-tiles";
@forward "@styles/templates/swiper-overrides";
@use "@styles/partials/inline";
@use "@styles/templates/tags";
@use "@styles/templates/load-more";
@use "@styles/templates/tile-content" as tc;
@use "@styles/templates/shopspot-icon" as sicon;
@use "@styles/templates/time-phrase" as tphrase;
@use "@styles/templates/share-menu" as smenu;
@use "@styles/partials/icon-sections" as is;
@use "@styles/partials/expanded-swiper" as es;

.grid-inline,
expanded-tiles {
  @include is.icon-sections-styles;
  @include sicon.shopspot-icon-styles;
  @include tphrase.time-phrase-styles;
  @include smenu.share-menu-styles;
  @include tags.tile-tags-styles;
  @include tc.tile-content-styles;
  @include es.swiper-expanded-styles;
}



================================================
File: grid/config.ts
================================================
import { ExpandedTileOptions, InlineTileOptions, Style } from "@stackla/widget-utils"

export const config: {
  style: Style
  inlineTile: InlineTileOptions
  expandedTile: ExpandedTileOptions
} = {
  style: {
    // The background color of the widget, uses var(--widget-background) in css-variables.ts
    widget_background: "#ffffff",
    // The background color of the tile, uses var(--text-tile-background) in css-variables.ts
    text_tile_background: "#ffffff",
    // The font color of the tiles, uses var(--text-tile-font-color) in css-variables.ts
    text_tile_font_color: "#000000",
    // The font color of the user handle, uses var(--text-tile-user-handle-font-color) in css-variables.ts
    text_tile_user_handle_font_color: "#636062",
    // The font color of the user name, uses var(--text-tile-user-name-font-color) in css-variables.ts
    text_tile_user_name_font_color: "#ffffff",
    // The font size of the tile contents, uses var(--text-tile-font-size) in css-variables.ts
    text_tile_font_size: "10",
    // The font size of the user handle, uses var(--text-tile-user-handle-font-size) in css-variables.ts
    text_tile_user_handle_font_size: "14",
    // The font size of the user name, uses var(--text-tile-user-name-font-size) in css-variables.ts
    text_tile_user_name_font_size: "14",
    // The margin of the widget, and gap between tiles, uses var(--margin) in css-variables.ts
    margin: "10",
    // The mode of what happens when a tile is clicked, options: [EXPAND], [ORIGINAL_URL] or [CUSTOM]
    // [EXPAND] will expand the tile, [ORIGINAL_URL] will open the original URL associated with a social media image, [CUSTOM] will open a custom URL (not implemented)
    click_through_url: "[EXPAND]",
    // The background image of the icon, uses var(--shopspot-icon) in css-variables.ts, defaults to #000
    shopspot_icon: "",
    // Whether the tile should automatically pull new tiles or not
    auto_refresh: "true",
    // Whether the widget should only load x amount of tiles per page
    tiles_per_page: "",
    enable_custom_tiles_per_page: true,
    // Whether the widget should load more tiles on scroll, button or static
    load_more_type: "button",
    // The name of the widget
    name: "Blank Canvas",
    // The link color of the tile, uses var(--text-tile-link-color) in css-variables.ts
    text_tile_link_color: "",
    // The minimum amount of tiles required to show the widget
    minimal_tiles: "6",
    // Tile size: small, medium, large
    inline_tile_size: "medium",
    // The border radius of the inline tile, uses var(--inline-tile-border-radius) in css-variables.ts
    inline_tile_border_radius: "5",
    // The border radius of the expanded tile, uses var(--expanded-tile-border-radius) in css-variables.ts
    expanded_tile_border_radius: "5"
  },
  expandedTile: {
    // Whether to show the caption of the tile
    show_caption: true,
    // Whether to show the timestamp of the tile
    show_timestamp: true,
    // Whether to show the navigation options of the tile
    show_nav: true,
    // Whether to show the sharing options of the tile
    show_sharing: true,
    // Whether to show the shopspots of the tile
    show_shopspots: true,
    // Whether to show the products of the tile
    show_products: true,
    // Whether to show the tags of the tile
    show_tags: true,
    // Whether to show the votes of the tile
    show_votes: true,
    // Whether to show the cross sellers of the tile
    show_cross_sellers: true,
    // Whether to show the add to cart
    show_add_to_cart: true,
    // Whether to show the carousel grouping
    show_carousel_grouping: true
  },
  inlineTile: {
    // Whether to show the navigation options of the tile
    show_nav: true,
    // Whether to show the sharing options of the tile
    show_sharing: true,
    // Whether to show the shopspots
    show_shopspots: true,
    // Whether to show the tags of the tile
    show_tags: true,
    // Whether to show the timestamp of the tile
    show_timestamp: true,
    // Whether to show the caption of the tile
    show_caption: true,
    // Whether to show the products of the tile
    show_products: true,
    // Whether to show the add to cart functionality
    show_add_to_cart: true,
    // Whether to auto play the video
    auto_play_video: false,
    // Whether to show the inline tiles
    show_inline_tiles: true,
    // Whether to show the carousel
    show_carousel: false
  }
}



================================================
File: grid/layout.hbs
================================================
<h1>Hello world!</h1>
<div class="ugc-tiles grid grid-inline">
    {{#tiles}}
    {{>tpl-tile options=../options.config}}
    {{/tiles}}
</div>
<load-more />


================================================
File: grid/tile.hbs
================================================
{{#tile class="grid-item"}}
  {{#ifAutoPlayVideo media options.tile_options.auto_play_video }}
    <div class="tile">
      {{playVideo this "100%" "100%"}}
    </div>
  {{else}}
    <div class="tile" data-background-image="{{image_thumbnail_url}}">
      <img style="display: none;" src="{{image_thumbnail_url}}" alt="{{name}}" />
      <div class="icon-section">
        <div class="top-section">
          {{#each attrs}}
            {{#ifequals this "instagram.reel"}}
              <div class="content-icon icon-reel"></div>
            {{/ifequals}}
          {{/each}}
          {{#ifHasProductTags this}}
            <div class="shopping-icon icon-products"></div>
          {{/ifHasProductTags}}
        </div>
        <div class="center-section">
          {{#ifequals media "video"}}
            <div class="icon-play"></div>
          {{/ifequals}}
        </div>
        <div class="bottom-section">
          <tile-tags tile-id="{{id}}" variant="dark" mode="swiper" context="grid-inline"></tile-tags>
          <div class="network-icon icon-{{source}}"></div>
        </div>

        <shopspot-icon tile-id={{id}} />
      </div>
    </div>
  {{/ifAutoPlayVideo}}
{{/tile}}



================================================
File: grid/widget.scss
================================================
@use "styles" as gridStyles;
@use "@styles/partials/media-queries";
@use "@styles/partials/inline-dimens" as dimens;

:host {
  transition: ease all 0.5s;
}

expanded-tiles {
  .caption-paragraph {
    background-color: purple;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

#nosto-ugc-container {
  h1 {
    font-size: 3.5rem;
    font-weight: 800;
    background: linear-gradient(90deg, #ec4899, #ef4444, #facc15);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: fadeIn 1.2s ease-in-out;
    text-align: center;
    margin: 40px 0;
  }
}

.grid {
  display: grid;
  justify-content: center;
  gap: var(--margin);
  grid-template-columns: repeat(auto-fit, minmax(var(--tile-size), 1fr));
  grid-auto-flow: row;
  margin-bottom: 20px;

  .ugc-tile {
    border-radius: 50%;
    color: white;
    text-align: center;
    border-radius: var(--inline-tile-border-radius, dimens.$inline-tile-border-radius);
    position: relative;
    background-size: cover;
    background-position: top;
    background-repeat: no-repeat;
    height: 100%;
    box-sizing: border-box;
    object-fit: cover;
    object-position: var(--image-position);
    overflow: hidden;
    width: 100%;
    aspect-ratio: 1 / 1;

    video {
      object-fit: cover;
    }
  }

  tile-tags {
    padding-left: 5px;

    .mask-right {
      mask-image: linear-gradient(to left, transparent 0%, black 14%);
    }
  }

  @include media-queries.breakpoint(mobile) {
    grid-template-columns: repeat(auto-fit, minmax(min-content, 100%));

    .ugc-tile {
      height: auto;
    }

    .tile {
      aspect-ratio: 1 / 1;
    }
  }
}

#nosto-ugc-container {
  background-color: var(--widget-background);
  padding: var(--margin);

  .tile {
    background-size: cover;
    background-position: top;
    height: 100%;
    width: 100%;
    position: relative;
  }
}



================================================
File: grid/widget.tsx
================================================
import { loadWidget, loadAllUnloadedTiles, ISdk } from "@stackla/widget-utils"
import { config } from "./config"

declare const sdk: ISdk

loadWidget({
  config: config,
  callbacks: {
    onHover: [
      event => {
        const tile = event.detail.tile
        tile.style.transition = "opacity 0.5s"
        tile.style.opacity = "0.5"
      }
    ],
    onMouseLeave: [
      event => {
        const tile = event.detail.tile
        tile.style.transition = "opacity 0.5s"
        tile.style.opacity = "1"
      }
    ]
  }
})

sdk.querySelectorAll(".icon-play").forEach(el => {
  el.addEventListener("mouseover", () => {
    el.style.transform = "scale(2)"
    el.style.transition = "transform 0.5s"
  })

  el.addEventListener("mouseleave", () => {
    el.style.transform = "scale(1)"
    el.style.transition = "transform 0.5s"
  })
})

loadAllUnloadedTiles()



================================================
File: masonry/_styles.scss
================================================
@forward "pkg:swiper/swiper-bundle.css";
@use "@styles/partials/fonts";
@forward "@styles/partials/icons";
@forward "@styles/partials/loading";
@forward "@styles/partials/tile-overlay";
@forward "@styles/templates/expanded-tiles";
@forward "@styles/templates/swiper-overrides";
@use "@styles/partials/inline";
@use "@styles/templates/tags";
@use "@styles/templates/load-more";
@use "@styles/templates/load-more" as lm;
@use "@styles/templates/tile-content" as tc;
@use "@styles/templates/shopspot-icon" as sicon;
@use "@styles/templates/time-phrase" as tphrase;
@use "@styles/templates/share-menu" as smenu;
@use "@styles/partials/icon-sections" as is;
@use "@styles/partials/expanded-swiper" as es;

.masonry-inline,
expanded-tiles {
  @include is.icon-sections-styles;
  @include sicon.shopspot-icon-styles;
  @include tphrase.time-phrase-styles;
  @include smenu.share-menu-styles;
  @include tags.tile-tags-styles;
  @include tc.tile-content-styles;
  @include es.swiper-expanded-styles;
}



================================================
File: masonry/layout.hbs
================================================
<div class="ugc-tiles grid masonry-inline">
    {{#tiles}}
    {{>tpl-tile options=../options.config}}
    {{/tiles}}
</div>
<load-more />


================================================
File: masonry/tile.hbs
================================================
{{#tile class="grid-item"}}
  {{#ifAutoPlayVideo media options.tile_options.auto_play_video }}
    <div class="tile">
      {{playVideo this "100%" "100%"}}
    </div>
  {{else}}
    <div class="tile" data-background-image="{{image_thumbnail_url}}">
      <div class="icon-section">
        <div class="top-section">
          {{#each attrs}}
            {{#ifequals this "instagram.reel"}}
              <div class="content-icon icon-reel"></div>
            {{/ifequals}}
          {{/each}}
          {{#ifHasProductTags this}}
            <div class="shopping-icon icon-products"></div>
          {{/ifHasProductTags}}
        </div>
        <div class="center-section">
          {{#ifequals media "video"}}
              <div class="icon-play"></div>
          {{/ifequals}}
        </div>
        <div class="bottom-section">
          <tile-tags tile-id="{{id}}" variant="dark" mode="swiper" context="masonry-inline"></tile-tags>
          <div class="network-icon icon-{{source}}"></div>
        </div>

        <shopspot-icon tile-id={{id}} />
      </div>
    </div>
  {{/ifAutoPlayVideo}}
{{/tile}}



================================================
File: masonry/widget.scss
================================================
@use "sass:map";
@use "styles";
@use "@styles/partials/media-queries";
@use "@styles/partials/inline-dimens" as dimens;

:host {
  transition: ease all 0.5s;
}

#nosto-ugc-container {
  background-color: var(--widget-background);
  padding: var(--margin);

  .grid {
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    gap: var(--margin);

    .ugc-tile {
      height: var(--tile-size);
      border-radius: var(--inline-tile-border-radius, dimens.$inline-tile-border-radius);
      box-sizing: border-box;
      overflow: hidden;
      transition: opacity 0.5s ease;

      &:not([width-set*="true"]) {
        opacity: 0;
      }

      @include media-queries.breakpoint(mobile) {
        max-width: 100%;
      }

      video {
        object-fit: cover;
      }
    }
  }

  .tile {
    position: relative;
    background-repeat: no-repeat;
    background-size: cover;
    background-position: top;
    width: 100%;
    height: 100%;

    .icon-section {
      display: flex;
      position: absolute;
      width: 100%;
      height: 100%;
    }
  }
}

load-more {
  #buttons {
    margin-top: 30px;
    margin-bottom: 30px;
  }
}

.hidden {
  display: none !important;
}



================================================
File: masonry/widget.tsx
================================================
import { loadWidget } from "@stackla/widget-utils"

loadWidget({
  extensions: {
    masonry: true
  }
})



================================================
File: nightfall/_components.scss
================================================
#nosto-ugc-container {
    time-phrase {
        display: var(--timephrase-display-inline);
        align-items: center;
    }

    share-menu {
        display: var(--share-icon-display-inline);
        margin-top: 5px;
        margin-left: 5px;
        margin-right: 5px;
        
        .share-socials-popup-wrapper {
            position: fixed;
            background: none !important;
        }

        .panel-overlay-active {
            inset: 0;
        }

        .popup-text {
            color: white;
        }

        .share-socials-popup {
            background-color: black;
        }

        .icon-email-share {
            background: url('assets/svg/email-share-yellow.svg') no-repeat;
            height: 33px;
        }
    }
}

expanded-tiles {
    --expanded-tiles-background: #000;

    ugc-products {
        .stacklapopup-products-item-price {
            --product-price-font-color: #fff;
        }

        .stacklapopup-products-item-title {
            --product-title-font-color: #fff;
        }

        .stacklapopup-products-item-description {
            --product-description-font-color: #fff;

            scrollbar-color: white black !important;
        }
        
        .recommendations-text {
            color: #fff !important;
        }

        add-to-cart {
            .ugc-add-to-cart-colorpicker-text * {
                color: white !important;
            }

            .ugc-add-to-cart-colorpicker-text {
                color: white !important;
            }

            .ugc-add-to-cart-other-variant-selector {
                color: white !important;
            }

            .ugc-add-to-cart-sizepicker-btn[selected="true"] {
                border: 1px solid white !important;
                background-color: white !important;

                span {
                    color: black !important;
                }
            }

            #variant-container {
                p {
                    color: white !important;
                }

                p span {
                    color: white !important;
                }

                color: white !important;
            }
            
           .ugc-add-to-cart-colorpicker-ring span {
                &::after {
                    background-color: white !important;
                }
            }

            .ugc-add-to-cart-sizepicker {
                margin-top: 10px;

            }

            .ugc-add-to-cart-sizepicker-btn {
                background-color: black !important;
            }
        }
    }
}

expanded-tiles tile-content {
    .user-handle, .user-link {
        color: white;
    }
}


================================================
File: nightfall/_styles.scss
================================================
@forward "pkg:swiper/swiper-bundle.css";
@use "@styles/partials/fonts";
@forward "@styles/partials/icons";
@forward "@styles/partials/loading";
@forward "@styles/partials/tile-overlay";
@forward "@styles/templates/expanded-tiles";
@forward "@styles/templates/swiper-overrides";
@use "@styles/partials/inline";
@use "@styles/templates/tags";
@use "@styles/templates/load-more";
@use "@styles/templates/tile-content" as tc;
@use "@styles/templates/shopspot-icon" as sicon;
@use "@styles/templates/time-phrase" as tphrase;
@use "@styles/templates/share-menu" as smenu;
@use "@styles/partials/icon-sections" as is;
@use "@styles/partials/expanded-swiper" as es;
@use "components";

.nightfall-inline,
expanded-tiles {
  @include is.icon-sections-styles;
  @include sicon.shopspot-icon-styles;
  @include tphrase.time-phrase-styles;
  @include smenu.share-menu-styles;
  @include tags.tile-tags-styles;
  @include tc.tile-content-styles;
  @include es.swiper-expanded-styles;
}



================================================
File: nightfall/layout.hbs
================================================
<div id="widget-container" class="hidden-container">
    <div class="ugc-tiles grid nightfall-inline">
        {{#tiles}}
        {{>tpl-tile options=../options.config}}
        {{/tiles}}
    </div>
    <load-more />
</div>


================================================
File: nightfall/products.template.tsx
================================================
import type { Sdk, TagExtended, IProductsComponent, Tile } from "@stackla/widget-utils"
import { createElement, createFragment } from "@stackla/widget-utils/jsx"

export function ProductHeader({ product }: { product: TagExtended }) {
  if (!product) return <></>

  const { id, tag, custom_url, target, price, currency } = product

  const titleContent = tag && (
    <a href={custom_url} target={target} class="stacklapopup-products-item-title">
      {tag}
    </a>
  )

  const priceContent = price && (
    <div class="stacklapopup-products-item-price">{currency === "EUR" ? `${price}` : `${currency ?? ""}${price}`}</div>
  )

  return (
    <div class="stacklapopup-products-header">
      <div class="stacklapopup-products-item-header stacklapopup-products-item-active" data-tag-id={id}>
        {titleContent}
        {priceContent}
      </div>
    </div>
  )
}

export function ProductCTA({ sdk, product, tile }: { sdk: Sdk; product: TagExtended; tile: Tile }) {
  const { custom_url, target, availability, cta_text = "Buy Now", currency, id } = product
  const addToCart = sdk.getLoadedComponents().includes("add-to-cart")
  const parentNodeId = sdk.getNodeId()
  if (addToCart) {
    return (
      <>
        <a
          href={custom_url}
          target={target}
          class="stacklapopup-products-item-button-wrap"
          style={{
            display: "none"
          }}>
          <span className={`stacklapopup-products-item-button${availability ? "" : " disabled"}`}>{cta_text}</span>
        </a>
        <add-to-cart
          tile-id={tile.id}
          theme="dark"
          productId={id}
          id={`stacklapopup-add-to-cart-${id}-${tile.id}`}
          url={custom_url}
          target={target}
          availability={availability}
          cta={cta_text}
          currency={currency}
          parent={parentNodeId}></add-to-cart>
      </>
    )
  }

  return (
    <a href={custom_url} target={target} class="stacklapopup-products-item-button-wrap">
      <span className={`stacklapopup-products-item-button${availability ? "" : " disabled"}`}>{cta_text}</span>
    </a>
  )
}

export function ProductDetails({ sdk, product, tile }: { sdk: Sdk; product: TagExtended; tile: Tile }) {
  const selectedProduct = sdk.getSelectedProduct()
  const selectedProductId = selectedProduct ? selectedProduct.id : null
  const { custom_url, description = "Buy Now", id } = product

  const descriptionContent = description ? <p class="stacklapopup-products-item-description">{description}</p> : <></>

  const itemActive = id == selectedProductId ? "stacklapopup-products-item-active" : ""

  return (
    <div className={`stacklapopup-products-item-content ${itemActive}`} data-tag-id={id} data-custom-url={custom_url}>
      <div className="stacklapopup-products-item-description-wrapper">{descriptionContent}</div>
      <ProductCTA sdk={sdk} product={product} tile={tile}></ProductCTA>
    </div>
  )
}

export function ProductWrapper({
  products,
  selectedProductId
}: {
  products: TagExtended[]
  selectedProductId: string
}) {
  return (
    <>
      {products.map(({ id, image_small_url, is_cross_seller }) => (
        <div className="swiper-slide stacklapopup-product-wrapper">
          {is_cross_seller && (
            <div className="stacklapopup-products-item-image-recommendation-label">
              <p>
                <span class="icon-like"></span> great with
              </p>
            </div>
          )}
          <div
            className={`stacklapopup-products-item ${is_cross_seller ? "cross-seller" : ""} ${id == selectedProductId ? "stacklapopup-products-item-active" : ""}`}
            data-tag-id={id}>
            <img
              loading="lazy"
              class="stacklapopup-products-item-image"
              src={image_small_url}
              onerror="this.src='https://placehold.co/160x200'"
            />
          </div>
        </div>
      ))}
    </>
  )
}

export function ProductImages({
  products,
  selectedProduct
}: {
  products: TagExtended[]
  selectedProduct: TagExtended
}) {
  return (
    <>
      {products.length > 3 ? <div class="recommendations-text">see recommendations</div> : <></>}
      <div class={`stacklapopup-product-images-wrapper ${products.length <= 3 ? "arrows-hidden" : ""}`}>
        <div className={`swiper swiper-expanded-product-recs stacklapopup-products`}>
          <div class="swiper-wrapper">
            {selectedProduct && (
              <ProductWrapper products={products} selectedProductId={selectedProduct.id}></ProductWrapper>
            )}
          </div>
        </div>
        <div class="swiper-exp-product-recs-button-prev swiper-button-prev">
          <span class="swiper-nav-icon icon-prev-white" />
        </div>
        <div class="swiper-exp-product-recs-button-next swiper-button-next">
          <span class="swiper-nav-icon icon-next-white" />
        </div>
      </div>
    </>
  )
}

export default function ProductsTemplate(sdk: Sdk, component?: IProductsComponent) {
  if (!component) {
    throw new Error("Products component incorrectly passed.")
  }

  const tileId = component.getTileId()
  const tile = sdk.getTileById(tileId)
  const selectedProductState = sdk.getSelectedProduct()

  if (!tile) {
    throw new Error("No tile found")
  }

  const products: TagExtended[] = (tile.tags_extended || []).filter(({ type }) => type === "product")

  if (!products.length) {
    return <></>
  }

  const selectedProductById = selectedProductState
    ? products.find(({ id }) => id == selectedProductState.id.toString())
    : null

  const selectedProduct: TagExtended = selectedProductById || products[0]
  const mappedProducts = products.map(product => (
    <ProductDetails sdk={sdk} product={product} tile={tile}></ProductDetails>
  ))

  return (
    <>
      <ProductHeader product={selectedProduct}></ProductHeader>
      <ProductImages products={products} selectedProduct={selectedProduct}></ProductImages>
      {mappedProducts}
    </>
  )
}



================================================
File: nightfall/tile.hbs
================================================
{{#tile class="grid-item"}}
<div class="tile">
  <div class="tile-top">
    <div class="tile-loading"></div>
    <div class="icon-section">
      <div class="top-section">
        {{#each attrs}}
        {{#ifequals this "instagram.reel"}}
        <div class="content-icon icon-reel"></div>
        {{/ifequals}}
        {{#ifequals this "youtube.short"}}
        <div class="content-icon icon-youtube-short"></div>
        {{/ifequals}}
        {{/each}}
        {{#ifHasProductTags this}}
        <div class="shopping-icon icon-products"></div>
        {{/ifHasProductTags}}
      </div>
      <div class="center-section">
        {{#ifequals media "video"}}
            <div class="icon-play"></div>
        {{/ifequals}}
      </div>
    </div>
    <div class="tile-image-wrapper">
      {{#ifAutoPlayVideo media options.tile_options.auto_play_video }}
        {{playVideo this "100%" "100%"}}
      {{else}}
      {{#lazy image_thumbnail_url "120"}}{{/lazy}}
      {{/ifAutoPlayVideo}}
      <div class="swiper-lazy-preloader"></div>
      <shopspot-icon tile-id={{id}} />
    </div>
  </div>
  <div class="tile-bottom">
    <div class="tile-bottom-container">
      {{#if tags_extended}}
      <tile-tags tile-id="{{id}}" mode="swiper" context="nightfall-inline" navigation-arrows="true" theme="dark"></tile-tags>
      {{/if}}
      <div class="description">
          <div class="flex-full">
              <div class="user-info {{#if name}}has-name{{/if}} {{#if user}}has-user{{/if}}">
              {{#if name}}
              <div class="user-name">{{name}}</div>
              {{/if}}
              {{#if user}}
              <div class="user-handle">@{{user}}</div>
              {{/if}}
              </div>
            <div class="tile-share-right">
                <share-menu tile-id="{{id}}" theme="light"></share-menu>
                <div class="network-icon-circle">
                  <div class="network-icon black icon-{{source}}"></div>
                </div>
            </div>
          </div>
          <div class="tile-share-content">
            <time-phrase source-created-at="{{source_created_at}}"></time-phrase>
          </div>
          <div class="caption">
            <div class="caption-paragraph">{{message}}</div>
          </div>
      </div>
    </div>
  </div>
</div>
{{/tile}}



================================================
File: nightfall/widget.scss
================================================
@use "styles";

#nosto-ugc-container {
  background-color: var(--widget-background);
  padding: var(--margin);

  #widget-container {
    transition: opacity 3s;
    opacity: 1;
    visibility: visible;

    &.hidden-container {
      opacity: 0;
      visibility: hidden;
    }
  }

  .grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(var(--tile-size), 1fr));
    grid-auto-rows: 10px;
    gap: var(--margin);
    background: var(--widget-background);
  }

  .ugc-tile {
    $total-padding: 10px;

    box-sizing: border-box;
    max-width: 100%;
    grid-row-end: span 30;
  }

  .tile {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    background: var(--text-tile-background);
    box-sizing: border-box;
    height: 100%;
    border-radius: var(--inline-tile-border-radius);
  }

  .tile-share-right {
    display: flex;
    flex-grow: .05;
    position: absolute;
    right: 0;
    top: 12px;
    width: 48px;
    bottom: 0;
    justify-content: flex-end;
  }

  .tile-video {
    grid-row-end: span 30;
  }

  .tile-top {
    position: relative;
    width: 100%;
    background-repeat: no-repeat;
    background-size: cover;
    overflow: hidden;
    height: 100%;
  }

  .user-info {
    display: none;
    justify-content: center;

    &.has-name {
      display: flex;
    }

    &.has-user {
      display: flex;
    }

    align-items: flex-start;
    flex-grow: 1;
    flex-direction: column;
    min-height: 30px;
  }

  .flex-full {
    display: flex;
    width: 100%;
    align-items: center;
  }

  .network-icon.small {
    height: 12px;
    width: 12px;
  }

  .network-icon.large {
    height: 22px;
    width: 24px;
  }

  .content-icon.small,
  .icon-products.small {
    height: 10px;
    width: 10px;
  }

  .content-icon.large,
  .icon-products.large {
    height: 14px;
    width: 14px;
  }

  .tile-bottom {
    width: 100%;

    .tile-bottom-container {
      padding: 0 10px;
      min-height: 50px;

      .description {
        position: relative;
        padding: 10px 10px 10px 0;
        display: flex;
        justify-content: space-between;
        flex-direction: column;
      }

      tile-tags {
        margin-top: 16.25px;
        width: 100%;

        .swiper-tags {
          margin: 0;
          width: 100%;
        }

        .swiper-button-prev,
        .swiper-button-next {
          top: 0;
          height: 100%;
        }

        .swiper-button-next {
          right: 8px;
        }

        .swiper-nav-icon {
          height: 10px;
          width: 10px;
        }

        .swiper-button-disabled {
          display: none;
        }
      }
    }

    .tile-bottom-container.small {
      padding: 0 5px 10px 9px;

      .description {
        margin: 8px 5px 0 0;
      }

      tile-tags {
        margin-top: 8px;
      }

      .swiper-tags {
        max-width: 100%;
      }

      a {
        text-decoration: none;
      }

      .swiper-tags-button-next {
        right: 0;
      }
    }

    .tile-bottom-container.small * {
      font-size: 8px;
    }
  }

  .tag-inline {
    background: var(--tile-tag-background);
    border-radius: 3px !important;
    font-size: 10px;
    font-style: normal;
    font-weight: 400;
    padding: 0 4px;
    line-height: 16px;
    text-wrap: nowrap;
  }

  .tag-inline:last-child {
    margin-right: 10px;
  }

  .tag-slider {
    display: flex;
    align-items: center;
    position: relative;
    overflow: hidden;
  }

  .tag-slider-arrow {
    background: none;
    border: none;
    font-size: 20px;
    cursor: pointer;
    padding: 0 5px;
    z-index: 10;
    display: none;
  }

  .tag-slider-arrow.left-arrow,
  .tag-slider-arrow.right-arrow {
    position: absolute;
    top: -4px;
  }

  .tag-slider-arrow.left-arrow {
    left: 0;
  }

  .tag-slider-arrow.right-arrow {
    right: 7px;
  }

  .tile-tags::-webkit-scrollbar {
    display: none;
  }

  .tile-timestamp {
    color: #908e8f;
    font-size: 10px;
    font-weight: 400;
    line-height: 16px;
    display: inline-block;
    margin-bottom: 8px;
  }

  .caption {
    display: var(--show-caption-inline-webkit);
    font-size: var(--text-tile-font-size);
    -ms-overflow-style: none;
    -webkit-box-orient: vertical;
    overflow: hidden;
    -webkit-line-clamp: 4;
    max-height: 70px;
    text-overflow: ellipsis;
  }

  .caption.lines-5 {
    -webkit-line-clamp: 5;
    max-height: 80px;
  }

  .caption-paragraph {
    color: var(--text-tile-font-color);
    font-size: var(--text-tile-font-size);
  }

  .user-name {
    color: #fff;
    font-size: var(--text-tile-user-name-font-size);
    font-weight: 600;
  }

  .user-handle {
    color: var(--text-tile-user-handle-font-color);
    font-size: var(--text-tile-user-handle-font-size);
  }

  .hidden {
    display: none;
  }

  .tile-share-content {
    min-height: 29px;
    justify-content: space-between;
    position: relative;
    display: var(--tile-share-content-display-inline);

    .icon-share.small {
      height: 16px;
      width: 16px;
    }
  }

  .network-icon {
    margin: 0 8px 8px auto;
  }

  .network-icon-circle {
    background-color: white;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    aspect-ratio: 1 / 1;
    height: 22px;

    .network-icon {
      width: 10px;
      height: 10px;
      margin: 0;
      grid-area: media;
    }
  }

  .bottom-section {
    bottom: 3px;

    .network-icon {
      display: none;
    }
  }

  .shopping-icon {
    margin-right: 8px;
    grid-area: shop;
  }

  .tile-image-wrapper {
    height: 100%;

    img {
      height: 100%;
      aspect-ratio: 1 / 1;
      width: 100%;
      object-fit: cover;
      object-position: var(--image-position);
      border-radius: var(--inline-tile-border-radius) var(--inline-tile-border-radius) 0 0;
    }
  }

  .tile-content-wrapper {
    gap: 0 !important;
    padding-right: 17px !important;
  }
}



================================================
File: nightfall/widget.tsx
================================================
import { loadWidget, Sdk } from "@stackla/widget-utils"
import { loadWaterfallLayout } from "../waterfall/waterfall.lib"
import ProductsTemplate from "./products.template"

declare const sdk: Sdk

loadWidget({
  callbacks: {
    onLoadMore: [() => loadWaterfallLayout(false)]
  },
  templates: {
    "ugc-products": {
      template: ProductsTemplate
    }
  },
  features: {
    cssVariables: {
      "--tile-share-content-display-inline":
        sdk.getInlineTileConfig().show_sharing || sdk.getInlineTileConfig().show_timestamp ? "flex" : "none"
    }
  },
  extensions: {}
})

void loadWaterfallLayout(false)



================================================
File: quadrant/_styles.scss
================================================
@forward "pkg:swiper/swiper-bundle.css";
@use "@styles/partials/fonts";
@forward "@styles/partials/icons";
@forward "@styles/partials/loading";
@forward "@styles/partials/tile-overlay";
@forward "@styles/templates/expanded-tiles";
@forward "@styles/templates/swiper-overrides";
@use "@styles/partials/inline";
@use "@styles/templates/tags";
@use "@styles/templates/load-more";
@use "@styles/templates/tile-content" as tc;
@use "@styles/templates/shopspot-icon" as sicon;
@use "@styles/templates/time-phrase" as tphrase;
@use "@styles/templates/share-menu" as smenu;
@use "@styles/partials/icon-sections" as is;
@use "@styles/partials/expanded-swiper" as es;

.quadrant-inline,
expanded-tiles {
  @include is.icon-sections-styles;
  @include sicon.shopspot-icon-styles;
  @include tphrase.time-phrase-styles;
  @include smenu.share-menu-styles;
  @include tags.tile-tags-styles;
  @include tc.tile-content-styles;
  @include es.swiper-expanded-styles;
}



================================================
File: quadrant/layout.hbs
================================================
<div class="ugc-tiles quadrant-inline" cols="auto">
    {{#tiles}}
    {{>tpl-tile options=../options.config}}
    {{/tiles}}
</div>
<load-more />


================================================
File: quadrant/quadrant.lib.ts
================================================
import { EVENT_LOAD, EVENT_LOAD_MORE, waitForElements, type ISdk } from "@stackla/widget-utils"

declare const sdk: ISdk

const tileSizes: { [key: string]: number } = {
  small: 88.5,
  medium: 133.5,
  large: 269.2
}

const tilesContainer = sdk.querySelector(".ugc-tiles")!

export function removeEmptyTileGroups() {
  const tileGroups = sdk.querySelectorAll<HTMLElement>(".tile-group")
  tileGroups.forEach(tileGroup => {
    if (tileGroup.children.length === 0) {
      tileGroup.remove()
    }
  })
}

export function getTileRowHeight() {
  const style = sdk.getStyleConfig()
  const { inline_tile_size } = style

  const tileSizes: { [key: string]: string } = {
    small: "15vw",
    medium: "25vw",
    large: "50vw"
  }

  if (!inline_tile_size) {
    return tileSizes["medium"]
  }

  return tileSizes[inline_tile_size]
}

function createTileGroup(tiles: HTMLElement[], groupStartIndex: number, tileSize: number) {
  if (tiles.length - groupStartIndex < 5) {
    return
  }

  const tileGroup = document.createElement("div")
  tileGroup.classList.add("tile-group")

  const isLargeFirst = tileSize === tileSizes.large

  const largeTileIndex = isLargeFirst ? 4 : 0

  const largeTile = tiles[groupStartIndex + largeTileIndex]
  largeTile.classList.add("large", "processed")
  tileGroup.appendChild(largeTile)

  const startOffset = isLargeFirst ? 0 : 1
  for (let tileOffset = startOffset; tileOffset < startOffset + 4; tileOffset++) {
    const smallTile = tiles[groupStartIndex + tileOffset]
    smallTile.classList.add("small", "processed")
    tileGroup.appendChild(smallTile)
  }

  return tileGroup
}

export function addQuadrantTiles(tiles: HTMLElement[], tileSize: number, startIndex: number = 0) {
  if (tilesContainer) {
    for (let groupStartIndex = startIndex; groupStartIndex < tiles.length; groupStartIndex += 5) {
      const tileGroup = createTileGroup(tiles, groupStartIndex, tileSize)
      if (tileGroup) {
        tilesContainer?.appendChild(tileGroup)
      }
    }
  }
}

export async function preloadTileImagesAndRemoveBrokenTiles(tiles: NodeListOf<HTMLElement>): Promise<HTMLElement[]> {
  const loadMore = sdk.querySelector("#load-more")
  if (loadMore) {
    sdk.querySelector("#load-more").style.opacity = "0"
  }

  const promises = Array.from(tiles).map(async tile => {
    const tileElement = tile.querySelector<HTMLElement>(".tile")
    const tileImage = tileElement?.querySelector("img")?.src
    const inlineVideoPlay = tileElement?.classList.contains("inline-video-play")
    return new Promise(resolve => {
      if (inlineVideoPlay) {
        resolve(tile)
        return
      }
      const image = new Image()
      image.onload = () => resolve(tile)
      image.onerror = () => {
        tile.remove()
        resolve(null)
      }
      if (!tileImage) {
        resolve(null)
      }
      image.src = tileImage ?? ""

      if (!tileElement) {
        resolve(null)
        return
      }
    })
  })

  const loadedTiles = await Promise.all(promises)

  if (loadMore) {
    sdk.querySelector("#load-more").style.opacity = "1"
  }

  return loadedTiles.filter(tile => tile !== null) as HTMLElement[]
}

export function getQuadrantTiles() {
  const { inline_tile_size } = sdk.getStyleConfig()
  sdk.addEventListener(EVENT_LOAD_MORE, () => {
    const tileSize = tileSizes[inline_tile_size ?? "medium"]

    waitForElements(tilesContainer, ".ugc-tile:not(.processed)", async newTiles => {
      if (newTiles && newTiles.length >= 5) {
        const loadedTiles = await preloadTileImagesAndRemoveBrokenTiles(newTiles)
        addQuadrantTiles(loadedTiles, tileSize)
        removeEmptyTileGroups()
      }
    })
  })

  sdk.addEventListener(EVENT_LOAD, async () => {
    const tiles = sdk.querySelectorAll<HTMLElement>(".ugc-tile")

    if (!tiles || tiles.length === 0) {
      return
    }

    const loadedTiles = await preloadTileImagesAndRemoveBrokenTiles(tiles)
    const tileSize = tileSizes[inline_tile_size ?? "medium"]

    if (tiles && tiles.length > 0) {
      addQuadrantTiles(loadedTiles, tileSize)
    }
  })
}



================================================
File: quadrant/tile.hbs
================================================
{{#tile data-hash=@index class="grid-item"}}
  {{#ifAutoPlayVideo media options.tile_options.auto_play_video }}
    <div class="tile inline-video-play">
      {{playVideo this "100%" "100%"}}
    </div>
  {{else}}
    <div class="tile">
      {{#lazy image_thumbnail_url "120"}}{{/lazy}}
      <div class="icon-section">
        <div class="top-section">
          {{#each attrs}}
            {{#ifequals this "instagram.reel"}}
              <div class="content-icon icon-reel"></div>
            {{/ifequals}}
          {{/each}}
          {{#ifHasProductTags this}}
            <div class="shopping-icon icon-products"></div>
          {{/ifHasProductTags}}
        </div>
        <div class="center-section">
          {{#ifequals media "video"}}
            <div class="icon-play"></div>
          {{/ifequals}}
        </div>
        <div class="bottom-section">
          <tile-tags tile-id="{{id}}" variant="dark" mode="swiper" context="quadrant-inline" navigation-arrows="true"></tile-tags>
          <div class="network-icon icon-{{source}}"></div>
        </div>

        <shopspot-icon tile-id={{id}} />
      </div>
    </div>
  {{/ifAutoPlayVideo}}
{{/tile}}



================================================
File: quadrant/widget.scss
================================================
@use "styles";
@use "@styles/partials/media-queries";

#nosto-ugc-container {
  --tile-size-with-margin: calc(var(--tile-size) - var(--margin) * 1px);
  --full: 100%;

  padding: var(--margin);
  background-color: var(--widget-background);

  .ugc-tiles {
    display: grid;
    grid-template-columns: var(--tile-size);
    justify-content: center;
    column-gap: var(--margin);
    grid-auto-rows: var(--tile-size-column-height);

    @include media-queries.breakpoint(tablet) {
      grid-template-columns: auto;
      grid-auto-rows: auto;
    }

    @include media-queries.breakpoint(mobile) {
      grid-template-columns: auto;
      grid-auto-rows: auto;
    }

    video {
      object-fit: cover;
    }

    .icon-section {
      inset: 0;
    }

    .tile,
    .tile-image {
      background-position: top;
      background-size: cover;
      height: 100%;
      width: 100%;
      object-fit: cover;
      object-position: var(--image-position);
    }

    .tile {
      width: 100%;
      height: 100%;
      aspect-ratio: 1 / 1;
      object-fit: cover;

      img {
        object-fit: cover;
        aspect-ratio: 1 / 1;
        width: 100%;
        height: 100%;
      }

      position: relative;

      .tile-timephrase {
        position: absolute;
        top: 0;
        right: 0;
        padding: 10px;
        background-color: rgb(255 255 255 / 60%);
        border-radius: 2px;
        font-size: 12px;
        display: inline-block;
      }

      .tile-tags {
        position: absolute;
        margin: 0 16.4px 8.4px 8px;
      }

      .tile-image {
        display: flex;
      }
    }
  }

  .tile-group {
    --column-width: calc(25% - var(--margin));

    display: grid;
    gap: var(--margin);
    margin-bottom: var(--margin);
    grid-template-areas:  "large large small1 small2"
      "large large small3 small4";

    @include media-queries.breakpoint(mobile) {
      grid-template-areas: "large large"
        "small1 small2"
        "small3 small4";
    }
  }

  .ugc-tile {
      $total-padding: 20px;

      box-sizing: border-box;
      border-radius: var(--inline-tile-border-radius);
      overflow: hidden;
      
      &:not(.processed) {
        display: none;
      }

      &.large {
        grid-area: large;

        @include media-queries.breakpoint(tablet) {
          aspect-ratio: 1 / 1;
          width: #{calc(50vw - var(--margin) * 2)};
        }

        @include media-queries.breakpoint(mobile) {
          aspect-ratio: 1 / 1;
          width: #{calc(100vw - var(--margin) * 2)};
        }
      }

      &.small {
        @include media-queries.breakpoint(mobile) {
          aspect-ratio: 1 / 1;
        }

        @include media-queries.breakpoint(tablet) {
          aspect-ratio: 1 / 1;
        }

        &.small1 {
          grid-area: small1;
        }

        &.small2 {
          grid-area: small2;
        }

        &.small3 {
          grid-area: small3;
        }

        &.small4 {
          grid-area: small4;
        }
    }
  }

  tile-tags {
    padding: 0 5px;
    position: absolute;
  }
}

.hidden {
  display: none;
}

.expanded-tile-overlay {
  position: fixed;
  width: 100%;
  height: 100%;
  inset: 0;
  background-color: rgb(0 0 0 / 90%);
  z-index: 10;
  cursor: pointer;
}



================================================
File: quadrant/widget.tsx
================================================
import { loadWidget } from "@stackla/widget-utils"
import { getQuadrantTiles, getTileRowHeight } from "./quadrant.lib"

loadWidget({
  features: {
    preloadImages: false,
    hideBrokenImages: true,
    addNewTilesAutomatically: false,
    tileSizeSettings: {
      small: "1fr 1fr 1fr",
      medium: "1fr 1fr",
      large: "1fr"
    },
    cssVariables: {
      "--tile-size-column-height": getTileRowHeight()
    }
  }
})

getQuadrantTiles()



================================================
File: samples/README.md
================================================
# Sample files

These files are merely duplicates of items found in widget-utils folder, made easier to locate.

Please copy and paste these into your project as required to start adjusting templates. 


================================================
File: samples/add-to-cart.template.tsx
================================================
import { createElement } from "@stackla/widget-utils/jsx"

export default () => {
  return <div id="stacklapopup-add-to-cart"></div>
}



================================================
File: samples/expanded-tile.template.tsx
================================================
import { ExpandedTile } from "./tile.template"
import type { ISdk } from "@stackla/widget-utils"
import { createElement } from "@stackla/widget-utils/jsx"

declare const sdk: ISdk

export function ExpandedTiles() {
  const tiles = sdk.getTiles()
  const { show_nav } = sdk.getExpandedTileConfig()
  const navigationArrowsEnabled = show_nav

  return (
    <div class="expanded-tile-wrapper">
      <a class="exit" href="#">
        <span class="widget-icon close-white"></span>
      </a>
      <BackArrowIcon />
      <div class="swiper swiper-expanded">
        <div class="swiper-wrapper ugc-tiles">
          {tiles.map(tile => (
            <div
              class="ugc-tile swiper-slide"
              data-id={tile.id}
              data-yt-id={tile.youtube_id || ""}
              data-tiktok-id={tile.tiktok_id || ""}>
              <ExpandedTile tile={tile} />
            </div>
          ))}
        </div>
      </div>
      <div
        class="swiper-expanded-button-prev swiper-button-prev btn-lg"
        style={{ display: navigationArrowsEnabled ? "flex" : "none" }}>
        <span class="chevron-left" alt="Previous arrow" />
      </div>
      <div
        class="swiper-expanded-button-next swiper-button-next btn-lg"
        style={{ display: navigationArrowsEnabled ? "flex" : "none" }}>
        <span class="chevron-right" alt="Next arrow" />
      </div>
    </div>
  )
}

function BackArrowIcon() {
  return (
    <a class="back" href="#">
      <span class="widget-icon back-arrow"></span>
    </a>
  )
}



================================================
File: samples/load-more.template.tsx
================================================
import { createElement } from "@stackla/widget-utils"

export default function LoadMoreTemplate() {
  return (
    <div id="buttons">
      <a id="load-more">LOAD MORE</a>
    </div>
  )
}



================================================
File: samples/products.template.tsx
================================================
import type { Sdk, TagExtended, IProductsComponent, Tile } from "@stackla/widget-utils"
import { createElement, createFragment } from "@stackla/widget-utils/jsx"

export function ProductHeader({ product }: { product: TagExtended }) {
  if (!product) return <></>

  const { id, tag, custom_url, target, price, currency } = product

  const titleContent = tag && (
    <a href={custom_url} target={target} class="stacklapopup-products-item-title">
      {tag}
    </a>
  )

  const priceContent = price && (
    <div class="stacklapopup-products-item-price">{currency === "EUR" ? `${price}` : `${currency ?? ""}${price}`}</div>
  )

  return (
    <div class="stacklapopup-products-header">
      <div class="stacklapopup-products-item-header stacklapopup-products-item-active" data-tag-id={id}>
        {titleContent}
        {priceContent}
      </div>
    </div>
  )
}

export function ProductCTA({ sdk, product, tile }: { sdk: Sdk; product: TagExtended; tile: Tile }) {
  const { custom_url, target, availability, cta_text = "Buy Now", currency, id } = product
  const addToCart = sdk.getLoadedComponents().includes("add-to-cart")
  const parentNodeId = sdk.getNodeId()
  if (addToCart) {
    return (
      <>
        <a
          href={custom_url}
          target={target}
          class="stacklapopup-products-item-button-wrap"
          style={{
            display: "none"
          }}>
          <span className={`stacklapopup-products-item-button${availability ? "" : " disabled"}`}>{cta_text}</span>
        </a>
        <add-to-cart
          tile-id={tile.id}
          productId={id}
          id={`stacklapopup-add-to-cart-${id}-${tile.id}`}
          url={custom_url}
          target={target}
          availability={availability}
          cta={cta_text}
          currency={currency}
          parent={parentNodeId}></add-to-cart>
      </>
    )
  }

  return (
    <a href={custom_url} target={target} class="stacklapopup-products-item-button-wrap">
      <span className={`stacklapopup-products-item-button${availability ? "" : " disabled"}`}>{cta_text}</span>
    </a>
  )
}

export function ProductDetails({ sdk, product, tile }: { sdk: Sdk; product: TagExtended; tile: Tile }) {
  const selectedProduct = sdk.getSelectedProduct()
  const selectedProductId = selectedProduct ? selectedProduct.id : null
  const { custom_url, description = "Buy Now", id } = product

  const descriptionContent = description ? <p class="stacklapopup-products-item-description">{description}</p> : <></>

  const itemActive = id == selectedProductId ? "stacklapopup-products-item-active" : ""

  return (
    <div className={`stacklapopup-products-item-content ${itemActive}`} data-tag-id={id} data-custom-url={custom_url}>
      <div className="stacklapopup-products-item-description-wrapper">{descriptionContent}</div>
      <ProductCTA tile={tile} sdk={sdk} product={product}></ProductCTA>
    </div>
  )
}

export function ProductWrapper({
  products,
  selectedProductId
}: {
  products: TagExtended[]
  selectedProductId: string
}) {
  return (
    <>
      {products.map(({ id, image_small_url, is_cross_seller }) => (
        <div className="swiper-slide stacklapopup-product-wrapper">
          {is_cross_seller && (
            <div className="stacklapopup-products-item-image-recommendation-label">
              <p>
                <span class="icon-like"></span> great with
              </p>
            </div>
          )}
          <div
            className={`stacklapopup-products-item ${is_cross_seller ? "cross-seller" : ""} ${id == selectedProductId ? "stacklapopup-products-item-active" : ""}`}
            data-tag-id={id}>
            <img
              loading="lazy"
              class="stacklapopup-products-item-image"
              src={image_small_url}
              onerror="this.src='https://placehold.co/160x200'"
            />
          </div>
        </div>
      ))}
    </>
  )
}

export function ProductImages({
  products,
  selectedProduct
}: {
  products: TagExtended[]
  selectedProduct: TagExtended
}) {
  return (
    <>
      {products.length > 3 ? <div class="recommendations-text">see recommendations</div> : <></>}
      <div class={`stacklapopup-product-images-wrapper ${products.length <= 3 ? "arrows-hidden" : ""}`}>
        <div
          className={`swiper swiper-expanded-product-recs stacklapopup-products ${products.length <= 3 ? "arrows-hidden" : ""}`}>
          <div class="swiper-wrapper">
            {selectedProduct && (
              <ProductWrapper products={products} selectedProductId={selectedProduct.id}></ProductWrapper>
            )}
          </div>
        </div>
        <div class="swiper-exp-product-recs-button-prev swiper-button-prev">
          <span class="swiper-nav-icon icon-prev" />
        </div>
        <div class="swiper-exp-product-recs-button-next swiper-button-next">
          <span class="swiper-nav-icon icon-next" />
        </div>
      </div>
    </>
  )
}

export default function ProductsTemplate(sdk: Sdk, component: IProductsComponent) {
  const tileId = component.getTileId()
  const tile = sdk.getTileById(tileId)
  const selectedProductState = sdk.getSelectedProduct()

  if (!tile) {
    throw new Error("No tile found")
  }

  const products: TagExtended[] = (tile.tags_extended || []).filter(({ type }) => type === "product")

  if (!products.length) {
    return <></>
  }

  const selectedProductById = selectedProductState
    ? products.find(({ id }) => id == selectedProductState.id.toString())
    : null

  const selectedProduct: TagExtended = selectedProductById || products[0]
  const mappedProducts = products.map(product => (
    <ProductDetails tile={tile} sdk={sdk} product={product}></ProductDetails>
  ))

  return (
    <>
      <ProductHeader product={selectedProduct}></ProductHeader>
      <ProductImages products={products} selectedProduct={selectedProduct}></ProductImages>
      {mappedProducts}
    </>
  )
}



================================================
File: samples/share-menu.template.tsx
================================================
import type { ISdk, IShareMenuComponent, Tile } from "@stackla/widget-utils"
import { createElement, createFragment } from "@stackla/widget-utils/jsx"

export function ShareMenuTemplate(_sdk: ISdk, component: IShareMenuComponent) {
  const tile = component.tile
  const theme = component.theme

  if (!tile) {
    return <></>
  }

  return (
    <>
      <div class="share-button">
        <span class={`widget-icon icon-share ${theme}`} alt="Share button"></span>
      </div>
      <div class="share-socials-popup-wrapper">
        <div class="panel-overlay"></div>
        <div class="share-socials-popup">
          <a class="share-modal-exit" href="#">
            <span class="widget-icon close-white" alt="Exit button"></span>
          </a>
          <div class="popup-text">Share Now</div>
          <div class="ugc-inline-share-buttons">
            <MenuLink icon="facebook" tile={tile} />
            <MenuLink icon="x" tile={tile} />
            <MenuLink icon="pinterest" tile={tile} />
            <MenuLink icon="linkedin" tile={tile} />
            <MenuLink icon="email" tile={tile} />
          </div>
          <div class="url-copy">
            <div class="url-controls">
              <input class="share-url" type="text" id="share-url" value={tile.original_url} readonly />
              <button class="copy-button" data-action="copy">
                Copy
              </button>
            </div>
            <span class="copy-status"></span>
          </div>
        </div>
      </div>
    </>
  )
}

function MenuLink({ tile, icon }: { tile: Tile; icon: string }) {
  const url = new URL(`https://www.addtoany.com/add_to/${icon}`)
  url.searchParams.append("linkurl", tile.original_url)
  if (tile.name) {
    url.searchParams.append("linkname", tile.name)
  }
  const href = url.href
  const alt = `${icon} logo`

  return <a href={href} target="_blank" className={`widget-icon icon-${icon}-share`} alt={alt} />
}



================================================
File: samples/tile-content.template.tsx
================================================
import type { Sdk, Tile, ITileContentComponent } from "@stackla/widget-utils"
import { createElement, createFragment } from "@stackla/widget-utils/jsx"

type RenderConfig = {
  renderUserInfo: boolean
  renderAvatarImage: boolean
  renderUserTitle: boolean
  renderDescription: boolean
  renderCaption: boolean
  renderTimephrase: boolean
  renderShareMenu: boolean
}

type UserInfoTemplateProps = {
  avatar: string | null
  user: string | null
  originalUrl: string
  renderConfig: RenderConfig
}

export function TileContentTemplate(sdk: Sdk, component: ITileContentComponent) {
  const tileId = component.getTileId()
  const tile = sdk.getTileById(tileId)
  const renderConfig = component.renderConfig
  const sourceId = component.sourceId
  const mode = component.mode

  if (!tile) {
    throw new Error("No tile found")
  }

  return (
    <>
      <div class={`tile-content-wrapper ${component.mode} ${component.context}`}>
        <div class="header">
          <UserInfoTemplate
            avatar={tile.avatar}
            user={tile.user}
            originalUrl={tile.original_url || tile.original_link}
            renderConfig={renderConfig}
          />

          {renderConfig.renderShareMenu && <share-menu theme={mode} tile-id={tileId} source-id={sourceId}></share-menu>}
        </div>

        <Description tile={tile} renderConfig={renderConfig} />
      </div>
    </>
  )
}

function Description({ tile, renderConfig }: { tile: Tile; renderConfig: RenderConfig }) {
  if (!renderConfig.renderDescription) {
    return <></>
  }

  return (
    <div class="description">
      {renderConfig.renderCaption && (
        <div class="caption">
          <div class="caption-paragraph">{tile.message}</div>
        </div>
      )}

      {renderConfig.renderTimephrase && <time-phrase source-created-at={tile.source_created_at}></time-phrase>}
    </div>
  )
}

function UserInfoTemplate({ avatar, user, originalUrl, renderConfig }: UserInfoTemplateProps) {
  if (!renderConfig.renderUserInfo) {
    return <></>
  }

  const tileAvatar =
    renderConfig.renderAvatarImage && avatar ? (
      <span class="avatar-wrapper">
        <a class="avatar-link" href={originalUrl} target="_blank">
          <img
            loading="lazy"
            src={avatar}
            onerror={`this.src = "https://web-assets.stackla.com/app.stackla.com/media/images/default-avatars/default-avatar.png";`}
          />
        </a>
      </span>
    ) : (
      <></>
    )
  const tileUser =
    renderConfig.renderUserTitle && user ? (
      <a class="user-link" href={originalUrl} target="_blank">
        <span class="user-name">{user}</span>
        <span class="user-handle">@{user}</span>
      </a>
    ) : (
      <></>
    )

  return (
    <div class="user-info">
      {tileAvatar}
      {tileUser}
    </div>
  )
}



================================================
File: samples/tile.template.tsx
================================================
import { ISdk, Tile } from "@stackla/widget-utils/types"
import { createElement, createFragment } from "@stackla/widget-utils/jsx"
import {
  ExpandedTileProps,
  VideoContainer,
  VideoErrorFallbackTemplate,
  ShopspotProps
} from "@stackla/widget-utils/components"

declare const sdk: ISdk

export function ExpandedTile({ tile }: ExpandedTileProps) {
  const { show_shopspots, show_products, show_tags, show_sharing, show_caption, show_timestamp } =
    sdk.getExpandedTileConfig()

  const shopspotEnabled = sdk.isComponentLoaded("shopspots") && show_shopspots && !!tile.hotspots?.length
  const productsEnabled = sdk.isComponentLoaded("products") && show_products && !!tile.tags_extended?.length
  const tagsEnabled = show_tags
  const sharingToolsEnabled = show_sharing

  const parent = sdk.getNodeId()

  return (
    <>
      <div class="panel">
        <div class="panel-left">
          <IconSection tile={tile} productsEnabled={productsEnabled} />
          <div class="image-wrapper">
            <div class="image-wrapper-inner">
              {tile.media === "video" ? (
                <>
                  <VideoContainer shopspotEnabled={shopspotEnabled} tile={tile} parent={parent} />
                  <VideoErrorFallbackTemplate tile={tile} />
                </>
              ) : tile.media === "image" ? (
                <ImageTemplate tile={tile} image={tile.image} shopspotEnabled={shopspotEnabled} parent={parent} />
              ) : tile.media === "text" ? (
                <span class="content-text">{tile.message}</span>
              ) : tile.media === "html" ? (
                <span class="content-html">{tile.html}</span>
              ) : (
                <></>
              )}
            </div>
          </div>
        </div>
        <div class="panel-right">
          <div class="panel-right-wrapper">
            <div class="content-wrapper">
              <div class="content-inner-wrapper">
                <tile-content
                  tileId={tile.id}
                  render-share-menu={sharingToolsEnabled}
                  render-caption={show_caption}
                  render-timephrase={show_timestamp}
                />
                {tagsEnabled && (
                  <tile-tags tile-id={tile.id} mode="swiper" context="expanded" navigation-arrows="true" />
                )}
                {productsEnabled && (
                  <>
                    <ugc-products parent={parent} tile-id={tile.id} />
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  )
}

export function IconSection({ tile, productsEnabled }: { tile: Tile; productsEnabled: boolean }) {
  const topSectionIconContent = []
  const bottomSectionIconContent = []

  if (tile.attrs?.includes("instagram.reel")) {
    topSectionIconContent.push(<div class="content-icon icon-reel"></div>)
  } else if (tile.attrs?.includes("youtube.short")) {
    topSectionIconContent.push(<div class="content-icon icon-youtube-short"></div>)
  }
  if (productsEnabled) {
    topSectionIconContent.push(<div class="shopping-icon icon-products"></div>)
  }

  bottomSectionIconContent.push(<div class={`network-icon icon-${tile.source}`}></div>)

  return (
    <div class="icon-section">
      <div class="top-section">{...topSectionIconContent}</div>
      <div class="bottom-section">{...bottomSectionIconContent}</div>
    </div>
  )
}

export function ShopSpotTemplate({ shopspotEnabled, parent, tileId }: ShopspotProps) {
  return shopspotEnabled ? (
    <>
      <shopspot-icon parent={parent} mode="expanded" tile-id={tileId} />
    </>
  ) : (
    <></>
  )
}

export function ImageTemplate({
  tile,
  image,
  shopspotEnabled = false,
  parent
}: {
  tile: Tile
  image: string
  shopspotEnabled?: boolean
  parent?: string
}) {
  return image ? (
    <>
      <div class="image-filler blurred" style={{ "background-image": `url('${image}')` }}></div>
      <div class="image">
        {shopspotEnabled ? (
          <ShopSpotTemplate shopspotEnabled={shopspotEnabled} parent={parent} tileId={tile.id} />
        ) : (
          <></>
        )}
        <img class="image-element" src={image} loading="lazy" alt={tile.description || "Image"} />
      </div>
    </>
  ) : (
    <></>
  )
}



================================================
File: shortvideo/_dimens.scss
================================================
@forward "@styles/partials/inline-dimens";

// swiper element width for large screens
$swiper-container-width-lg: 100%;

// nosto-ugc-container styles
$nosto-container-margin: 20px;

// swiper slide / tile width for medium/small screens
$tile-width-md: 95%;
$tile-height-md: 100%;

// swiper element width for medium/small screens
$swiper-container-width-md: auto;



================================================
File: shortvideo/_icon-sections-override.scss
================================================
@use "@styles/partials/icon-sections" as is;

.shortvideo-inline {
  @include is.icon-sections-styles;
}

expanded-tiles {
  @include is.icon-sections-styles {
    .icon-section {
      bottom: 0;
    }

    &:has(tile-content:not(:empty)) {
      .icon-section {
        height: calc(100% - 75px);
      }
    }
  }
}



================================================
File: shortvideo/_inline-tile.scss
================================================
@use "sass:map";
@use "@styles/partials/media-queries";
@use "dimens";

#nosto-ugc-container {
  .ugc-tile {
    position: relative;
    min-width: var(--tile-width) !important;
    width: var(--tile-width) !important;
    display: flex;
    margin-right: 10px;
    border-radius: var(--inline-tile-border-radius);
    overflow: hidden;

    .tile {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      background-size: cover;

      .tile-image-wrapper {
        display: flex;
        width: 100%;
        height: var(--tile-size) !important;

        img {
          aspect-ratio: auto;
          width: 100%;
          object-fit: cover;
          overflow: hidden;
          border-radius: dimens.$inline-tile-border-radius;
          position: relative;
          opacity: 1;
        }

        video {
          object-fit: cover;
        }
      }
    }
  }

  .swiper-button-next,
  .swiper-button-prev {
    display: var(--navigation-arrow-display) !important;

    --swiper-navigation-sides-offset: 0px;

    top: calc(var(--swiper-navigation-top-offset, 50%) - dimens.$nosto-container-margin + 10);
  }
}



================================================
File: shortvideo/_styles.scss
================================================
@forward "pkg:swiper/swiper-bundle.css";
@use "@styles/partials/fonts";
@forward "@styles/partials/icons";
@forward "@styles/partials/loading";
@forward "inline-tile";
@forward "@styles/partials/tile-overlay";
@forward "@styles/templates/expanded-tiles";
@forward "@styles/templates/swiper-overrides";
@use "@styles/templates/story-line-expanded";
@use "@styles/templates/tile-content" as tc;
@use "@styles/templates/shopspot-icon" as sicon;
@use "@styles/templates/time-phrase" as tphrase;
@use "@styles/templates/share-menu" as smenu;
@use "icon-sections-override";
@use "tile-content-override";
@use "@styles/templates/tags";
@use "@styles/partials/expanded-swiper" as es;
@use "@styles/partials/inline";

.shortvideo-inline,
expanded-tiles {
  @include sicon.shopspot-icon-styles;
  @include tphrase.time-phrase-styles;
  @include smenu.share-menu-styles;
  @include tags.tile-tags-styles;
  @include es.swiper-expanded-styles;
}



================================================
File: shortvideo/_tile-content-override.scss
================================================
@use "@styles/templates/tile-content" as tc;

.shortvideo-inline {
  @include tc.tile-content-styles;
}

expanded-tiles {
  @include tc.tile-content-styles {
    .panel-inactive {
      tile-content {
        place-self: flex-end center;
        grid-row: span 2;
        margin-bottom: 20%;

        .tile-content-wrapper .user-info {
          gap: 20px;

          .user-link .user-name {
            color: #4a4a4a;
            font-size: 20px;
          }

          .avatar-wrapper img {
            width: 100px;
            height: 100px;
            opacity: 0.3;
          }
        }
      }
    }
  }
}



================================================
File: shortvideo/inline-shortvideo-swiper.loader.ts
================================================
import { Sdk, SwiperData } from "types"
import {
  initializeSwiper,
  refreshSwiper,
  setSwiperLoadingStatus,
  isSwiperLoading,
  updateSwiperInstance
} from "@stackla/widget-utils/extensions/swiper"

import type { Swiper } from "swiper"
import { enableTileImages, loadAllUnloadedTiles } from "@stackla/widget-utils/libs"
import { EVENT_LOAD_MORE } from "@stackla/widget-utils/events"

declare const sdk: Sdk

export function initializeInlineSwiperListeners() {
  const swiper = sdk.querySelector(".shortvideo-inline.swiper-inline")

  if (!swiper) {
    throw new Error("Failed to find swiper element")
  }

  initializeSwiperForInlineTiles()
}

function initializeSwiperForInlineTiles() {
  const widgetSelector = sdk.querySelector<HTMLElement>(".shortvideo-inline.swiper-inline")

  if (!widgetSelector) {
    throw new Error("Failed to find widget UI element. Failed to initialise Swiper")
  }

  initializeSwiper({
    id: "inline-shortvideo",
    mode: "inline",
    widgetSelector,
    prevButton: "swiper-inline-shortvideo-button-prev",
    nextButton: "swiper-inline-shortvideo-button-next",
    paramsOverrides: {
      slidesPerView: "auto",
      grabCursor: true,
      mousewheel: true,
      allowTouchMove: false,
      breakpointsBase: "container",
      breakpoints: {
        0: {
          slidesPerView: 1
        },
        537: {
          slidesPerView: 3
        },
        952: {
          slidesPerView: 7
        }
      },
      keyboard: {
        enabled: true,
        onlyInViewport: false
      },
      on: {
        reachEnd: () => {
          sdk.triggerEvent(EVENT_LOAD_MORE)
        },
        beforeInit: (swiper: Swiper) => {
          enableLoadedTiles()
          swiper.slideToLoop(0, 0, false)
        },
        afterInit: (swiper: Swiper) => {
          setSwiperLoadingStatus("inline-shortvideo", true)
          void loadTilesAsync(swiper)
        },
        activeIndexChange: (swiper: Swiper) => {
          if (swiper.navigation.prevEl) {
            if (swiper.realIndex === 0 && isSwiperLoading("inline-shortvideo")) {
              disablePrevNavigation(swiper)
            } else {
              enablePrevNavigation(swiper)
            }
          }
        }
      }
    }
  })
}

export function enableLoadedTiles() {
  sdk
    .querySelectorAll<HTMLElement>(".ugc-tiles > .ugc-tile[style*='display: none']")
    ?.forEach((tileElement: HTMLElement) => (tileElement.style.display = ""))
}

async function loadTilesAsync(swiper: Swiper) {
  const observer = registerObserver(swiper)

  loadAllUnloadedTiles()
  swiper.update()

  observer.disconnect()
  swiper.navigation.nextEl.classList.remove("swiper-button-hidden")
  updateLoadingStateInterval(swiper.el)
}

function updateLoadingStateInterval(swiperElem: HTMLElement) {
  const intervalId = setInterval(function () {
    const elements = swiperElem.querySelectorAll<HTMLElement>(".swiper-slide:has(.icon-section.hidden)")
    if (elements.length === 0) {
      clearInterval(intervalId)
      updateSwiperInstance("inline-shortvideo", (swiperData: SwiperData) => {
        swiperData.isLoading = false
        if (swiperData.instance) {
          swiperData.instance.off("activeIndexChange")
          swiperData.instance.setGrabCursor()
          swiperData.instance.allowTouchMove = true
          swiperData.instance.params.loop = true
          enablePrevNavigation(swiperData.instance)
        }
      })
      refreshSwiper("inline-shortvideo")
    }
  }, 200)
}

function enablePrevNavigation(swiper: Swiper) {
  swiper.allowSlidePrev = true
  swiper.navigation.prevEl.classList.remove("swiper-button-hidden")
}

function disablePrevNavigation(swiper: Swiper) {
  swiper.allowSlidePrev = false
  swiper.navigation.prevEl.classList.add("swiper-button-hidden")
}

function registerObserver(swiper: Swiper) {
  const observer = new MutationObserver(() => {
    enableTileImages(swiper.wrapperEl)
  })
  observer.observe(swiper.wrapperEl, {
    childList: true
  })
  return observer
}



================================================
File: shortvideo/layout.hbs
================================================
<div class="track swiper shortvideo-inline swiper-inline" style="display:none;">
	<div class="swiper-wrapper ugc-tiles">
		{{#tiles}}
		{{>tpl-tile options=../options.config}}
		{{/tiles}}
	</div>
</div>
<div class="swiper-inline-shortvideo-button-prev swiper-button-prev btn-lg">
	<span class="swiper-nav-icon icon-prev-circle" />
</div>
<div class="swiper-inline-shortvideo-button-next swiper-button-next btn-lg">
	<span class="swiper-nav-icon icon-next-circle" />
</div>



================================================
File: shortvideo/tile.hbs
================================================
{{#ifShortVideo this}}
  {{#tile class="swiper-slide"}}
    <div class="tile">
      <div class="icon-section hidden">
        <div class="top-section">
          {{#each attrs}}
            {{#ifequals this "instagram.reel"}}
              <div class="content-icon icon-reel"></div>
            {{/ifequals}}
            {{#ifequals this "youtube.short"}}
              <div class="content-icon icon-youtube-short"></div>
            {{/ifequals}}
          {{/each}}
          {{#ifHasProductTags this}}
            <div class="shopping-icon icon-products"></div>
          {{/ifHasProductTags}}
        </div>
        <div class="center-section">
          <div class="icon-play"></div>
        </div>
      </div>
      <div class="tile-image-wrapper">
        <shopspot-icon tile-id={{id}}></shopspot-icon>
        {{playVideo this "100%" "100%"}}
        <div class="swiper-lazy-preloader"></div>
      </div>
    </div>
  {{/tile}}
{{/ifShortVideo}}



================================================
File: shortvideo/widget.scss
================================================
@use "styles";
@use "@styles/partials/media-queries";
@use "dimens";

:host {
  transition: ease all 0.5s;
}

#nosto-ugc-container {
  background-color: var(--widget-background);
  display: flex;
  place-items: center;
  margin: dimens.$nosto-container-margin;
  width: calc(100% - (dimens.$nosto-container-margin * 2));
  height: var(--tile-size);

  .icon-section {
    display: flex;
    position: absolute;
    height: 100%;
  }
}

.hidden {
  display: none;
}

@include media-queries.breakpoint(mobile) {
  #nosto-ugc-container {
    height: auto;

    .shortvideo-inline.swiper-inline {
      width: dimens.$swiper-container-width-md !important;

      .swiper-slide {
        width: 100% !important;
      }
    }

    .tile {
      min-width: dimens.$tile-width-md !important;
      width: dimens.$tile-width-md !important;
      height: dimens.$tile-height-md !important;

      .icon-section {
        width: dimens.$tile-width-md;
      }
    }
  }
}


================================================
File: shortvideo/widget.tsx
================================================
import { Sdk } from "types"

declare const sdk: Sdk

import { loadWidget } from "@stackla/widget-utils"
import { initializeInlineSwiperListeners } from "./inline-shortvideo-swiper.loader"
import { StoryExpandedTiles } from "@widgets/storyline/templates/base.template"

loadWidget({
  extensions: {
    swiper: true
  },
  features: {
    handleLoadMore: false,
    tileSizeSettings: {
      small: "203px",
      medium: "281px",
      large: "409px"
    },
    tileWidthSettings: {
      small: "116.5px",
      medium: "158px",
      large: "229px"
    },
    cssVariables: {
      "--navigation-arrow-display": sdk.isPaginationEnabled() && !sdk.isScrollWidget() ? "flex" : "none"
    }
  },
  templates: {
    "expanded-tiles": {
      template: StoryExpandedTiles
    }
  }
})

sdk.querySelector(".track")?.style.removeProperty("display")

initializeInlineSwiperListeners()



================================================
File: slider/_icon-sections-overrides.scss
================================================
  .icon-section {
      position: relative;

      .network-icon {
          position: absolute;
      }

      .content-icon {
          position: absolute;
      }

      .shopping-icon {
          position: absolute;
      }
  }

.pattern-horizontal-reversed {
  .icon-section {
      .network-icon {
        left: 0;
        top: 10px;
      }

      .content-icon {
        right: 10px;
        top: 10px;
      }

      .shopping-icon {
        bottom: 10px;
        right: 10px;
      }
  }

}

.pattern-horizontal {
  .icon-section {
      .network-icon {
          top: 10px;
          right: 0;
      }

      .content-icon {
          top: 10px;
          left: 10px;
      }

      .shopping-icon {
        bottom: 10px;
        left: 10px;
      }
  }
}

.pattern-vertical {
  .icon-section {
    position: relative;

    .network-icon {
      left: 0;
      right: 0;
      bottom: 0;
      margin: 0 auto;
    }

    .content-icon {
      top: 10px;
      left: 10px;
    }
    
    .shopping-icon {
      top: 10px;
      right: 10px;
    }
  }
}

.pattern-vertical-reversed {
  .icon-section {
    position: relative;

    .network-icon {
      left: 0;
      right: 0;
      top: 0;
      margin: 0 auto;
    }

    .content-icon {
      bottom: 10px;
      left: 10px;
    }
    
    .shopping-icon {
      bottom: 10px;
      right: 10px;
    }
  }
}


================================================
File: slider/_responsive.scss
================================================
@use "@styles/partials/media-queries";

@mixin responsiveness-template {
  &.track {
    @include media-queries.breakpoint(mobile) {
      --render-mode: mobile;

      .ugc-tiles {
        height: 100%;
      }

      .partially-visible {
        opacity: 1;
        filter: none;
      }

      .container {
        width: 100vw;

        .ugc-tiles {
          grid-template-columns: 1fr;
          height: 100%;
          grid-template-rows: 60% 40%;
          gap: 0;
          grid-auto-columns: auto;

          .ugc-tile {
            max-height: 100vh;
            grid-template-areas: "image" "details";
            min-width: initial;
            grid-column: auto;
            gap: 10px;
            height: 100vh;
            grid-row: span 2;
            grid-template-rows: 60% calc(40% - 10px);
            border-radius: 0;

            .image-section img {
              border-radius: 0;
            }

            .image-section,
            .details-section {
              width: 100%;
              height: 100%;
            }

            .details-section {
              .footer share-menu {
                display: none;
              }
            }

            .icon-section {
              grid-template-areas:
                "type shop"
                "media .";

              > .network-icon {
                place-self: flex-end center;
                grid-column: span 2;
              }

              > .content-icon {
                place-self: flex-start;
                margin: 10px 0 0 10px;
              }

              > .shopping-icon {
                place-self: flex-start flex-end;
                margin: 10px 10px 0 0;
              }
            }
          }

          .ugc-tile[grid-column-indent] {
            top: unset;
          }
        }
      }
    }

    @media (min-width: 1080px) and (max-width: 1400px) {
     .container {
        max-width: 1080px !important;
     }
    }

    @media (min-width: 1630px) and (max-width: 1870px) {
      .container {
        max-width: 1630px;
      }
    }

    @include media-queries.breakpoint(tablet) {
      --render-mode: tablet;

      .container {
        width: calc(100vw - 10px);
        margin-top: 5px;

        .ugc-tiles {
          height: 100%;
          justify-content: center;
          grid-template-columns: repeat(auto-fit, minmax(var(--tile-size), 1fr));

          .ugc-tile {
            .image-section,
            .details-section {
              width: 100%;
              height: 100%;
            }

            .image-section {
              height: auto;

              img {
                aspect-ratio: 1 / 1;
              }
            }
          }
        }
      }
    }
  }
}



================================================
File: slider/_styles.scss
================================================
@forward "pkg:swiper/swiper-bundle.css";
@use "@styles/partials/fonts";
@forward "@styles/partials/icons";
@forward "@styles/partials/loading";
@forward "@styles/partials/tile-overlay";
@forward "@styles/templates/expanded-tiles";
@forward "@styles/templates/swiper-overrides";
@forward "./components/tile-content/overrides";
@forward "./icon-sections-overrides";
@use "@styles/templates/shopspot-icon" as sicon;
@use "@styles/templates/time-phrase" as tphrase;
@use "@styles/templates/share-menu" as smenu;
@use "@styles/partials/grid";
@use "@styles/templates/tags";
@use "@styles/partials/expanded-swiper" as es;
@use "@styles/partials/inline";

.slider-inline,
expanded-tiles:not(:empty) {
  @include grid.grid-styles;
  @include sicon.shopspot-icon-styles;
  @include tphrase.time-phrase-styles;
  @include smenu.share-menu-styles;
  @include tags.tile-tags-styles;
  @include es.swiper-expanded-styles;
}



================================================
File: slider/layout.hbs
================================================
<div class="slider-inline track">
  <div class="container">
    <div class="tiles-scroll-button" id="scroll-up">
      <span class="widget-icon chevron-left"></span>
    </div>
    <div class="slider-loading loading"></div>
    <div class="ugc-tiles">
      {{#tiles}}
      {{>tpl-tile options=../options.config}}
      {{/tiles}}
    </div>
    <div class="tiles-scroll-button" id="scroll-down">
      <span class="widget-icon chevron-right"></span>
    </div>
  </div>
</div>



================================================
File: slider/load-slider.ts
================================================
import { Sdk } from "types"
import { Features } from "@stackla/widget-utils"
import navigator from "./navigator"
import { inlineTileSize } from "./utils"
import { initObservers } from "./observers"
import {
  getDesktopIndents,
  getDeviceType,
  getExtraLargeDesktopIndents,
  getExtraSmallDesktopIndents,
  getPatternByDeviceType,
  getSmallDesktopIndents,
  getTabletIndents
} from "./components/responsive-patterns"

declare const sdk: Sdk

export function loadSlider(settings: Features["tileSizeSettings"], observers: ReturnType<typeof initObservers>) {
  const tileBlockElement = sdk.querySelector(".ugc-tile-wrapper")
  const sliderInline = sdk.querySelector(".slider-inline")
  const loadingElement = sliderInline.querySelector(".slider-loading.loading")
  const tilesContainer = sliderInline.querySelector<HTMLElement>(".ugc-tiles")

  if (!sliderInline) {
    throw new Error("Slider inline container not found")
  }

  if (!tileBlockElement) {
    throw new Error("Slider Tiles Scroll Container not found")
  }

  if (!tilesContainer) {
    throw new Error("Slider Tiles Scroll Container not found")
  }

  tilesContainer.setAttribute("variation", inlineTileSize())

  navigator(settings, observers)

  loadingElement?.classList.add("hidden")

  function generatePatterns() {
    const patternSequence = getPatternByDeviceType()

    let sequenceIndex = 0

    sdk.querySelectorAll(".ugc-tile").forEach(tile => {
      tile.classList.remove(
        "pattern-horizontal",
        "pattern-vertical",
        "pattern-vertical-reversed",
        "pattern-horizontal-reversed",
        "grid-column-indent"
      )
      // indents for 1 vertical,2 vertical reversed, 8 - horizontal, 11-horizontal reversed

      if (getDeviceType() === "desktop") {
        const indents = getDesktopIndents()
        if (indents.includes(sequenceIndex)) {
          tile.classList.add("grid-column-indent")
        }
      }

      if (getDeviceType() === "x-large-desktop") {
        const indents = getExtraLargeDesktopIndents()
        if (indents.includes(sequenceIndex)) {
          tile.classList.add("grid-column-indent")
        }
      }

      if (getDeviceType() === "tablet") {
        const indents = getTabletIndents()
        if (indents.includes(sequenceIndex)) {
          tile.classList.add("grid-column-indent")
        }
      }

      if (getDeviceType() == "small-desktop") {
        const indents = getSmallDesktopIndents()
        if (indents.includes(sequenceIndex)) {
          tile.classList.add("grid-column-indent")
        }
      }

      if (getDeviceType() == "x-small-desktop") {
        const indents = getExtraSmallDesktopIndents()
        if (indents.includes(sequenceIndex)) {
          tile.classList.add("grid-column-indent")
        }
      }

      // Apply the current pattern in the sequence
      const currentPattern = patternSequence[sequenceIndex]
      tile.classList.add(currentPattern)
      tile.dataset.patternId = sequenceIndex.toString()

      // Move to the next pattern in the sequence, cycling back to the start
      sequenceIndex = (sequenceIndex + 1) % patternSequence.length
    })
  }

  function resizeHandler() {
    generatePatterns()
  }

  function tilesUpdatedEventHandler() {
    generatePatterns()
    observers.configTileIntersectionTargets()
  }

  function widgetLoadedEventHandler() {
    generatePatterns()
  }

  generatePatterns()

  return { tilesUpdatedEventHandler, widgetLoadedEventHandler, resizeHandler }
}



================================================
File: slider/navigator.ts
================================================
import { EVENT_LOAD_MORE, Features, ISdk } from "@stackla/widget-utils"
import { getRenderMode, getSliderElement, getTileContainerElement } from "./utils"
import { initObservers } from "./observers"

type SwiperDirection = "none" | "left" | "right" | "up" | "down"

declare const sdk: ISdk

export default function (_settings: Features["tileSizeSettings"], observers: ReturnType<typeof initObservers>) {
  const sliderElement = getSliderElement()
  const tilesContainerElement = getTileContainerElement()
  const scrollHistory: Array<number> = []
  const scrollerHandler = scroller(sliderElement)

  const swipeDetectHandler = swipeDetect(tilesContainerElement, direction => {
    if (direction === "up") {
      scrollDown()
    } else if (direction === "down") {
      scrollUp()
    }
  })

  const mobileAndTabletCheck = function () {
    let check = false
    ;(function (a) {
      if (
        /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(
          a
        ) ||
        // eslint-disable-next-line no-useless-escape
        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
          a.substr(0, 4)
        )
      )
        check = true
    })(navigator.userAgent || navigator.vendor)
    return check
  }

  const screenResizeObserver = new ResizeObserver(() =>
    requestAnimationFrame(() => {
      scrollerHandler.setPage(1)
      tilesContainerElement.scrollTop = 0
      if (getRenderMode(sliderElement) === "desktop") {
        swipeDetectHandler.unregister()
        scrollerHandler.register()
      } else {
        swipeDetectHandler.register()

        if (!mobileAndTabletCheck()) {
          scrollerHandler.register()
        }
      }
    })
  )

  screenResizeObserver.observe(tilesContainerElement)

  function scroller(el: HTMLElement) {
    const sliderScrollUpButton = el.querySelector<HTMLElement>("#scroll-up")
    const sliderScrollDownButton = el.querySelector<HTMLElement>("#scroll-down")
    let page = 1

    if (!sliderScrollUpButton) {
      throw new Error("Slider Tiles Scroll Up Button not found")
    }

    if (!sliderScrollDownButton) {
      throw new Error("Slider Tiles Scroll Down Button not found")
    }

    function scrollUpEventHandler(event: Event) {
      event.preventDefault()
      event.stopImmediatePropagation()
      event.stopPropagation()
      if (tilesContainerElement.scrollTop > 0) {
        scrollUp()
      }
    }

    function scrollDownEventHandler(event: Event) {
      event.preventDefault()
      event.stopImmediatePropagation()
      event.stopPropagation()
      scrollDown()
    }

    function register() {
      toggleScrollUp("hidden")
      toggleScrollDown("visible")
      sliderScrollUpButton!.addEventListener("click", scrollUpEventHandler)
      sliderScrollDownButton!.addEventListener("click", scrollDownEventHandler)
    }

    function unregister() {
      toggleScrollUp("hidden")
      toggleScrollDown("hidden")
      sliderScrollUpButton!.removeEventListener("click", scrollUpEventHandler)
      sliderScrollDownButton!.removeEventListener("click", scrollDownEventHandler)
    }

    function toggleScrollUp(visibility: string) {
      sliderScrollUpButton!.style.visibility = visibility
    }

    function toggleScrollDown(visibility: string) {
      sliderScrollDownButton!.style.visibility = visibility
    }

    function setPage(value: number) {
      page = value
    }

    function incrementPage() {
      setPage(page + 1)

      const hasMoreTiles = sdk.hasMoreTiles()

      if (
        tilesContainerElement.scrollTop + tilesContainerElement.clientHeight + 200 >=
        tilesContainerElement.scrollHeight
      ) {
        if (hasMoreTiles) {
          sdk.triggerEvent(EVENT_LOAD_MORE)
        } else {
          toggleScrollDown("hidden")
        }
      }
    }

    function decrementPage() {
      setPage(page - 1)

      if (page === 1) {
        toggleScrollUp("hidden")
      }

      toggleScrollDown("visible")
    }

    return {
      register,
      unregister,
      toggleScrollUp,
      toggleScrollDown,
      page,
      incrementPage,
      decrementPage,
      setPage
    }
  }

  function swipeDetect(el: HTMLElement, callback: (swipeDirection: SwiperDirection) => void) {
    const allowedTime = 1500,
      threshold = 150,
      restraint = 100
    let startX: number, startY: number, startTime: number

    function registerTouchStart(event: TouchEvent) {
      requestAnimationFrame(() => {
        const touchObject = event.changedTouches[0]
        startX = touchObject.pageX
        startY = touchObject.pageY
        startTime = new Date().getTime()
        event.preventDefault()
      })
    }

    function registerTouchEnd(event: TouchEvent) {
      requestAnimationFrame(() => {
        const touchObject = event.changedTouches[0]
        const distX = touchObject.pageX - startX
        const distY = touchObject.pageY - startY
        const elapsedTime = new Date().getTime() - startTime

        if (elapsedTime <= allowedTime) {
          if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint) {
            callback(distX < 0 ? "left" : "right")
          } else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint) {
            callback(distY < 0 ? "up" : "down")
          }
        }
        event.preventDefault()
      })
    }

    return {
      register: () => {
        el.addEventListener("touchstart", registerTouchStart, false)
        el.addEventListener("touchmove", (event: TouchEvent) => event.preventDefault())
        el.addEventListener("touchend", registerTouchEnd)
      },

      unregister: () => {
        el.removeEventListener("touchstart", registerTouchStart, false)
        el.removeEventListener("touchmove", (event: TouchEvent) => event.preventDefault())
        el.removeEventListener("touchend", registerTouchEnd)
      }
    }
  }

  function scrollUp() {
    scrollerHandler.toggleScrollDown("visible")
    scrollerHandler.decrementPage()

    tilesContainerElement.scrollTo({
      top: scrollHistory.pop(),
      left: 0
    })

    setTimeout(() => {
      observers.cleanupStyles()
    }, 500)
  }

  function scrollDown() {
    scrollerHandler.toggleScrollUp("visible")
    scrollerHandler.incrementPage()

    tilesContainerElement.scrollBy({
      top: getBlockHeight(),
      left: 0
    })
  }

  function getNextScrollPosition() {
    scrollHistory.push(tilesContainerElement.scrollTop)
    return observers.getNextTilePosition()
  }

  function getBlockHeight() {
    return getNextScrollPosition()
  }
}



================================================
File: slider/observers.ts
================================================
import { Features } from "@stackla/widget-utils"
import { getRenderMode, getSliderElement, getTileContainerElement, getTileElements } from "./utils"

type SliderObserverProps = {
  settings: Features["tileSizeSettings"]
  resizeCb?: () => void
  intersectionCb?: () => void
}

export function initObservers({ resizeCb, intersectionCb }: SliderObserverProps) {
  const animationClasses = { up: "tile-animate-up", down: "tile-animate-down" }
  const partiallyVisibleClass = "partially-visible"
  const tilesContainerElement = getTileContainerElement()
  let previousPosition = tilesContainerElement.scrollTop
  const latestEntries: IntersectionObserverEntry[] = []

  const resizeObserver = new ResizeObserver(() =>
    requestAnimationFrame(() => {
      resizeCb?.()
    })
  )

  const tilesIntersectionObserver = new IntersectionObserver(
    (entries: IntersectionObserverEntry[]) => {
      entries.forEach(entry => {
        const htmlElement = entry.target as HTMLElement
        enableAnimation(htmlElement)
        if (entry.isIntersecting) {
          if (entry.target.classList.contains(partiallyVisibleClass)) {
            if (entry.intersectionRatio === 1) {
              entry.target.classList.remove(partiallyVisibleClass)
              return
            }
          }
        }

        latestEntries.push(entry)

        entry.target.classList.add(partiallyVisibleClass)
      })
      intersectionCb?.()
      previousPosition = tilesContainerElement.scrollTop
    },
    { root: tilesContainerElement, rootMargin: "0px", threshold: [1] }
  )

  getTileElements()[0].classList.add(animationClasses.up)

  function getNextTilePosition() {
    if (window.innerWidth < 600) {
      return window.innerHeight * 2
    }

    const classesAsArray = Array.from(getTileElements()[0].classList)

    if (classesAsArray.includes("pattern-horizontal") || classesAsArray.includes("pattern-horizontal-reversed")) {
      return getTileElements()[0].getBoundingClientRect().height
    }

    return getTileElements()[0].getBoundingClientRect().height * 2
  }

  function cleanupStyles() {
    latestEntries.forEach(entry => Object.values(animationClasses).forEach(item => entry.target.classList.remove(item)))
  }

  function enableAnimation(element: HTMLElement) {
    if (previousPosition === tilesContainerElement.scrollTop) {
      return
    }

    const animationClass =
      previousPosition < tilesContainerElement.scrollTop ? animationClasses.up : animationClasses.down

    Object.values(animationClasses).forEach(item => element.classList.remove(item))

    if (getRenderMode(getSliderElement()) !== "mobile" || element.classList.contains(partiallyVisibleClass)) {
      element.classList.add(animationClass)
    }
  }

  function configResizeObserverTargets() {
    resizeObserver.observe(tilesContainerElement)
  }

  function configTileIntersectionTargets() {
    getTileElements().forEach(tile => tilesIntersectionObserver.observe(tile))
  }

  function disconnect() {
    tilesIntersectionObserver.disconnect()
    resizeObserver.disconnect()
  }

  return { configResizeObserverTargets, configTileIntersectionTargets, getNextTilePosition, cleanupStyles, disconnect }
}



================================================
File: slider/tile.hbs
================================================
{{#tile class="ugc-tile-wrapper" }}
<div class="image-section">
    <div class="center-section">
        {{#ifequals media "video"}}
            <div class="icon-play"></div>
        {{/ifequals}}
    </div>
    {{#if options.tile_options.show_shopspots}}
    <shopspot-icon tile-id="{{id}}"></shopspot-icon>
    {{/if}}
    {{#ifAutoPlayVideo media options.tile_options.auto_play_video }}
      {{playVideo this "100%" "100%"}}
    {{else}}
      {{#lazy image_thumbnail_url "120"}}{{/lazy}}
    {{/ifAutoPlayVideo}}
</div>
<div class="details-section">
    <div class="tile-message-wrapper">
        <tile-content tileId="{{id}}" mode="dark" context="slider-inline" render-timephrase="false"
            render-avatar-image="false" trim-description="true"></tile-content>
        <div class="tile">
            <tile-tags tile-id="{{id}}" mode="swiper" context="slider-inline" navigation-arrows="true"
                prev-icon="icon-prev-white" next-icon="icon-next-white"></tile-tags>
        </div>
        <div class="footer">
            <time-phrase source-created-at="{{source_created_at}}"></time-phrase>
            <share-menu tile-id="{{id}}"></ShareMenu>
        </div>
    </div>
</div>
<div class="icon-section">
    {{#each attrs}}
    {{#ifequals this "instagram.reel"}}
    <div class="content-icon icon-reel"></div>
    {{/ifequals}}
    {{#ifequals this "youtube.short"}}
    <div class="content-icon icon-youtube-short"></div>
    {{/ifequals}}
    {{/each}}
    <div class="network-icon icon-{{source}}"></div>
    {{#ifHasProductTags this}}
    <div class="shopping-icon icon-products"></div>
    {{/ifHasProductTags}}
</div>
{{/tile}}



================================================
File: slider/utils.ts
================================================
import { Features, getTileSizeByWidget, Sdk } from "@stackla/widget-utils"

declare const sdk: Sdk

/**
 * gets the configured tile size
 * @param settings the tile size configuration of the widget
 * @returns the tile size value without CSS unit
 */
export function getTileSizeUnitless(settings: Features["tileSizeSettings"]) {
  const tileSizeConfig = getTileSizeByWidget(settings)
  return Number(tileSizeConfig["--tile-size-unitless"])
}

/**
 * Fetch the inline tile grid gap from configuration
 * @returns the gap value for slider inline tile grid
 */
export function inlineTileGap() {
  const { margin } = sdk.getStyleConfig()
  const value = Number(margin)
  return isNaN(value) ? 10 : value
}

/**
 * Fetch the inline tile grid gap from configuration
 * @returns the gap value for slider inline tile grid
 */
export function inlineTileSize() {
  const { inline_tile_size } = sdk.getStyleConfig()
  return inline_tile_size
}

export function getTopElementHeight(containerElement: HTMLElement, defaultValue: number) {
  const elements = Array.from(containerElement.querySelectorAll<HTMLElement>(".ugc-tile"))
  const topElement = elements.find(element => {
    const top = element.getBoundingClientRect().top
    return top > 0 && top < 50
  })
  return topElement?.getBoundingClientRect().height || defaultValue
}

export function getRenderMode(element: HTMLElement) {
  return getComputedStyle(element).getPropertyValue("--render-mode")
}

export function getSliderElement() {
  return sdk.querySelector(".slider-inline")
}

export function getTileContainerElement() {
  return sdk.querySelector(".slider-inline .ugc-tiles")
}

export function getTileElements() {
  return sdk.querySelectorAll(".slider-inline .ugc-tiles > .ugc-tile")
}

export function getWidgetDimension() {
  const ugcComponentElement = sdk.getElement()

  if (!ugcComponentElement) {
    console.warn("Element not found in getWidgetDimension")
    return { containerWidth: 0, containerHeight: 0 }
  }

  return { containerWidth: ugcComponentElement.clientWidth, containerHeight: ugcComponentElement.clientHeight }
}

export function calculateContainerWidth(settings: Features["tileSizeSettings"]) {
  const tileGap = inlineTileGap()
  const renderedTileSize = getTileSizeUnitless(settings) * 2 + tileGap * 2
  const availableWidth = (getWidgetDimension().containerWidth * 95) / 100
  const widthAdjusted = availableWidth - (availableWidth % renderedTileSize)
  const possibleColumns = Math.round(availableWidth / renderedTileSize)
  const veriticalColumnsAdjustment = tileGap * Math.round(possibleColumns / 3)

  // adjusting the grid gap of 10 for the last grid element in the row
  return `${widthAdjusted + tileGap - veriticalColumnsAdjustment}px`
}



================================================
File: slider/widget.scss
================================================
@use "styles";
@use "responsive";

.hidden {
  display: none;
}

@keyframes slide-up {
  0% {
    transform: translateY(100%);
  }

  80% {
    transform: translateY(-5%);
  }

  100% {
    transform: translateY(0);
  }
}

@keyframes slide-down {
  0% {
    transform: translateY(-100%);
  }

  80% {
    transform: translateY(5%);
  }

  100% {
    transform: translateY(0);
  }
}

@media (prefers-reduced-motion: no-preference) {
  .tile-animate-up {
    animation: slide-up 600ms linear forwards;
  }

  .tile-animate-down {
    animation: slide-down 600ms linear forwards;
  }
}

// Slider patterns
.pattern-horizontal {
   grid-template-areas: "image details";
   grid-column: span 2;
   grid-row: span 1;
  grid-template-columns: subgrid;
}

.pattern-horizontal-reversed {
  grid-template-areas: "details image";
  grid-column: span 2;
  grid-row: span 1;
  grid-template-columns: subgrid;
}

.pattern-vertical {
  grid-template-areas: "image" "details";
  grid-column: auto;
  grid-row: span 2;
}

.pattern-vertical-reversed {
  grid-template-areas: "details" "image";
  grid-column: auto;
  grid-row: span 2;
}

#nosto-ugc-container {
  background-color: var(--widget-background);

  .slider-inline {
    --tile-timephrase-display: flex;

    display: flex;
    place-items: center;

    &.track {
      --render-mode: desktop;

      .partially-visible {
        opacity: 0.3;
        filter: blur(2px);
      }

      display: flex;
      width: 100%;
      place-items: center;
      flex-direction: column;

      .container {
        max-width: 2000px;
        display: flex;
        width: 100vw;
        flex-direction: column;
        max-height: 100vh;

        .ugc-tiles {
          display: grid;
          gap: var(--inline-tile-margin);
          width: 100%;
          height: 100%;
          overflow: hidden;
          grid-auto-columns: var(--tile-size);
          grid-template-columns: repeat(auto-fit, minmax(var(--tile-size), 1fr));
          grid-auto-flow: row;
          opacity: 0;
          visibility: hidden;

          &[variation="small"] {
            --text-caption-paragraph-font-size: 12px;
            --text-tile-user-name-font-size: 12px;
          }

          &[variation="medium"],
          &[variation="large"] {
            --text-caption-paragraph-font-size: 14px;
          }

          .ugc-tile,
          .ugc-tile-wrapper {
            align-items: center;
            background-color: var(--inline-tile-background, #000);
            color: #fff;
            font-size: 1.5em;
            cursor: pointer;
          }

          .ugc-tile {
            display: grid;
            box-sizing: border-box;
            transition: opacity 300ms ease-in;
            border-radius: var(--inline-tile-border-radius);

            .image-section {
              display: flex;
              width: 100%;
              position: relative;
              grid-area: image;
              height: 100%;
              border-radius: var(--inline-tile-border-radius);
              overflow: hidden;

              img {
                aspect-ratio: 1 / 1;
                width: 100%;
                object-fit: cover;
                object-position: var(--image-position);
                border-radius: var(--inline-tile-border-radius) 0 0 var(--inline-tile-border-radius);
              }

              .center-section {
                position: absolute;
                display: flex;
                z-index: 1;
                justify-content: center;
                width: 100%;
                align-items: center;
                height: 100%;
              }
            }

            .details-section {
              display: flex;
              flex-direction: column;
              place-items: flex-start;
              place-content: flex-start;
              aspect-ratio: 1 / 1;
              width: 100%;
              grid-area: details;

              .tile {
                display: flex;
                width: 100%;
                overflow: hidden;

                .tile-tags {
                  width: 100%;
                  margin: 0;

                  .tile-tag {
                    --tile-tag-background: #D6D4D5;
                  }
                }
              }

              .tile-message-wrapper {
                display: grid;
                grid-template-rows: calc(100% - 60px) 20px 1fr;
                grid-auto-columns: 1fr;
                height: calc(100% - 10px);
                gap: 10px;
                place-content: flex-start;
                width: calc(100% - 15px);
                grid-template-columns: 100%;
                place-self: center;
                margin-top: 5px;

                tile-content {
                  padding-top: 5px;

                  .description p {
                    margin: 0;
                  }
                }

                .footer {
                  display: flex;
                  justify-content: space-between;
                  align-items: center;
                }
              }
            }

            .icon-section {
              display: grid;
              grid-column: image-start / image-end;
              grid-row: image-start / image-end;
              z-index: 10;
              align-self: flex-start;
              height: 100%;

              > .network-icon {
                background-color: #000;
              }
            }
          }

          .ugc-tile.grid-column-indent {
            position: relative;
            top: calc(var(--tile-size) / 2);
          }
        }

        &:has(.slider-loading.loading.hidden) {
          .ugc-tiles {
            opacity: 1;
            visibility: visible;
          }
        }

        .ugc-tile:nth-child(even) .ugc-tile-wrapper {
          flex-direction: row-reverse;
        }

        // Styles for Scroll Buttons
        .tiles-scroll-button {
          width: 100%;
          display: flex;
          place-items: center;
          flex-direction: column;
          cursor: pointer;
          z-index: 99;

          &#scroll-up {
            top: 0;
          }

          &#scroll-down {
            bottom: 0;
          }

          &#scroll-up,
          &#scroll-down {
            margin: 10px 0;

            .widget-icon {
              transform: rotate(90deg);
            }

            &.disabled {
              pointer-events: none;
            }
          }
        }

        #load-more {
          background: 0 0;
          margin: auto;
          padding: 12px 0;
          text-transform: uppercase;
          color: #525252;
          font-size: 14px;
          font-weight: 700;
          letter-spacing: 0;
          line-height: 24px;
          text-align: center;
          display: block;
          cursor: pointer;
          width: 100%;
          border: none;
        }

        .close {
          width: 24px;
          height: 24px;
          background-size: contain;
          background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' height='24' viewBox='0 -960 960 960' width='24'%3E%3Cpath d='m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z'/%3E%3C/svg%3E");
        }
      }
    }

    @include responsive.responsiveness-template;
  }
}



================================================
File: slider/widget.tsx
================================================
import { loadSlider } from "./load-slider"
import { loadWidget } from "@stackla/widget-utils"
import { initObservers } from "./observers"

// dimensions from Figma design
const tileSizeSettings = {
  small: "148.34px",
  medium: "225px",
  large: "435px"
}

let sliderCallbacks: ReturnType<typeof loadSlider>

const observers = initObservers({
  settings: tileSizeSettings,
  resizeCb: () => {
    observers.configTileIntersectionTargets()
  }
})

observers.configTileIntersectionTargets()

loadWidget({
  features: {
    handleLoadMore: false,
    addNewTilesAutomatically: false,
    tileSizeSettings
  },
  callbacks: {
    onLoad: [
      () =>
        void setTimeout(() => {
          observers.configResizeObserverTargets()
          sliderCallbacks = loadSlider(tileSizeSettings, observers)
        }, 1000)
    ],
    onResize: [
      () => {
        sliderCallbacks.resizeHandler()
      }
    ],
    onTilesUpdated: [() => sliderCallbacks?.tilesUpdatedEventHandler()],
    onTileBgImageError: [() => sliderCallbacks?.tilesUpdatedEventHandler()]
  }
})



================================================
File: slider/components/responsive-patterns.ts
================================================
const PATTERN_HORIZONTAL = "pattern-horizontal"
const PATTERN_VERTICAL = "pattern-vertical"
const PATTERN_VERTICAL_REVERSED = "pattern-vertical-reversed"
const PATTERN_HORIZONTAL_REVERSED = "pattern-horizontal-reversed"

const DEFAULT_PATTERN = [
  PATTERN_HORIZONTAL,
  PATTERN_VERTICAL,
  PATTERN_VERTICAL_REVERSED,
  PATTERN_HORIZONTAL,
  PATTERN_VERTICAL,
  PATTERN_VERTICAL_REVERSED,
  PATTERN_HORIZONTAL_REVERSED,
  PATTERN_HORIZONTAL_REVERSED,
  PATTERN_VERTICAL,
  PATTERN_VERTICAL_REVERSED,
  PATTERN_HORIZONTAL,
  PATTERN_VERTICAL,
  PATTERN_VERTICAL_REVERSED
]

function getDeviceType() {
  const innerWidth = window.innerWidth
  if (innerWidth < 544) {
    return "mobile"
  } else if (innerWidth >= 544 && innerWidth < 700) {
    return "small-tablet"
  } else if (innerWidth >= 700 && innerWidth < 1024) {
    return "tablet"
  } else if (innerWidth >= 1024 && innerWidth < 1080) {
    return "x-small-desktop"
  } else if (innerWidth >= 1080 && innerWidth < 1400) {
    return "small-desktop"
  } else if (innerWidth >= 1400 && innerWidth <= 1870) {
    return "desktop"
  } else if (innerWidth > 1870) {
    return "x-large-desktop"
  }

  return "unknown"
}

function getMediumDesktopIndents() {
  return [1, 3, 6, 8]
}

function getDesktopIndents() {
  return [1, 2, 8, 11]
}

function getExtraLargeDesktopIndents() {
  return [1, 2, 4, 5, 10, 13, 14, 15, 17, 18, 20, 21, 26, 29, 30, 31]
}

function getSmallDesktopIndents() {
  return [1, 2, 6, 7]
}

function getExtraSmallDesktopIndents() {
  return [1, 3, 5]
}

function getTabletIndents() {
  return [1]
}

function getExtraLargeDesktopPattern() {
  return [
    ...DEFAULT_PATTERN,
    PATTERN_HORIZONTAL,
    PATTERN_HORIZONTAL_REVERSED,
    PATTERN_HORIZONTAL_REVERSED,
    PATTERN_HORIZONTAL,
    PATTERN_VERTICAL,
    PATTERN_VERTICAL_REVERSED,
    PATTERN_HORIZONTAL,
    PATTERN_VERTICAL,
    PATTERN_VERTICAL_REVERSED,
    PATTERN_HORIZONTAL_REVERSED,
    PATTERN_HORIZONTAL_REVERSED,
    PATTERN_VERTICAL,
    PATTERN_VERTICAL_REVERSED,
    PATTERN_HORIZONTAL,
    PATTERN_VERTICAL,
    PATTERN_VERTICAL_REVERSED,
    PATTERN_HORIZONTAL,
    PATTERN_HORIZONTAL_REVERSED,
    PATTERN_HORIZONTAL_REVERSED
  ]
}

function getDesktopPattern() {
  return [
    PATTERN_HORIZONTAL,
    PATTERN_VERTICAL,
    PATTERN_VERTICAL_REVERSED,
    PATTERN_HORIZONTAL,
    PATTERN_HORIZONTAL_REVERSED,
    PATTERN_HORIZONTAL_REVERSED,
    PATTERN_VERTICAL,
    PATTERN_VERTICAL_REVERSED,
    PATTERN_HORIZONTAL,
    PATTERN_VERTICAL,
    PATTERN_VERTICAL_REVERSED,
    PATTERN_HORIZONTAL_REVERSED
  ]
}

function getSmallDesktopPattern() {
  return [
    PATTERN_HORIZONTAL,
    PATTERN_VERTICAL,
    PATTERN_VERTICAL_REVERSED,
    PATTERN_HORIZONTAL_REVERSED,
    PATTERN_VERTICAL,
    PATTERN_VERTICAL_REVERSED,
    PATTERN_HORIZONTAL,
    PATTERN_HORIZONTAL_REVERSED
  ]
}

function getMediumDesktopPattern() {
  return [
    PATTERN_VERTICAL,
    PATTERN_HORIZONTAL,
    PATTERN_HORIZONTAL_REVERSED,
    PATTERN_HORIZONTAL_REVERSED,
    PATTERN_HORIZONTAL,
    PATTERN_VERTICAL_REVERSED,
    PATTERN_HORIZONTAL,
    PATTERN_HORIZONTAL_REVERSED,
    PATTERN_HORIZONTAL_REVERSED,
    PATTERN_HORIZONTAL
  ]
}

function getExtraSmallDesktopPattern() {
  return [
    PATTERN_VERTICAL,
    PATTERN_HORIZONTAL,
    PATTERN_VERTICAL,
    PATTERN_HORIZONTAL_REVERSED,
    PATTERN_VERTICAL_REVERSED,
    PATTERN_HORIZONTAL
  ]
}

function getMobilePattern() {
  return [PATTERN_HORIZONTAL, PATTERN_VERTICAL, PATTERN_HORIZONTAL_REVERSED]
}

function getTabletPattern() {
  return [PATTERN_HORIZONTAL, PATTERN_VERTICAL, PATTERN_HORIZONTAL_REVERSED]
}

function getSmallTabletPattern() {
  return [
    PATTERN_HORIZONTAL,
    PATTERN_VERTICAL,
    PATTERN_VERTICAL_REVERSED,
    PATTERN_HORIZONTAL_REVERSED,
    PATTERN_VERTICAL_REVERSED,
    PATTERN_VERTICAL
  ]
}

function getPatternByDeviceType() {
  if (getDeviceType() === "mobile") {
    return getMobilePattern()
  }

  if (getDeviceType() === "tablet") {
    return getTabletPattern()
  }

  if (getDeviceType() === "small-tablet") {
    return getSmallTabletPattern()
  }

  if (getDeviceType() === "x-large-desktop") {
    return getExtraLargeDesktopPattern()
  }

  if (getDeviceType() === "small-desktop") {
    return getSmallDesktopPattern()
  }

  if (getDeviceType() === "x-small-desktop") {
    return getExtraSmallDesktopPattern()
  }

  return getDesktopPattern()
}

export {
  getDeviceType,
  getMediumDesktopIndents,
  getDesktopIndents,
  getExtraLargeDesktopIndents,
  getTabletIndents,
  getSmallDesktopIndents,
  getExtraSmallDesktopIndents,
  getDesktopPattern,
  getSmallDesktopPattern,
  getMediumDesktopPattern,
  getExtraSmallDesktopPattern,
  getMobilePattern,
  getTabletPattern,
  getSmallTabletPattern,
  getPatternByDeviceType,
  getExtraLargeDesktopPattern
}



================================================
File: slider/components/tile-content/overrides.scss
================================================
@use "@styles/templates/tile-content" as tc;
@use "@styles/partials/media-queries";

.slider-inline {
  @include tc.tile-content-styles {
    tile-content .tile-content-wrapper {
      .header {
        share-menu {
          display: none;
        }

        .user-info {
          .user-link {
            .user-name {
              text-transform: uppercase;
            }
          }

          .avatar-wrapper {
            display: none;
          }
        }
      }

      @include media-queries.breakpoint(mobile) {
        .header {
          share-menu {
            display: flex;
          }
        }
      }
    }
  }
}

expanded-tiles {
  @include tc.tile-content-styles;
}



================================================
File: starter-project/README.md
================================================
# Starter project activity

This project has been created with the sole purpose of:

1) Allowing you to see what is possible with widgets
2) A space for you to follow the activity provided to learn about how you can customise widgets with ease

Please read documentation here before getting started with this activity, it will make sure that you have correctly setup your environment

https://docs.nosto.com/ugc/widgets-nextgen/getting-started/creating-your-first-widget/creating-a-widget-from-blank-canvas/creating-a-development-space-for-your-team

## What you will learn
1) How to adjust styles for inline tiles & expanded tiles
2) How to adjust templates for inline tiles & expanded tiles.
3) How to hook into emitted events
4) How to apply dynamic css variables

## Getting started with the activity

1) Run npm run start & access http://localhost:4003/preview?widgetType=starter-project
2) You will notice this widget is bouncing without end. Please stop the widget from bouncing.
3) Why is the widget in a circle? Please remove the circle and ensure it is in a grid format, covering all sides of the screen.
4) The border of the circle is based on the mood given to the method. Please update it so that it is using 'nosto' mood with a pink border to represent Nosto.
5) Every time I expand a tile, a dog appears. Please change this to the actual tile image.
6) Every time an event is emitted, an annoying toast appears, please remove this.
7) Fix up the left and right arrows for the products template.

A successful attempt at this activity will be something like the following.
![alt text](image.png)

But most importantly, have fun!


================================================
File: starter-project/_extras.scss
================================================
.toast-container {
    position: fixed;
    top: 1rem;
    right: 1rem;
    z-index: 1000;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.toast {
    background-color: #333;
    color: #fff;
    padding: 1rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgb(0 0 0 / 10%);
    opacity: 0;
    transform: translateY(-20px);
    transition: opacity 0.3s ease, transform 0.3s ease;

    &.show {
        opacity: 1;
        transform: translateY(0);
    }
}

#starter-container {
    border-radius: 50%;
    max-width: 50%;
    aspect-ratio: 1 / 1;
    overflow: hidden;
    margin: 0 auto;
    padding: 0 !important;
    border: var(--my-mood-border);
    animation : bounce 2s infinite;

    @keyframes bounce {
        0%, 100% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(-50px);
        }
    }
}




================================================
File: starter-project/_styles.scss
================================================
@forward "pkg:swiper/swiper-bundle.css";
@use "@styles/partials/fonts";
@forward "@styles/partials/icons";
@forward "@styles/partials/loading";
@forward "@styles/partials/tile-overlay";
@forward "@styles/templates/expanded-tiles";
@forward "@styles/templates/swiper-overrides";
@use "@styles/templates/tags";
@use "@styles/templates/load-more";
@use "@styles/templates/tile-content" as tc;
@use "@styles/templates/shopspot-icon" as sicon;
@use "@styles/templates/time-phrase" as tphrase;
@use "@styles/templates/share-menu" as smenu;
@use "@styles/partials/icon-sections" as is;
@use "@styles/partials/expanded-swiper" as es;

.grid-inline,
expanded-tiles {
  @include is.icon-sections-styles;
  @include sicon.shopspot-icon-styles;
  @include tphrase.time-phrase-styles;
  @include smenu.share-menu-styles;
  @include tags.tile-tags-styles;
  @include tc.tile-content-styles;
  @include es.swiper-expanded-styles;
}



================================================
File: starter-project/config.ts
================================================
import { ExpandedTileOptions, InlineTileOptions, Style } from "@stackla/widget-utils"

export const config: {
  style: Style
  inlineTile: InlineTileOptions
  expandedTile: ExpandedTileOptions
} = {
  style: {
    // The background color of the widget, uses var(--widget-background) in css-variables.ts
    widget_background: "#ffffff",
    // The background color of the tile, uses var(--text-tile-background) in css-variables.ts
    text_tile_background: "#ffffff",
    // The font color of the tiles, uses var(--text-tile-font-color) in css-variables.ts
    text_tile_font_color: "#000000",
    // The font color of the user handle, uses var(--text-tile-user-handle-font-color) in css-variables.ts
    text_tile_user_handle_font_color: "#636062",
    // The font color of the user name, uses var(--text-tile-user-name-font-color) in css-variables.ts
    text_tile_user_name_font_color: "#ffffff",
    // The font size of the tile contents, uses var(--text-tile-font-size) in css-variables.ts
    text_tile_font_size: "10",
    // The font size of the user handle, uses var(--text-tile-user-handle-font-size) in css-variables.ts
    text_tile_user_handle_font_size: "14",
    // The font size of the user name, uses var(--text-tile-user-name-font-size) in css-variables.ts
    text_tile_user_name_font_size: "14",
    // The margin of the widget, and gap between tiles, uses var(--margin) in css-variables.ts
    margin: "10",
    // The mode of what happens when a tile is clicked, options: [EXPAND], [ORIGINAL_URL] or [CUSTOM]
    // [EXPAND] will expand the tile, [ORIGINAL_URL] will open the original URL associated with a social media image, [CUSTOM] will open a custom URL (not implemented)
    click_through_url: "[EXPAND]",
    // The background image of the icon, uses var(--shopspot-icon) in css-variables.ts, defaults to #000
    shopspot_icon: "",
    // Whether the tile should automatically pull new tiles or not
    auto_refresh: "true",
    // Whether the widget should only load x amount of tiles per page
    tiles_per_page: "",
    enable_custom_tiles_per_page: true,
    // Whether the widget should load more tiles on scroll, button or static
    load_more_type: "button",
    // The name of the widget
    name: "Blank Canvas",
    // The link color of the tile, uses var(--text-tile-link-color) in css-variables.ts
    text_tile_link_color: "",
    // The minimum amount of tiles required to show the widget
    minimal_tiles: "6",
    // Tile size: small, medium, large
    inline_tile_size: "medium",
    // The border radius of the inline tile, uses var(--inline-tile-border-radius) in css-variables.ts
    inline_tile_border_radius: "5",
    // The border radius of the expanded tile, uses var(--expanded-tile-border-radius) in css-variables.ts
    expanded_tile_border_radius: "5"
  },
  expandedTile: {
    // Whether to show the caption of the tile
    show_caption: true,
    // Whether to show the timestamp of the tile
    show_timestamp: true,
    // Whether to show the navigation options of the tile
    show_nav: true,
    // Whether to show the sharing options of the tile
    show_sharing: true,
    // Whether to show the shopspots of the tile
    show_shopspots: true,
    // Whether to show the products of the tile
    show_products: true,
    // Whether to show the tags of the tile
    show_tags: true,
    // Whether to show the votes of the tile
    show_votes: true,
    // Whether to show the cross sellers of the tile
    show_cross_sellers: true,
    // Whether to show the add to cart
    show_add_to_cart: true,
    // Whether to show the carousel grouping
    show_carousel_grouping: true
  },
  inlineTile: {
    // Whether to show the navigation options of the tile
    show_nav: true,
    // Whether to show the sharing options of the tile
    show_sharing: true,
    // Whether to show the shopspots
    show_shopspots: true,
    // Whether to show the tags of the tile
    show_tags: true,
    // Whether to show the timestamp of the tile
    show_timestamp: true,
    // Whether to show the caption of the tile
    show_caption: true,
    // Whether to show the products of the tile
    show_products: true,
    // Whether to show the add to cart functionality
    show_add_to_cart: true,
    // Whether to auto play the video
    auto_play_video: false,
    // Whether to show the inline tiles
    show_inline_tiles: true,
    // Whether to show the carousel
    show_carousel: false
  }
}



================================================
File: starter-project/expanded-tile.template.tsx
================================================
import { ISdk } from "@stackla/widget-utils"
import { createElement } from "@stackla/widget-utils/jsx"
import { ExpandedTile } from "./tile.template"

declare const sdk: ISdk

export function ExpandedTiles() {
  const tiles = sdk.getTiles()
  const { show_nav } = sdk.getExpandedTileConfig()
  const navigationArrowsEnabled = show_nav

  return (
    <div class="expanded-tile-wrapper">
      <a class="exit" href="#">
        <span class="widget-icon close-white"></span>
      </a>
      <BackArrowIcon />
      <div class="swiper swiper-expanded">
        <div class="swiper-wrapper ugc-tiles">
          {tiles.map(tile => (
            <div
              class="ugc-tile swiper-slide"
              data-id={tile.id}
              data-yt-id={tile.youtube_id || ""}
              data-tiktok-id={tile.tiktok_id || ""}>
              <ExpandedTile tile={tile} />
            </div>
          ))}
        </div>
      </div>
      <div
        class="swiper-expanded-button-prev swiper-button-prev btn-lg"
        style={{ display: navigationArrowsEnabled ? "flex" : "none" }}>
        <span class="chevron-left" alt="Previous arrow" />
      </div>
      <div
        class="swiper-expanded-button-next swiper-button-next btn-lg"
        style={{ display: navigationArrowsEnabled ? "flex" : "none" }}>
        <span class="chevron-right" alt="Next arrow" />
      </div>
    </div>
  )
}

function BackArrowIcon() {
  return (
    <a class="back" href="#">
      <span class="widget-icon back-arrow"></span>
    </a>
  )
}



================================================
File: starter-project/layout.hbs
================================================
<div class="toast-container" id="toast-container"></div>
<div id="starter-container">
    <div class="ugc-tiles grid grid-inline">
        {{#tiles}}
        {{>tpl-tile}}
        {{/tiles}}
    </div>
    <load-more />
</div>



================================================
File: starter-project/products.template.tsx
================================================
import { createElement, createFragment } from "@stackla/widget-utils/jsx"
import { IProductsComponent, Sdk, TagExtended, Tile } from "@stackla/widget-utils/types"

export function ProductHeader({ product }: { product: TagExtended }) {
  if (!product) return <></>

  const { id, tag, custom_url, target, price, currency } = product

  const titleContent = tag && (
    <a href={custom_url} target={target} class="stacklapopup-products-item-title">
      {tag}
    </a>
  )

  const priceContent = price && (
    <div class="stacklapopup-products-item-price">{currency === "EUR" ? `${price}` : `${currency ?? ""}${price}`}</div>
  )

  return (
    <div class="stacklapopup-products-header">
      <div class="stacklapopup-products-item-header stacklapopup-products-item-active" data-tag-id={id}>
        {titleContent}
        {priceContent}
      </div>
    </div>
  )
}

export function ProductCTA({ sdk, product, tile }: { sdk: Sdk; product: TagExtended; tile: Tile }) {
  const { custom_url, target, availability, cta_text = "Buy Now", currency, id } = product
  const addToCart = sdk.getLoadedComponents().includes("add-to-cart")
  const parentNodeId = sdk.getNodeId()
  if (addToCart) {
    return (
      <>
        <a
          href={custom_url}
          target={target}
          class="stacklapopup-products-item-button-wrap"
          style={{
            display: "none"
          }}>
          <span className={`stacklapopup-products-item-button${availability ? "" : " disabled"}`}>{cta_text}</span>
        </a>
        <add-to-cart
          tile-id={tile.id}
          productId={id}
          id={`stacklapopup-add-to-cart-${id}-${tile.id}`}
          url={custom_url}
          target={target}
          availability={availability}
          cta={cta_text}
          currency={currency}
          parent={parentNodeId}></add-to-cart>
      </>
    )
  }

  return (
    <a href={custom_url} target={target} class="stacklapopup-products-item-button-wrap">
      <span className={`stacklapopup-products-item-button${availability ? "" : " disabled"}`}>{cta_text}</span>
    </a>
  )
}

export function ProductDetails({ sdk, product, tile }: { sdk: Sdk; product: TagExtended; tile: Tile }) {
  const selectedProduct = sdk.getSelectedProduct()
  const selectedProductId = selectedProduct ? selectedProduct.id : null
  const { custom_url, description = "Buy Now", id } = product

  const descriptionContent = description ? <p class="stacklapopup-products-item-description">{description}</p> : <></>

  const itemActive = id == selectedProductId ? "stacklapopup-products-item-active" : ""

  return (
    <div className={`stacklapopup-products-item-content ${itemActive}`} data-tag-id={id} data-custom-url={custom_url}>
      <div className="stacklapopup-products-item-description-wrapper">{descriptionContent}</div>
      <ProductCTA tile={tile} sdk={sdk} product={product}></ProductCTA>
    </div>
  )
}

export function ProductWrapper({
  products,
  selectedProductId
}: {
  products: TagExtended[]
  selectedProductId: string
}) {
  return (
    <>
      {products.map(({ id, image_small_url, is_cross_seller }) => (
        <div className="swiper-slide stacklapopup-product-wrapper">
          {is_cross_seller && (
            <div className="stacklapopup-products-item-image-recommendation-label">
              <p>
                <span class="icon-like"></span> great with
              </p>
            </div>
          )}
          <div
            className={`stacklapopup-products-item ${is_cross_seller ? "cross-seller" : ""} ${id == selectedProductId ? "stacklapopup-products-item-active" : ""}`}
            data-tag-id={id}>
            <img
              loading="lazy"
              class="stacklapopup-products-item-image"
              src={image_small_url}
              onerror="this.src='https://placehold.co/160x200'"
            />
          </div>
        </div>
      ))}
    </>
  )
}

export function ProductImages({
  products,
  selectedProduct
}: {
  products: TagExtended[]
  selectedProduct: TagExtended
}) {
  return (
    <>
      {products.length > 3 ? <div class="recommendations-text">see recommendations</div> : <></>}
      <div class={`stacklapopup-product-images-wrapper ${products.length <= 3 ? "arrows-hidden" : ""}`}>
        <div
          className={`swiper swiper-expanded-product-recs stacklapopup-products ${products.length <= 3 ? "arrows-hidden" : ""}`}>
          <div class="swiper-wrapper">
            {selectedProduct && (
              <ProductWrapper products={products} selectedProductId={selectedProduct.id}></ProductWrapper>
            )}
          </div>
        </div>
        <div class="swiper-exp-product-recs-button-prev swiper-button-prev">
          <span class="swiper-nav-icon icon-prev color-blue" />
        </div>
        <div class="swiper-exp-product-recs-button-next swiper-button-next">
          <span class="swiper-nav-icon icon-next color-blue" />
        </div>
      </div>
    </>
  )
}

export default function ProductsTemplate(sdk: Sdk, component?: IProductsComponent) {
  const tileId = component && component.getTileId()

  if (!tileId) {
    console.warn("No tile id found in ProductsTemplate")
    return <></>
  }

  const tile = sdk.getTileById(tileId)
  const selectedProductState = sdk.getSelectedProduct()

  if (!tile) {
    throw new Error("No tile found")
  }

  const products: TagExtended[] = (tile.tags_extended || []).filter(({ type }) => type === "product")

  if (!products.length) {
    return <></>
  }

  const selectedProductById = selectedProductState
    ? products.find(({ id }) => id == selectedProductState.id.toString())
    : null

  const selectedProduct: TagExtended = selectedProductById || products[0]
  const mappedProducts = products.map(product => (
    <ProductDetails tile={tile} sdk={sdk} product={product}></ProductDetails>
  ))

  return (
    <>
      <ProductHeader product={selectedProduct}></ProductHeader>
      <ProductImages products={products} selectedProduct={selectedProduct}></ProductImages>
      {mappedProducts}
    </>
  )
}



================================================
File: starter-project/starter-project.lib.ts
================================================
import { ISdk } from "packages/widget-utils/dist/esm"

declare const sdk: ISdk

export function getMyMoodBorder(mood: string) {
  switch (mood) {
    case "happy":
      return "3px solid green"
    case "sad":
      return "3px solid red"
    case "angry":
      return "3px solid black"
    default:
      return "blue"
  }
}

export function createToast(message: string) {
  const toastContainer = sdk.querySelector("#toast-container")
  const toast = document.createElement("div")
  toast.className = "toast"
  toast.textContent = message

  toastContainer.appendChild(toast)

  // Show the toast
  requestAnimationFrame(() => {
    toast.classList.add("show")
  })

  // Remove the toast after 3 seconds
  setTimeout(() => {
    toast.classList.remove("show")
    setTimeout(() => toast.remove(), 300)
  }, 3000)
}



================================================
File: starter-project/tile.hbs
================================================
{{#ifequals media "image"}}
  {{#tile class="grid-item"}}
  <div class="tile" data-background-image="{{image_thumbnail_url}}">
    <div class="icon-section">
      <div class="top-section">
        {{#each attrs}}
        {{#ifequals this "instagram.reel"}}
        <div class="content-icon icon-reel"></div>
        {{/ifequals}}
        {{/each}}
        {{#ifHasProductTags this}}
        <div class="shopping-icon icon-products"></div>
        {{/ifHasProductTags}}
      </div>
      <div class="center-section">
        {{#ifequals media "video"}}
        <div class="icon-play"></div>
        {{/ifequals}}
      </div>
      <div class="bottom-section">
        <tile-tags tile-id="{{id}}" variant="dark" mode="swiper" context="grid-inline"></tile-tags>
        <div class="network-icon icon-{{source}}"></div>
      </div>

      <shopspot-icon tile-id={{id}} />
    </div>
  </div>
  {{/tile}}
{{/ifequals}}


================================================
File: starter-project/tile.template.tsx
================================================
import { createElement, createFragment, ISdk, Tile } from "@stackla/widget-utils"

import {
  VideoContainer,
  VideoErrorFallbackTemplate,
  ExpandedTileProps,
  ShopspotProps
} from "@stackla/widget-utils/components"

declare const sdk: ISdk

export function ExpandedTile({ tile }: ExpandedTileProps) {
  const { show_shopspots, show_products, show_tags, show_sharing, show_caption, show_timestamp } =
    sdk.getExpandedTileConfig()

  const shopspotEnabled = sdk.isComponentLoaded("shopspots") && show_shopspots && !!tile.hotspots?.length
  const productsEnabled = sdk.isComponentLoaded("products") && show_products && !!tile.tags_extended?.length
  const tagsEnabled = show_tags
  const sharingToolsEnabled = show_sharing

  const parent = sdk.getNodeId()

  return (
    <>
      <div class="panel">
        <div class="panel-left">
          <IconSection tile={tile} productsEnabled={productsEnabled} />
          <div class="image-wrapper">
            <div class="image-wrapper-inner">
              {tile.media === "video" ? (
                <>
                  <VideoContainer shopspotEnabled={shopspotEnabled} tile={tile} parent={parent} />
                  <VideoErrorFallbackTemplate tile={tile} />
                </>
              ) : tile.media === "image" ? (
                <ImageTemplate tile={tile} image={tile.image} shopspotEnabled={shopspotEnabled} parent={parent} />
              ) : tile.media === "text" ? (
                <span class="content-text">{tile.message}</span>
              ) : tile.media === "html" ? (
                <span class="content-html">{tile.html}</span>
              ) : (
                <></>
              )}
            </div>
          </div>
        </div>
        <div class="panel-right">
          <div class="panel-right-wrapper">
            <div class="content-wrapper">
              <div class="content-inner-wrapper">
                <tile-content
                  tileId={tile.id}
                  render-share-menu={sharingToolsEnabled}
                  render-caption={show_caption}
                  render-timephrase={show_timestamp}
                />
                {tagsEnabled && (
                  <tile-tags tile-id={tile.id} mode="swiper" context="expanded" navigation-arrows="true" />
                )}
                {productsEnabled && (
                  <>
                    <ugc-products parent={parent} tile-id={tile.id} />
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  )
}

export function IconSection({ tile, productsEnabled }: { tile: Tile; productsEnabled: boolean }) {
  const topSectionIconContent = []
  const bottomSectionIconContent = []

  if (tile.attrs?.includes("instagram.reel")) {
    topSectionIconContent.push(<div class="content-icon icon-reel"></div>)
  } else if (tile.attrs?.includes("youtube.short")) {
    topSectionIconContent.push(<div class="content-icon icon-youtube-short"></div>)
  }
  if (productsEnabled) {
    topSectionIconContent.push(<div class="shopping-icon icon-products"></div>)
  }

  bottomSectionIconContent.push(<div class={`network-icon icon-${tile.source}`}></div>)

  return (
    <div class="icon-section">
      <div class="top-section">{...topSectionIconContent}</div>
      <div class="bottom-section">{...bottomSectionIconContent}</div>
    </div>
  )
}

export function ShopSpotTemplate({ shopspotEnabled, parent, tileId }: ShopspotProps) {
  return shopspotEnabled ? (
    <>
      <shopspot-icon parent={parent} mode="expanded" tile-id={tileId} />
    </>
  ) : (
    <></>
  )
}

export function ImageTemplate({
  tile,
  image,
  shopspotEnabled = false,
  parent
}: {
  tile: Tile
  image: string
  shopspotEnabled?: boolean
  parent?: string
}) {
  return image ? (
    <>
      <div class="image-filler blurred" style={{ "background-image": `url('${image}')` }}></div>
      <div class="image">
        {shopspotEnabled ? (
          <ShopSpotTemplate shopspotEnabled={shopspotEnabled} parent={parent} tileId={tile.id} />
        ) : (
          <></>
        )}
        <img class="image-element" src={"https://placedog.net/500"} loading="lazy" alt={tile.description || "Image"} />
      </div>
    </>
  ) : (
    <></>
  )
}



================================================
File: starter-project/widget.scss
================================================
@use "styles" as gridStyles;
@use "@styles/partials/media-queries";
@use "@styles/partials/inline-dimens" as dimens;
@use "extras";

:host {
  transition: ease all 0.5s;
}

.color-blue {
  background-color: blue;
  padding: 10px;
  border-radius: 50%;  
}

.grid {
  display: grid;
  justify-content: center;
  gap: var(--margin);
  grid-template-columns: repeat(auto-fit, minmax(var(--tile-size), 1fr));
  grid-auto-flow: row;
  margin-bottom: 20px;

  .ugc-tile {
    color: white;
    text-align: center;
    border-radius: var(--inline-tile-border-radius, dimens.$inline-tile-border-radius);
    position: relative;
    background-size: cover;
    background-position: top;
    background-repeat: no-repeat;
    height: 100%;
    box-sizing: border-box;
    object-fit: cover;
    object-position: var(--image-position);
    overflow: hidden;
    width: 100%;
    aspect-ratio: 1 / 1;
  }

  @include media-queries.breakpoint(mobile) {
    grid-template-columns: repeat(auto-fit, minmax(min-content, 100%));

    .ugc-tile {
      height: auto;
    }

    .tile {
      aspect-ratio: 1 / 1;
    }
  }
}

#nosto-ugc-container {
  background-color: var(--widget-background);
  padding: var(--margin);

  .tile {
    background-size: cover;
    background-position: top;
    height: 100%;
    width: 100%;
    position: relative;
  }
}



================================================
File: starter-project/widget.tsx
================================================
import { loadWidget } from "@stackla/widget-utils"
import { createToast, getMyMoodBorder } from "./starter-project.lib"
import { ExpandedTiles } from "./expanded-tile.template"
import ProductsTemplate from "./products.template"
import { config } from "./config"

loadWidget({
  config: {
    ...config
  },
  features: {
    tileSizeSettings: {
      small: "173px",
      medium: "265.5px",
      large: "400px"
    },
    cssVariables: {
      "--my-mood-border": getMyMoodBorder("happy")
    }
  },
  callbacks: {
    onLoad: [() => createToast("Tiles loaded!")],
    onTilesUpdated: [() => createToast("Tiles updated!")],
    onResize: [() => createToast("Resized!")],
    onLoadMore: [() => createToast("More tiles loaded!")],
    onTileExpand: [() => createToast("Tile expanded!")],
    onTileClose: [() => createToast("Tile closed!")]
  },
  templates: {
    "expanded-tiles": {
      template: ExpandedTiles
    },
    "ugc-products": {
      template: ProductsTemplate
    }
  }
})



================================================
File: storyline/_dimens.scss
================================================
@forward "@styles/partials/inline-dimens";

// nosto-ugc-container styles
$nosto-container-margin: 20px;



================================================
File: storyline/_icon-sections-override.scss
================================================
@use "@styles/partials/icon-sections" as is;

.story-inline {
  @include is.icon-sections-styles;
}

expanded-tiles {
  @include is.icon-sections-styles {
    .icon-section {
      bottom: 0;
    }

    &:has(tile-content:not(:empty)) {
      .icon-section {
        height: calc(100% - 75px);
      }
    }
  }
}



================================================
File: storyline/_inline-tile.scss
================================================
@use "sass:map";
@use "@styles/partials/media-queries";
@use "dimens";

#nosto-ugc-container {
  .swiper-button-next,
  .swiper-button-prev {
    display: var(--navigation-arrow-display) !important;

    --swiper-navigation-sides-offset: 0px;
  }

  .ugc-tile {
    position: relative;
    width: 100%;
    display: flex;

    .tile {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      height: 100%;
      position: relative;

      .story-overlay {
        display: flex;
        visibility: hidden;
        opacity: 0;
      }

      .icon-section {
        display: flex;
        position: absolute;
        visibility: hidden;
        opacity: 0;
        z-index: 15;

        .top-section {
          top: 0;
          width: initial;
        }

        .bottom-section {
          right: 0;
          bottom: 0;
          width: initial;
        }
      }

      .tile-image-wrapper {
        display: flex;
        width: 100%;
        position: relative;
        place-content: center;
        height: 100%;
        place-items: center;

        img {
          aspect-ratio: 1 / 1;
          object-fit: cover;
          object-position: var(--image-position);
          overflow: hidden;
          border-radius: dimens.$story-border-radius;
          position: relative;
          opacity: 1;
          max-width: var(--tile-size);
          max-height: var(--tile-size);
          user-select: none;
        }
      }
    }
  }
}



================================================
File: storyline/_styles.scss
================================================
@forward "pkg:swiper/swiper-bundle.css";
@use "@styles/partials/fonts";
@forward "@styles/partials/icons";
@forward "@styles/partials/loading";
@forward "inline-tile";
@forward "@styles/partials/tile-overlay";
@forward "@styles/templates/expanded-tiles";
@forward "@styles/templates/swiper-overrides";
@use "@styles/templates/story-line-expanded";
@use "@styles/templates/tile-content" as tc;
@use "@styles/templates/shopspot-icon" as sicon;
@use "@styles/templates/time-phrase" as tphrase;
@use "@styles/templates/share-menu" as smenu;
@use "icon-sections-override";
@use "tile-content-override";
@use "@styles/templates/tags";
@use "@styles/partials/expanded-swiper" as es;
@use "@styles/partials/inline";

.story-inline,
expanded-tiles {
  @include sicon.shopspot-icon-styles;
  @include tphrase.time-phrase-styles;
  @include smenu.share-menu-styles;
  @include tags.tile-tags-styles;
  @include es.swiper-expanded-styles;
}



================================================
File: storyline/_tile-content-override.scss
================================================
@use "@styles/templates/tile-content" as tc;

.story-inline {
  @include tc.tile-content-styles;
}

expanded-tiles {
  @include tc.tile-content-styles {
    .panel-inactive {
      tile-content {
        place-self: flex-end center;
        grid-row: span 2;
        margin-bottom: 20%;

        .tile-content-wrapper .user-info {
          gap: 20px;

          .user-link .user-name {
            color: #4a4a4a;
            font-size: 20px;
          }

          .avatar-wrapper img {
            width: 100px;
            height: 100px;
            opacity: 0.3;
          }
        }
      }
    }
  }
}



================================================
File: storyline/inline-story-swiper.loader.ts
================================================
import { Sdk, SwiperData } from "types"
import {
  initializeSwiper,
  refreshSwiper,
  setSwiperLoadingStatus,
  isSwiperLoading,
  updateSwiperInstance
} from "@stackla/widget-utils/extensions/swiper"
import type { Swiper } from "swiper"
import { enableTileImages, loadAllUnloadedTiles } from "@stackla/widget-utils/libs"
import { EVENT_LOAD_MORE } from "@stackla/widget-utils/events"
import { getSlidesPerView } from "./slides-per-view"

declare const sdk: Sdk

export function initializeSwiperForInlineStoryTiles() {
  const { inline_tile_size } = sdk.getStyleConfig()
  const widgetSelector = sdk.querySelector<HTMLElement>(".story-inline.swiper-inline")

  const prev = widgetSelector!.parentNode!.querySelector<HTMLElement>(".swiper-inline-story-button-prev")
  const next = widgetSelector!.parentNode!.querySelector<HTMLElement>(".swiper-inline-story-button-next")

  if (!widgetSelector) {
    throw new Error("Failed to find widget UI element. Failed to initialise Swiper")
  }

  const spaceBetween = inline_tile_size === "small" ? 5 : inline_tile_size === "medium" ? 20 : 25
  widgetSelector.setAttribute("variation", inline_tile_size)
  widgetSelector.parentElement!.style.setProperty("--spacing", `${spaceBetween}`)

  initializeSwiper({
    id: "inline-story",
    mode: "inline",
    widgetSelector,
    prevButton: "swiper-inline-story-button-prev",
    nextButton: "swiper-inline-story-button-next",
    paramsOverrides: {
      slidesPerView: getSlidesPerView(),
      spaceBetween: 5,
      grabCursor: true,
      slidesOffsetBefore: 0,
      allowTouchMove: true,
      shortSwipes: false,
      longSwipes: false,
      mousewheel: true,
      breakpoints: {
        300: {
          allowTouchMove: true,
          followFinger: true,
          spaceBetween: 10,
          slidesPerView: getSlidesPerView(300)
        },
        400: {
          allowTouchMove: true,
          followFinger: true,
          spaceBetween: 10,
          slidesPerView: getSlidesPerView(400)
        },
        500: {
          allowTouchMove: true,
          followFinger: true,
          spaceBetween: 10,
          slidesPerView: getSlidesPerView(500)
        },
        800: {
          allowTouchMove: true,
          followFinger: true,
          spaceBetween: 10,
          slidesPerView: getSlidesPerView(800)
        },
        993: {
          spaceBetween: 5,
          allowTouchMove: false,
          followFinger: false,
          slidesPerView: getSlidesPerView(993),
          navigation: {
            enabled: !!(prev && next),
            prevEl: prev,
            nextEl: next
          }
        },
        1300: {
          spaceBetween: 5,
          slidesPerView: getSlidesPerView(1300)
        },
        1500: {
          spaceBetween: 5,
          slidesPerView: getSlidesPerView(1500)
        },
        2000: {
          spaceBetween: 5,
          slidesPerView: getSlidesPerView(2000)
        }
      },
      keyboard: {
        enabled: true,
        onlyInViewport: false
      },
      on: {
        beforeInit: (swiper: Swiper) => {
          enableLoadedTiles()
          swiper.slideToLoop(0, 0, false)
        },
        reachEnd: () => {
          sdk.triggerEvent(EVENT_LOAD_MORE)
        },
        afterInit: (swiper: Swiper) => {
          setSwiperLoadingStatus("inline-story", true)
          disablePrevNavigation(swiper)
          void loadTilesAsync(swiper)
        },
        activeIndexChange: (swiper: Swiper) => {
          if (swiper.navigation.prevEl) {
            if (swiper.realIndex === 0 && isSwiperLoading("inline-story")) {
              disablePrevNavigation(swiper)
            } else {
              enablePrevNavigation(swiper)
            }
          }
        }
      }
    }
  })
}

function getRenderMode(hostElement?: HTMLElement) {
  const widgetSelector = hostElement || sdk.querySelector<HTMLElement>(".story-inline.swiper-inline")
  if (widgetSelector) {
    return getComputedStyle(widgetSelector).getPropertyValue("--render-mode")
  }
  return "desktop"
}

export function onTilesUpdated() {
  refreshSwiper("inline-story")
  loadAllUnloadedTiles()
}

export function enableLoadedTiles() {
  sdk
    .querySelectorAll<HTMLElement>(".ugc-tiles > .ugc-tile[style*='display: none']")
    ?.forEach((tileElement: HTMLElement) => (tileElement.style.display = ""))
}

async function loadTilesAsync(swiper: Swiper) {
  const observer = registerObserver(swiper)

  loadAllUnloadedTiles()
  swiper.update()

  observer.disconnect()
  enableNextNavigation(swiper)
  updateLoadingStateInterval(swiper.el)
}

function updateLoadingStateInterval(swiperElem: HTMLElement) {
  const intervalId = setInterval(function () {
    const elements = swiperElem.querySelectorAll<HTMLElement>(".swiper-slide:has(.icon-section.hidden)")
    if (elements.length === 0) {
      clearInterval(intervalId)
      updateSwiperInstance("inline-story", (swiperData: SwiperData) => {
        swiperData.isLoading = false
        if (swiperData.instance) {
          swiperData.instance.off("activeIndexChange")
          swiperData.instance.params.loop = true
          enablePrevNavigation(swiperData.instance)
        }
      })
      refreshSwiper("inline-story")
    }
  }, 200)
}

function enableNextNavigation(swiper: Swiper) {
  if (getRenderMode() === "desktop") {
    swiper.allowSlideNext = true
    swiper.navigation.nextEl.classList.remove("swiper-button-disabled")
  }
}

function enablePrevNavigation(swiper: Swiper) {
  if (getRenderMode() === "desktop") {
    swiper.allowSlidePrev = true
    swiper.navigation.prevEl.classList.remove("swiper-button-disabled")
  }
}

function disablePrevNavigation(swiper: Swiper) {
  if (getRenderMode() === "desktop") {
    swiper.allowSlidePrev = false
    swiper.navigation.prevEl.classList.add("swiper-button-disabled")
  }
}

function registerObserver(swiper: Swiper) {
  const observer = new MutationObserver(() => {
    enableTileImages(swiper.wrapperEl)
  })
  observer.observe(swiper.wrapperEl, {
    childList: true
  })
  return observer
}



================================================
File: storyline/layout.hbs
================================================
<div class="swiper-inline-story-button-prev swiper-button-prev btn-lg">
	<span class="swiper-nav-icon icon-prev-circle" />
</div>
<div class="track swiper story-inline swiper-inline" style="display:none;">
	<div class="swiper-wrapper ugc-tiles">
		{{#tiles}}
		{{>tpl-tile options=../options}}
		{{/tiles}}
	</div>
</div>
<div class="swiper-inline-story-button-next swiper-button-next btn-lg">
	<span class="swiper-nav-icon icon-next-circle" />
</div>



================================================
File: storyline/slides-per-view.ts
================================================
import { Sdk } from "types"
import { getTileWidthBySizeString } from "@stackla/widget-utils"

declare const sdk: Sdk

export function getSlidesPerView(screenWidth: number = window.innerWidth): number {
  const {
    enable_custom_tiles_per_page: isCustomTilesPerPageEnabled,
    tiles_per_page: tilesPerPage,
    inline_tile_size: tileSizeString
  } = sdk.getStyleConfig()

  screenWidth = Math.min(screenWidth, 1130)
  const tileSize = getTileWidthBySizeString(tileSizeString).replace("px", "")
  const tileSizeWithMargin = Number(tileSize)
  const slidesPerView = Math.ceil(screenWidth / tileSizeWithMargin)

  if (isCustomTilesPerPageEnabled && tilesPerPage) {
    return parseInt(tilesPerPage)
  }

  return slidesPerView
}



================================================
File: storyline/tile.hbs
================================================
{{#tile class="swiper-slide" }}
<div class="tile">
  <div class="tile-loading"></div>
  <div class="icon-section hidden">
    <div class="top-section">
      {{#if options.config.tile_options.show_products}}
        {{#ifHasProductTags this}}
        <div class="shopping-icon icon-products-bg {{options.style.inline_tile_size}}"></div>
        {{/ifHasProductTags}}
      {{/if}}
    </div>
    <div class="center-section">
      <div class="network-icon icon-{{source}}"></div>
    </div>
  </div>
  <div class="tile-image-wrapper">
    <div class="story-overlay"></div>
    {{#lazy image_thumbnail_url }}{{/lazy}}
    <div class="swiper-lazy-preloader"></div>
  </div>
</div>
{{/tile}}



================================================
File: storyline/utils.ts
================================================
import { Features, getTileSizeByWidget } from "packages/widget-utils"

/**
 * gets the configured tile size
 * @param settings the tile size configuration of the widget
 * @returns the tile size value without CSS unit
 */
export function getTileSizeUnitless(settings: Features["tileSizeSettings"]) {
  const tileSizeConfig = getTileSizeByWidget(settings)
  return Number(tileSizeConfig["--tile-size-unitless"])
}

/**
 * Calculates the tile render size including swiper spacing and any additional width
 *
 * @param settings the widget size configuration
 * @param hostElment the element hosting the variables
 * @returns
 */
export function getTileWidth(settings: Features["tileSizeSettings"], hostElment?: HTMLElement) {
  const tileSize = getTileSizeUnitless(settings)

  if (!hostElment) {
    return tileSize
  }

  const spacing = hostElment.parentElement ? getVariableValue(hostElment.parentElement, "--spacing") : 0
  const additionalWidth = getVariableValue(hostElment, "--additional-size")

  return tileSize + spacing + additionalWidth
}

/**
 * Gets the value of the supplied css variable and converts it to numeric value
 *
 * @param element element hosting the variable
 * @param name the css variable name
 * @returns the value if present. 0 otherwise
 */
export function getVariableValue(element: HTMLElement, name: string) {
  const content = Number(getComputedStyle(element).getPropertyValue(name))
  return isNaN(content) ? 0 : content
}

/**
 *
 * @param element element hosting the variable
 * @param name the css variable name
 * @returns the content if present. Empty string otherwise
 */
export function getVariableContent(element: HTMLElement, name: string) {
  return getComputedStyle(element).getPropertyValue(name)
}



================================================
File: storyline/widget.scss
================================================
@use "styles" as carouselStyles;
@use "@styles/partials/media-queries";
@use "dimens";

expanded-tiles {
  .swiper-3d {
    perspective: none !important;
  }

  .story-expanded {
      max-width: 500px;
  }
}

#nosto-ugc-container {
  max-width: 1130px;
  transition: ease all 0.5s;
  background-color: var(--widget-background);
  display: flex;
  place-items: center;
  margin: dimens.$nosto-container-margin auto;
  height: calc(var(--tile-size) + 50px);

  .hidden {
    display: none;
  }

  .story-inline.swiper-inline {
    width: 100%;
    height: 100%;
    margin-left: unset;

    .ugc-tile {
      min-width: 110px;
      width: 100%;
      height: 100%;
      transition: all 300ms cubic-bezier(0.55, 0, 1, 0.45) 0s;

      .tile-loading {
        top: unset;
        left: unset;
      }

      time-phrase .tile-timephrase {
        color: #fff;
      }

      .icon-section {
        height: var(--tile-size);
        width: var(--tile-size);
        transition: all 300ms cubic-bezier(0.55, 0, 1, 0.45) 0s;
      }

      &:hover {
        transform: scale(1.1);

        .icon-section {
          opacity: 1;
          visibility: visible;
        }

        .story-overlay {
          opacity: 1;
          visibility: visible;
        }
      }
    }

    &[variation="small"] {
      .ugc-tile {
        &:hover {
          transform: scale(1.2);
        }

        .icon-section {
          height: calc(var(--tile-size) + 15px);
          width: calc(var(--tile-size) + 15px);
        }
      }
    }

    &[variation="medium"] {
      .ugc-tile {
        .icon-section {
          width: calc(var(--tile-size) + 10px);
          height: calc(var(--tile-size) + 10px);
        }
      }
    }
  }

  & > .swiper-inline-story-button-prev,
  & > .swiper-inline-story-button-next {
    position: initial;
    margin: 0;
  }

  @include media-queries.breakpoint(desktop) {
    .story-inline.swiper-inline {
      --render-mode: desktop;
    }
  }

  @include media-queries.breakpoint(tablet) {
    .story-inline.swiper-inline {
      --render-mode: tablet;
    }
  }

  @include media-queries.breakpoint(mobile) {
    .story-inline.swiper-inline {
      --render-mode: mobile;
    }
  }
}



================================================
File: storyline/widget.tsx
================================================
import { Sdk } from "types"

declare const sdk: Sdk

import { loadWidget } from "@stackla/widget-utils"
import { initializeSwiperForInlineStoryTiles, onTilesUpdated } from "./inline-story-swiper.loader"
import { StoryExpandedTiles } from "./templates/base.template"

// dimensions from Figma design
const tileSizeSettings = {
  small: "50px",
  medium: "100px",
  large: "150px"
}

loadWidget({
  extensions: {
    swiper: true
  },
  features: {
    handleLoadMore: false,
    tileSizeSettings,
    cssVariables: {
      "--navigation-arrow-display": sdk.isPaginationEnabled() && !sdk.isScrollWidget() ? "flex" : "none"
    }
  },
  callbacks: {
    onLoad: [initializeSwiperForInlineStoryTiles],
    onTilesUpdated: [onTilesUpdated]
  },
  templates: {
    "expanded-tiles": {
      template: StoryExpandedTiles
    }
  }
})

sdk.querySelector(".track")?.style.removeProperty("display")



================================================
File: storyline/templates/base.template.tsx
================================================
import type { ISdk } from "@stackla/widget-utils"
import { StoryExpandedTile } from "./tile.template"
import { createElement } from "@stackla/widget-utils"

export function StoryExpandedTiles(sdk: ISdk) {
  const tiles = sdk.getTiles()
  const { show_nav } = sdk.getExpandedTileConfig()
  const navigationArrowsEnabled = show_nav

  return (
    <div class="expanded-tile-wrapper" variation="story">
      <StoryControls />
      <div class="swiper swiper-expanded story-expanded">
        <div
          class="swiper-expanded-button-prev swiper-button-prev btn-lg"
          style={{ display: navigationArrowsEnabled ? "flex" : "none" }}>
          <span class="chevron-left" alt="Previous arrow" />
        </div>
        <div
          class="swiper-expanded-button-next swiper-button-next btn-lg"
          style={{ display: navigationArrowsEnabled ? "flex" : "none" }}>
          <span class="chevron-right" alt="Next arrow" />
        </div>
        <div class="swiper-wrapper ugc-tiles">
          {tiles.map(tile => (
            <div
              class="ugc-tile swiper-slide"
              data-id={tile.id}
              data-yt-id={tile.youtube_id || ""}
              data-tiktok-id={tile.tiktok_id || ""}>
              <StoryExpandedTile tile={tile} />
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

function StoryControls() {
  return (
    <div class="story-controls">
      <span class="icon-video-volume volume-ctrl hidden" />
      <span class="icon-video-mute mute-ctrl" />
      <span class="icon-story-video-pause pause-ctrl" />
      <span class="icon-story-video-play play-ctrl hidden" />
      <span class="exit">
        <span class="widget-icon story-close-white"></span>
      </span>
    </div>
  )
}



================================================
File: storyline/templates/tile.template.tsx
================================================
import { ISdk, Tile } from "@stackla/widget-utils/types"
import { createElement, createFragment } from "@stackla/widget-utils"
import {
  ExpandedTileProps,
  ShopspotProps,
  VideoContainer,
  VideoErrorFallbackTemplate
} from "@stackla/widget-utils/components"

declare const sdk: ISdk

export function StoryExpandedTile({ tile }: ExpandedTileProps) {
  const { show_shopspots, show_products, show_sharing, show_timestamp } = sdk.getExpandedTileConfig()

  const shopspotEnabled = sdk.isComponentLoaded("shopspots") && show_shopspots && !!tile.hotspots?.length

  let productsEnabled = false

  if (sdk.isComponentLoaded("products") && show_products && sdk.getProductTagsFromTile(tile)?.length) {
    productsEnabled = true
  }

  const sharingToolsEnabled = show_sharing

  const parent = sdk.getNodeId()

  return (
    <>
      <div class="panel-active">
        <div class="overlay"></div>
        <AutoplayProgress />
        <tile-content
          tileId={tile.id}
          render-share-menu={sharingToolsEnabled}
          render-description="false"
          render-caption="false"
          mode="custom"
          render-timephrase={show_timestamp}
          render-header-timephrase="true"
          render-products-icon={productsEnabled}
        />
        <IconSection tile={tile} />
        <div class="image-wrapper">
          <div class="image-wrapper-inner">
            {tile.media === "video" ? (
              <>
                <VideoContainer shopspotEnabled={shopspotEnabled} tile={tile} parent={parent} />
                <VideoErrorFallbackTemplate tile={tile} />
              </>
            ) : tile.media === "image" ? (
              <ImageTemplate tile={tile} image={tile.image} shopspotEnabled={shopspotEnabled} parent={parent} />
            ) : tile.media === "text" ? (
              <span class="content-text">{tile.message}</span>
            ) : tile.media === "html" ? (
              <span class="content-html">{tile.html}</span>
            ) : (
              <></>
            )}
          </div>
        </div>
      </div>
      <div class="ugc-products-wrap" data-tile-id={tile.id}>
        <ugc-products parent={parent} tile-id={tile.id} down-icon={true}></ugc-products>
      </div>
    </>
  )
}

export function IconSection({ tile }: { tile: Tile }) {
  const topSectionIconContent = []
  const bottomSectionIconContent = []

  if (tile.attrs?.includes("instagram.reel")) {
    topSectionIconContent.push(<div class="content-icon icon-reel"></div>)
  } else if (tile.attrs?.includes("youtube.short")) {
    topSectionIconContent.push(<div class="content-icon icon-youtube-short"></div>)
  }

  bottomSectionIconContent.push(<div class={`network-icon icon-${tile.source}`}></div>)
  bottomSectionIconContent.push(
    <inline-products parent={parent} tile-id={tile.id} mode={"swiper"} context={"story-expanded"} />
  )
  bottomSectionIconContent.push(
    <div class="story-expanded-bottom-section">
      <tile-tags
        tile-id={tile.id}
        variant="dark"
        mode="swiper"
        clickable="false"
        context="storyline-expanded-inline"></tile-tags>
    </div>
  )

  return (
    <div class="icon-section">
      <div class="top-section">{...topSectionIconContent}</div>
      <div class="bottom-section">{...bottomSectionIconContent}</div>
    </div>
  )
}

export function ShopSpotTemplate({ shopspotEnabled, parent, tileId }: ShopspotProps) {
  return shopspotEnabled ? (
    <>
      <shopspot-icon parent={parent} mode="expanded" tile-id={tileId} show-tooltip="false" />
    </>
  ) : (
    <></>
  )
}

export function ImageTemplate({
  tile,
  image,
  shopspotEnabled = false,
  parent
}: {
  tile: Tile
  image: string
  shopspotEnabled?: boolean
  parent?: string
}) {
  return image ? (
    <>
      <div class="image-filler" style={{ "background-image": `url('${image}')` }}></div>
      <div class="image">
        {shopspotEnabled ? (
          <ShopSpotTemplate shopspotEnabled={shopspotEnabled} parent={parent} tileId={tile.id} />
        ) : (
          <></>
        )}
      </div>
    </>
  ) : (
    <></>
  )
}

function AutoplayProgress() {
  return (
    <div class="story-progress-wrapper">
      <div class="story-autoplay-progress">
        <div class="progress-content"></div>
      </div>
    </div>
  )
}



================================================
File: storypage/_direct-uploader.scss
================================================
.direct-uploader-load-more {
  --direct-uploader-wrapper-size: 100%;

  position: absolute;
  inset: 0;
  margin: 0 auto;
  height: var(--direct-uploader-wrapper-size);
  width: var(--direct-uploader-wrapper-size);
  background-color: rgba(31 99 202 / 80%);

  --direct-uploader-container-inset: 0;
  --direct-uploader-container-text-color: white;
  --direct-uploader-container-font-size: 16px;
  --direct-uploader-container-icon-weight: 500;

  div {
    position: absolute;
    inset: var(--direct-uploader-container-inset);
    // stylelint-disable-next-line property-no-unknown
    position-area: center;

    p {
      font-size: var(--direct-uploader-container-font-size);
      font-weight: var(--direct-uploader-container-icon-weight);
      color: var(--direct-uploader-container-text-color);
    }

    .icon-picture {
      left: 0;
      right: 0;
      top: -12px;
      margin: 0 auto;
    }
  }

  .direct-uploader-container {
    position: relative;
    height: var(--direct-uploader-wrapper-size);
    width: var(--direct-uploader-wrapper-size);
  }
}

#direct-uploader-form {
  .overlay {
    position: fixed;
    inset: 0;
    background-color: black;
    z-index: 10;
    opacity: 0.8;
  }

  .form-container {
    --form-background-color: white;
    --form-shadow-opacity: 10%;
    --form-exit-button-inset: -15px;
    --form-insent: 10%;
    --form-padding: 20px;
    --form-max-height: 90vh;
    --form-border-radius: 5px;

    background-color: var(--form-background-color);
    position: fixed;
    inset: var(--form-insent);
    z-index: 10;
    padding: var(--form-padding);
    max-height: var(--form-max-height);
    border-radius: var(--form-border-radius);
    box-shadow: 0 0 10px 0 rgba(0 0 0 / var(--form-shadow-opacity));

    .exit {
        position: absolute;
        right: var(--form-exit-button-inset);
        top: var(--form-exit-button-inset);
    }
  }
}

#submit-more-content-btn {
  grid-column: 1 / -1;

  --button-padding: 8px 16px;
  --button-font-size: 14px;
  --button-outer-gap: 10px;
  --button-alignment: center;
  --button-height: 40px;
  --button-border-radius: 5px;
  --button-text-left-padding: 3px;
  --button-font-weight: 500;
  --button-color: white;
  --button-bg-color: #636062;
  --button-hover-bg-color: #4d4c4b;

  cursor: pointer;
  transition: background-color 0.3s;
  background-color: var(--button-bg-color);
  color: var(--button-color);
  padding: var(--button-padding);
  text-align: var(--button-alignment);
  border-radius: var(--button-border-radius);
  height: var(--button-height);
  display: flex;
  justify-content: var(--button-alignment);
  align-items: var(--button-alignment);
  margin-top: 10px;

  span {
    font-size: var(--button-font-size);
    padding-left: var(--button-text-left-padding);
    font-weight: var(--button-font-weight);
  }

  &:hover {
    background-color: var(--button-hover-bg-color);
  }
}


================================================
File: storypage/_expanded-tile.scss
================================================
expanded-tiles {
  .ugc-tile {
    box-sizing: border-box;
    overflow: hidden;
    margin: 0;
  }

  time-phrase .tile-timephrase {
    color: #fff;
  }
}


================================================
File: storypage/_inline-tile.scss
================================================
@use "styles";
@use "@styles/partials/media-queries";

#nosto-ugc-container {
  background-color: var(--widget-background);
  padding: var(--margin);

  @include media-queries.breakpoint(mobile) {
    margin: 16px;
  }

  .ugc-tiles {
    &.__inline {
      display: grid;
      justify-content: center;
      gap: var(--margin);
      grid-template-columns: repeat(auto-fit, minmax(var(--tile-size), 1fr));
      grid-auto-flow: row;
      margin-bottom: 20px;

      .ugc-tile {
        color: white;
        text-align: center;
        border-radius: var(--inline-tile-border-radius);
        position: relative;
        background-size: cover;
        background-position: top;
        background-repeat: no-repeat;
        height: 100%;
        box-sizing: border-box;
        object-fit: cover;
        object-position: var(--image-position);
        overflow: hidden;
        width: 100%;
        aspect-ratio: 1 / 1;
      }

      @include media-queries.breakpoint(mobile) {
        grid-template-columns: repeat(auto-fit, minmax(min-content, 100%));

        .ugc-tile {
          height: auto;
        }

        .tile {
          aspect-ratio: 1 / 1;
        }
      }

      .direct-uploader-load-more {
        display: none;
      }

      .ugc-tile.last-tile {
        .direct-uploader-load-more {
          display: block;
          z-index: 3;
        }
      }
    }
  }
}



================================================
File: storypage/_styles.scss
================================================
@forward "pkg:swiper/swiper-bundle.css";
@use "@styles/partials/fonts";
@forward "@styles/partials/icons";
@forward "@styles/partials/loading";
@forward "@styles/partials/tile-overlay";
@forward "@styles/templates/expanded-tiles";
@forward "@styles/templates/swiper-overrides";
@use "@styles/templates/tags";
@use "@styles/templates/load-more";
@use "@styles/templates/tile-content" as tc;
@use "@styles/templates/shopspot-icon" as sicon;
@use "@styles/templates/time-phrase" as tphrase;
@use "@styles/templates/share-menu" as smenu;
@use "@styles/partials/icon-sections" as is;
@use "@styles/partials/expanded-swiper" as es;
@use "@styles/partials/inline";

.storypage-inline,
expanded-tiles {
  @include is.icon-sections-styles;
  @include sicon.shopspot-icon-styles;
  @include tphrase.time-phrase-styles;
  @include smenu.share-menu-styles;
  @include tags.tile-tags-styles;
  @include tc.tile-content-styles;
  @include es.swiper-expanded-styles;
}



================================================
File: storypage/direct-uploader.component.tsx
================================================
import { ISdk } from "@stackla/widget-utils"
import { createElement } from "@stackla/widget-utils/jsx"

declare const sdk: ISdk
declare const WIDGET_ENDPOINT: string
declare const DIRECT_UPLOADER_ENDPOINT: string

const createDUIFrame = (guid: string) => {
  const directUploaderSource = `${DIRECT_UPLOADER_ENDPOINT}/widget/show?v=1&plugin_id=${guid}`

  return <iframe src={directUploaderSource} width="100%" height="100%" frameborder="0"></iframe>
}

const defaultTemplate = (
  <a class="exit" href="#">
    <span class="widget-icon close-white"></span>
  </a>
)

class DirectUploaderWidget extends HTMLElement {
  constructor() {
    super()
  }

  async connectedCallback() {
    this.appendChild(defaultTemplate)

    const widgetId = sdk.getWidgetId()
    const settings = sdk.getStyleConfig()
    const { plugin_instance_id } = settings

    let widgetEndpoint = `${WIDGET_ENDPOINT}/widgets/${widgetId}/direct-uploader/${plugin_instance_id}`

    if (!plugin_instance_id || plugin_instance_id === "0") {
      widgetEndpoint = `${WIDGET_ENDPOINT}/widgets/${widgetId}/direct-uploader`
    }

    try {
      const response = await fetch(widgetEndpoint)
      const { guid } = await response.json()
      this.appendChild(createDUIFrame(guid))

      loadDirectUploaderListeners()
    } catch (error) {
      console.error(`Failed to fetch direct uploader widget: ${error}`)
    }
  }
}

try {
  customElements.define("direct-uploader", DirectUploaderWidget)
} catch (error) {
  // eslint-disable-next-line no-console
}

export function loadDirectUploaderListeners() {
  const submitMoreContentBtn = sdk.querySelector("#submit-more-content-btn")
  const directUploaderForm = sdk.querySelector("#direct-uploader-form")
  const overlay = sdk.querySelector("#direct-uploader-form .overlay")
  const exitBtn = sdk.querySelector("#direct-uploader-form .exit")

  if (!submitMoreContentBtn) {
    throw new Error("Failed to find submit more content button")
  }

  if (!directUploaderForm) {
    throw new Error("Failed to find direct uploader form")
  }

  if (!overlay) {
    throw new Error("Failed to find overlay")
  }

  if (!exitBtn) {
    throw new Error("Failed to find exit button")
  }

  submitMoreContentBtn.addEventListener("click", () => {
    directUploaderForm.classList.remove("hidden")
  })

  exitBtn.addEventListener("click", () => {
    directUploaderForm.classList.add("hidden")
  })

  overlay.addEventListener("click", () => {
    directUploaderForm.classList.add("hidden")
  })
}



================================================
File: storypage/direct-uploader.lib.ts
================================================
import { ISdk } from "@stackla/widget-utils"
import { getTileSize } from "@stackla/widget-utils/libs"

declare const sdk: ISdk

export const tileSettings = {
  small: "127.75px",
  medium: "210.4px",
  large: "265.5px"
}

const styleOptions = sdk.getStyleConfig()
const { margin } = styleOptions
export const marginAsInt = parseInt(margin)

export function getRowsPerPage(tileSize: number, gap: number) {
  return Math.ceil(window.innerHeight / (tileSize + gap)) - 1
}

export function registerResizeObserver() {
  const element = sdk.getElement()
  const observer = new ResizeObserver(() => {
    calculateTilesToShow()
  })

  if (!element) {
    console.warn("Element not found in registerResizeObserver")
    return
  }

  observer.observe(element)
}

export function calculateTilesToShow() {
  const element = sdk.getElement()

  if (!element) {
    console.warn("Element not found in calculateTilesToShow")
    return
  }

  const screenWidth = element.offsetWidth

  const tileSize = parseInt(getTileSize(tileSettings).replace("px", ""))
  const tilesByScreenWidth = Math.floor(screenWidth / (tileSize + marginAsInt))
  const rows = getRowsPerPage(tileSize, marginAsInt)
  let tilesPerPage = tilesByScreenWidth * rows
  const { enable_custom_tiles_per_page, tiles_per_page } = sdk.getStyleConfig()

  if (enable_custom_tiles_per_page && tiles_per_page) {
    tilesPerPage = parseInt(tiles_per_page)
  }

  sdk.setVisibleTilesCount(tilesPerPage)
  void sdk.loadTilesUntilVisibleTilesCount()

  // Hide tiles after the calculated tiles per page
  const tiles = sdk.querySelectorAll(".ugc-tile")
  const tilesToHideArray = Array.from(tiles).slice(tilesPerPage)
  tilesToHideArray.forEach(tile => {
    tile.style.display = "none"
    tile.classList.remove("last-tile")
  })

  // Show tiles after the calculated tiles per page
  const tilesToShowArray = Array.from(tiles).slice(0, tilesPerPage)
  tilesToShowArray.forEach(tile => {
    tile.style.display = ""
    tile.classList.remove("last-tile")
  })

  // There are complications with pseudo selectors and last-child that is visible, so we need to add a class to the last tile
  if (tilesToShowArray[tilesToShowArray.length - 1]) {
    tilesToShowArray[tilesToShowArray.length - 1].classList.add("last-tile")
  }
}



================================================
File: storypage/layout.hbs
================================================
<div class="ugc-tiles __inline storypage-inline">
    {{#tiles}}
    {{>tpl-tile options=../options.config}}
    {{/tiles}}
</div>
<div id="direct-uploader-form" class="hidden">
    <div class="overlay"></div>
    <div class="form-container">
        <direct-uploader />
    </div>
</div>



================================================
File: storypage/tile.hbs
================================================
{{#tile data-hash=@index class="grid-item"}}
  {{#ifAutoPlayVideo media options.tile_options.auto_play_video }}
    <div class="tile">
      {{playVideo this "100%" "100%"}}
    </div>
  {{else}}
    <div class="tile" data-background-image="{{image_thumbnail_url}}">
      <div class="direct-uploader-load-more">
        <div class="direct-uploader-container">
          <div>
            <span class="icon-picture"></span>
            <p>View all</p>
          </div>
        </div>
      </div>
      <div class="icon-section">
        <div class="top-section">
          {{#each attrs}}
            {{#ifequals this "instagram.reel"}}
              <div class="content-icon icon-reel"></div>
            {{/ifequals}}
          {{/each}}
          {{#ifHasProductTags this}}
            <div class="shopping-icon icon-products"></div>
          {{/ifHasProductTags}}
        </div>
        <div class="center-section">
          {{#ifequals media "video"}}
            <div class="icon-play"></div>
          {{/ifequals}}
        </div>
        <div class="bottom-section">
          <tile-tags variant="dark" tile-id="{{id}}" mode="swiper" context="storypage-inline"></tile-tags>
          <div class="network-icon icon-{{source}}"></div>
        </div>

        <shopspot-icon tile-id={{id}}></shopspot-icon>
      </div>
    </div>
  {{/ifAutoPlayVideo}}
{{/tile}}



================================================
File: storypage/widget.scss
================================================
@use "inline-tile";
@use "direct-uploader";

:host {
  transition: ease all 0.5s;
  overflow: hidden;
}

#nosto-ugc-container {
  .tile {
    background-size: cover;
    background-position: top;
    height: 100%;
    width: 100%;
    position: relative;
  }
}

.hidden {
  display: none !important;
}


================================================
File: storypage/widget.tsx
================================================
import { ISdk, loadWidget } from "@stackla/widget-utils"
import "./direct-uploader.component"
import { calculateTilesToShow, registerResizeObserver, tileSettings } from "./direct-uploader.lib"
import { createElement } from "@stackla/widget-utils/jsx"

declare const sdk: ISdk

loadWidget({
  features: {
    handleLoadMore: false,
    tileSizeSettings: tileSettings
  },
  callbacks: {
    onLoad: [() => registerResizeObserver()],
    onTileBgImageError: [calculateTilesToShow]
  }
})

const observer = new MutationObserver(createSubmitMoreContentBtn)
observer.observe(sdk.querySelector(".ugc-tile"), {
  childList: true,
  subtree: true
})

calculateTilesToShow()

function createSubmitMoreContentBtn() {
  const submitMoreContentBtn = (
    <div id="submit-more-content-btn">
      <span class="icon-upload"></span>
      <span>Submit your content</span>
    </div>
  )

  const existingBtn = sdk.querySelector("#submit-more-content-btn")
  existingBtn?.remove()

  sdk.querySelector(".ugc-tiles").appendChild(submitMoreContentBtn)
}



================================================
File: styles/partials/_expanded-swiper.scss
================================================
$nosto-container-margin: 20px;

%swiper-expanded-ph {
    .swiper-button-next,
    .swiper-button-prev {
        top: 0;
        bottom: 0;
        display: flex;
        align-items: center;
    }
}

@mixin swiper-expanded-styles() {
  @extend %swiper-expanded-ph;
  @content;
}





================================================
File: styles/partials/_fonts.scss
================================================
:host {
    font-family: Inter, sans-serif;
}

@font-face {
  font-family: swiper-icons;
  src: url("data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA");
  font-weight: 400;
  font-style: normal;
}

@font-face {
    font-family: Inter;
    src: url('assets/fonts/inter/Inter-VariableFont.ttf') format('ttf');
    font-weight: normal; 
    font-style: normal;
}

@font-face {
    font-family: Inter;
    src: url('assets/fonts/inter/Inter-VariableFont.ttf') format('ttf');
    font-weight: bold;
    font-style: normal; 
}

@font-face {
    font-family: Inter;
    src: url('assets/fonts/inter/Inter-VariableFont.ttf') format('ttf');
    font-weight: 400;
    font-style: normal; 
}

@font-face {
    font-family: Inter;
    src: url('assets/fonts/inter/Inter-Italic-VariableFont.ttf') format('ttf');
    font-weight: normal;
    font-style: italic; 
}



================================================
File: styles/partials/_grid.scss
================================================
@use "sass:string";
@use "./inline-dimens" as dimens;

%grid-styles-ph {
  width: 100%;
  display: flex;
  flex-wrap: wrap;

  .grid-item {
    color: white;
    text-align: center;
    border-radius: dimens.$inline-tile-border-radius;
    position: relative;
    background-size: cover;
    background-position: top;
    background-repeat: no-repeat;
    height: var(--tile-size);
    margin: var(--margin);
    box-sizing: border-box;
    object-fit: cover;
    object-position: var(--image-position);
  }
}

@mixin grid-styles($parent: null) {
  @if $parent {
    #{string.unquote($parent) ".grid"} {
      @extend %grid-styles-ph;
    }
  } @else {
    #{if(&, "&.grid", ".grid")} {
      @extend %grid-styles-ph;
    }
  }
}



================================================
File: styles/partials/_icon-sections.scss
================================================
@use "sass:string";

%icon-sections-styles-ph {
  $icon-placement-top: 8px;
  $icon-placement-bottom: 8px;
  $icon-placement-left: 8.67px;
  $icon-placement-right: 8.67px;

  display: flex;
  position: absolute;
  width: 100%;
  height: 100%;

  .top-section,
  .bottom-section {
    display: flex;
    position: absolute;
    justify-content: space-between;
    z-index: 1;
    width: 100%;
    align-items: flex-end;
    flex-direction: row;
  }

  .top-section {
    z-index: 2;
    top: $icon-placement-top;

    .content-icon {
      margin-left: $icon-placement-left;
    }

    .shopping-icon {
      margin-left: auto;
      margin-right: $icon-placement-right;
    }
  }

  .bottom-section {
    z-index: 2;
    bottom: $icon-placement-bottom;

    .network-icon {
      margin-left: auto;
      margin-right: $icon-placement-right;
    }
  }

  .center-section {
    position: absolute;
    display: flex;
    z-index: 1;
    justify-content: center;
    width: 100%;
    align-items: center;
    height: 100%;
  }
}

@mixin icon-sections-styles($parent: null) {
  @if $parent {
    #{string.unquote($parent) ".icon-section"} {
      @extend %icon-sections-styles-ph;
    }
  } @else {
    #{if(&, "& .icon-section", ".icon-section")} {
      @extend %icon-sections-styles-ph;
    }
  }
  @content;
}



================================================
File: styles/partials/_icons.scss
================================================
.widget-icon {
  display: block;
}

.close {
  width: 24px;
  height: 24px;
  background-image: url("assets/svg/close-black.svg");
  background-repeat: no-repeat;
}

.close-white {
  width: 26px;
  height: 26px;
  background-image: url("assets/svg/close-white.svg");
  background-repeat: no-repeat;
}

.story-close-white {
  width: 26px;
  height: 26px;
  background-image: url("assets/svg/story-close-white.svg");
  background-repeat: no-repeat;
}

.chevron-left {
  width: 40px;
  height: 40px;
  background-image: url("assets/svg/chevron-left.svg");
  background-repeat: no-repeat;
}

.chevron-left-inline {
  width: 36px;
  height: 36px;
  background-image: url("assets/svg/chevron-left-inline.svg");
  background-repeat: no-repeat;
}

.chevron-right {
  width: 40px;
  height: 40px;
  background-image: url("assets/svg/chevron-right.svg");
  background-repeat: no-repeat;
}

.chevron-right-inline {
  width: 36px;
  height: 36px;
  background-image: url("assets/svg/chevron-right-inline.svg");
  background-repeat: no-repeat;
}

.icon-share {
  width: 20px;
  height: 20px;
  background-size: contain;
  background-image: url("assets/svg/share-white.svg");
  background-repeat: no-repeat;

  &.light {
    background: url("assets/svg/share-black.svg");
    height: 13px;
    width: 13px;
    background-repeat: no-repeat;
  }
}

.icon-instagram-share {
  width: 34px;
  height: 34px;
  background-size: contain;
  background-image: url("assets/svg/instagram-share.svg");
  background-repeat: no-repeat;
}

.icon-x-share {
  align-items: center;
  background-color: #000;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  height: 34px;
  position: relative;
  width: 34px;
}

.icon-x-share::after {
  content: "";
  position: absolute;
  width: 19px;
  height: 19px;
  background-size: contain;
  background-image: url("assets/svg/x-share.svg");
  background-repeat: no-repeat;
}

.icon-linkedin-share {
  width: 34px;
  height: 34px;
  background-size: contain;
  background-image: url("assets/svg/linkedin-share.svg");
  background-repeat: no-repeat;
}

.icon-facebook-share {
  width: 34px;
  height: 34px;
  background-size: contain;
  background-image: url("assets/svg/facebook-share.svg");
  background-repeat: no-repeat;
}

.icon-pinterest-share {
  width: 34px;
  height: 34px;
  background-size: contain;
  background-image: url("assets/svg/pinterest-share.svg");
  background-repeat: no-repeat;
}

.icon-email-share {
  width: 37px;
  height: 30px;
  background-size: contain;
  background-image: url("assets/svg/email-share.svg");
  background-repeat: no-repeat;
}

.chevron-up {
  width: 24px;
  height: 24px;
  background-size: contain;
  background-image: url("assets/svg/chevron-up.svg");
  background-repeat: no-repeat;
}

.chevron-down {
  width: 24px;
  height: 24px;
  background-size: contain;
  background-image: url("assets/svg/chevron-down.svg");
  background-repeat: no-repeat;
}

.back-arrow {
  width: 24px;
  height: 24px;
  background-size: contain;
  background-image: url("assets/svg/back-arrow.svg");
  background-repeat: no-repeat;
}

.icon-vimeo {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/vimeo.svg");
  background-repeat: no-repeat;

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-instagram,
.icon-instagram.large,
.icon-instagram.medium {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/instagram.svg");
  background-repeat: no-repeat;

  &.black {
    background-image: url("assets/svg/instagram-black.svg");
  }

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-twitter,
.icon-twitter.large,
.icon-twitter.medium {
  display: flex;
  width: 18px;
  height: 18px;
  background-size: contain;
  background-image: url("assets/svg/twitter.svg");
  background-repeat: no-repeat;

  &.black {
    background-image: url("assets/svg/x-black.svg");
  }

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-linkedin,
.icon-linkedin.large,
.icon-linkedin.medium {
  width: 18px;
  height: 18px;
  background-size: contain;
  background-image: url("assets/svg/linkedin.svg");
  background-repeat: no-repeat;

  &.black {
    background-image: url("assets/svg/linkedin-black.svg");
  }

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-tiktok,
.icon-tiktok.large,
.icon-tiktok.medium {
  width: 18px;
  height: 18px;
  background-size: contain;
  background-image: url("assets/svg/tiktok.svg");
  background-repeat: no-repeat;

  &.black {
    background-image: url("assets/svg/tiktok-black.svg");
  }

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-facebook,
.icon-facebook.large,
.icon-facebook.medium {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/facebook.svg");
  background-repeat: no-repeat;

  &.black {
    background-image: url("assets/svg/facebook-black.svg");
  }

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-reel,
.icon-reel.large,
.icon-reel.medium {
  width: 12px;
  height: 12px;
  background-size: contain;
  background-image: url("assets/svg/reel.svg");
  background-repeat: no-repeat;

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-products {
  width: 14px;
  height: 14px;
  background-size: contain;
  background-image: url("assets/svg/products.svg");
  background-repeat: no-repeat;

  &.small {
    width: 10px;
    height: 10px;
  }
}

.icon-products-bg,
.icon-products-bg.large,
.icon-products-bg.medium {
  width: 24px;
  height: 24px;
  background-size: contain;
  background-image: url("assets/svg/products-bg.svg");
  background-repeat: no-repeat;

  &.small {
    width: 18px;
    height: 18px;
  }
}

.icon-youtube,
.icon-youtube.large,
.icon-youtube.medium {
  width: 22px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/youtube.svg");
  background-repeat: no-repeat;

  &.black {
    background-image: url("assets/svg/youtube-black.svg");
  }

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-youtube-short,
.icon-youtube-short.large,
.icon-youtube-short.medium {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/youtube-short.svg");
  background-repeat: no-repeat;

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-flickr,
.icon-flickr.large,
.icon-flickr.medium {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/flickr.svg");
  background-repeat: no-repeat;

  &.black {
    background-image: url("assets/svg/flickr-black.svg");
  }

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-weibo,
.icon-weibo.large,
.icon-weibo.medium {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/weibo.svg");
  background-repeat: no-repeat;

  &.black {
    background-image: url("assets/svg/weibo-black.svg");
  }

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-pinterest,
.icon-pinterest.large,
.icon-pinterest.medium {
  width: 18px;
  height: 18px;
  background-size: contain;
  background-image: url("assets/svg/pinterest.svg");
  background-repeat: no-repeat;

  &.black {
    background-image: url("assets/svg/pinterest-black.svg");
  }

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-rss,
.icon-rss.large,
.icon-rss.medium {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/rss.svg");
  background-repeat: no-repeat;

  &.black {
    background-image: url("assets/svg/rss-black.svg");
  }

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-tumblr,
.icon-tumblr.large,
.icon-tumblr.medium {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/tumblr.svg");
  background-repeat: no-repeat;

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-stackla,
.icon-stackla.large,
.icon-stackla.medium,
.icon-sta_feed,
.icon-sta_feed.large,
.icon-sta_feed.medium {
  width: 18px;
  height: 18px;
  background-size: contain;
  background-image: url("assets/svg/stackla.svg");
  background-repeat: no-repeat;

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-snapchat,
.icon-snapchat.large,
.icon-snapchat.medium {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/snapchat.svg");
  background-repeat: no-repeat;

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-spotify,
.icon-spotify.large,
.icon-spotify.medium {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/spotify.svg");
  background-repeat: no-repeat;

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-hootsuite,
.icon-hootsuite.large,
.icon-hootsuite.medium {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/hootsuite.svg");
  background-repeat: no-repeat;

  &.small {
    width: 12px;
    height: 12px;
  }
}

.icon-prev {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/prev.svg");
  background-repeat: no-repeat;
}

.icon-prev-white {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/prev-white.svg");
  background-repeat: no-repeat;
}

.icon-prev-grey {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/prev-grey.svg");
  background-repeat: no-repeat;
}

.icon-prev-circle {
  width: 40px;
  height: 40px;
  background-size: contain;
  background-image: url("assets/svg/prev-circle.svg");
  background-repeat: no-repeat;
}

.icon-next {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/next.svg");
  background-repeat: no-repeat;
}

.icon-next-white {
  width: 16px;
  height: 16px;
  background-size: contain;
  background-image: url("assets/svg/next-white.svg");
  background-repeat: no-repeat;
}

.icon-next-circle {
  width: 40px;
  height: 40px;
  background-size: contain;
  background-image: url("assets/svg/next-circle.svg");
  background-repeat: no-repeat;
}

.icon-play {
  width: 2em;
  height: 2em;
  background-size: contain;
  background-image: url("assets/svg/play.svg");
  background-repeat: no-repeat;
}

.icon-upload {
  background-image: url("assets/svg/upload.svg");
  height: 15px;
  width: 15px;
  background-size: contain;
  background-repeat: no-repeat;
}

.icon-picture {
  background-image: url("assets/svg/picture.svg");
  background-size: contain;
  background-repeat: no-repeat;
  height: 18px;
  width: 18px;
  position: absolute;
}

.icon-tag {
  width: 24px;
  height: 24px;
  background-size: contain;
  background-image: url("assets/svg/tag.svg");
  background-repeat: no-repeat;

  &.small {
    width: 18px;
    height: 18px;
  }
}

.icon-video-play {
  width: 18px;
  height: 18px;
  background-size: contain;
  background-image: url("assets/svg/video-play.svg");
  background-repeat: no-repeat;
}

.icon-video-pause {
  width: 18px;
  height: 18px;
  background-size: contain;
  background-image: url("assets/svg/video-pause.svg");
  background-repeat: no-repeat;
}

.icon-story-video-play {
  width: 18px;
  height: 18px;
  background-size: contain;
  background-image: url("assets/svg/story-video-play.svg");
  background-repeat: no-repeat;
}

.icon-story-video-pause {
  width: 18px;
  height: 18px;
  background-size: contain;
  background-image: url("assets/svg/story-video-pause.svg");
  background-repeat: no-repeat;
}

.icon-video-volume {
  width: 12px;
  height: 12px;
  background-size: contain;
  background-image: url("assets/svg/video-volume.svg");
  background-repeat: no-repeat;
}

.icon-video-mute {
  width: 12px;
  height: 12px;
  background-size: contain;
  background-image: url("assets/svg/video-mute.svg");
  background-repeat: no-repeat;
}

.down-arrow {
  width: 8px;
  height: 7px;
  background-size: contain;
  background-image: url("assets/svg/down-arrow.svg");
  background-repeat: no-repeat;
}

.up-arrow {
  width: 8px;
  height: 7px;
  background-size: contain;
  background-image: url("assets/svg/up-arrow.svg");
  background-repeat: no-repeat;
}

.down-arrow-thin {
  width: 24px;
  height: 24px;
  background-size: contain;
  background-image: url("assets/svg/down-arrow-thin.svg");
  background-repeat: no-repeat;
}





================================================
File: styles/partials/_inline-dimens.scss
================================================
// inline tile border radius
$inline-tile-border-radius: 5px;

// story border radius override
$story-border-radius: 50%;

// video play icon
$play-icon-width: 50px;
$play-icon-height: 50px;

// tile loading icon
$loading-width: 30px;
$loading-height: 30px;



================================================
File: styles/partials/_inline.scss
================================================
#nosto-ugc-container {
    .ugc-tile {
        cursor: pointer;
        max-width: 50vw;

        .video-content {
            display: flex;
            object-fit: cover;
            object-position: top;
        }

        tile-tags {
            .swiper-wrapper {
                align-items: center;
            }
        }

        .icon-play {
            top: 43%;
            left: 0;
            right: 0;
            margin: auto;
            position: absolute;
        }

        .fallback-image {
            object-fit: cover;
            width: 100%;
            aspect-ratio: 1 / 1;
        }

        iframe {
            border: 0 !important;
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: top;
        }
        
        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: top;
        }
    }
}


================================================
File: styles/partials/_loading.scss
================================================
@use "../partials/inline-dimens" as dimens;

%loading {
  &{
    border-radius: 50% !important;
    animation: spin 2s linear infinite;
    position: absolute;
    z-index: 10;
    border: 5px solid #f3f3f3;
    border-top: 5px solid #3498db;
    border-bottom: 5px solid #3498db;
    width: dimens.$loading-width !important;
    height: dimens.$loading-width !important;
    top: calc(50% - dimens.$loading-width);
    left: calc(50% - dimens.$loading-width);
  }
}

.tile > .tile-loading,
.loading {
  @extend %loading;
}



================================================
File: styles/partials/_media-queries.scss
================================================
@use "sass:map";

$breakpoints: (
  mobile: 576px,
  tablet: 577px,
  desktop: 992px
);

@mixin media-query-target($point) {
  @if $point == mobile {
    @media (max-width: map.get($breakpoints, tablet)) {
      @content;
    }
  } @else if $point == tablet {
    @media (max-width: map.get($breakpoints, desktop)) {
      @content;
    }
  } @else if $point == desktop {
    @media (min-width: map.get($breakpoints, desktop)) {
      @content;
    }
  }
}

// Can be utilised by using : @include breakpoint(mobile) { ... }
@mixin breakpoint($point) {
  @if $point == mobile {
    @media (max-width: map.get($breakpoints, mobile)) {
      @content;
    }
  } @else if $point == tablet {
    @media (min-width: map.get($breakpoints, tablet)) and (max-width: map.get($breakpoints, desktop)) {
      @content;
    }
  } @else if $point == desktop {
    @media (min-width: map.get($breakpoints, desktop)) {
      @content;
    }
  }
}



================================================
File: styles/partials/_swiper.scss
================================================
@forward "pkg:swiper/swiper-bundle.css";


================================================
File: styles/partials/_tile-overlay.scss
================================================
@use "../partials/media-queries";
@use "./inline-dimens" as dimens;

.expanded-tile-overlay {
  position: fixed;
  width: 100vw;
  height: 100vh;
  inset: 0;
  background-color: rgb(0 0 0 / 90%);
  z-index: 10;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

.story-overlay {
  display: none;
  position: absolute;
  background-color: rgb(0 0 0 / 40%);
  width: var(--tile-size);
  height: var(--tile-size);
  border-radius: dimens.$story-border-radius;
  z-index: 10;
}

@include media-queries.breakpoint(tablet) {
  .expanded-tile-overlay {
    overflow: hidden;
  }
}

@include media-queries.breakpoint(mobile) {
  .expanded-tile-overlay {
    overflow: hidden;
  }
}


================================================
File: styles/templates/add-to-cart.scss
================================================
@use "sass:string";

%add-to-cart-styles-ph {
  .ugc-add-to-cart-button {
    align-content: center;
    border-radius: 0;
    height: 40px;
    padding: 8px 16px;
    margin: 24px 0 0;
    width: auto;
    background-color: var(--cta-button-background-color) !important;
    color: var(--cta-button-font-color) !important;
    font-size: var(--cta-button-font-size) !important;
  }

  .ugc-add-to-cart-colorpicker-text,
  .ugc-add-to-cart-colorpicker-text b,
  #variant-container p,
  #variant-container p span {
    color: #333;

    // TODO: import font
    // font-family: "Open Sans";
    font-size: 12px;
    font-weight: 400;
    padding: 0;
  }

  #variant-container div:not(.ugc-add-to-cart-sizepicker .ugc-add-to-cart-sizepicker-btn) {
    flex-direction: row;
    align-items: baseline;
  }

  #variant-container div p::after {
    content: ":";
  }

  .ugc-add-to-cart-other-variant-selector {
    background: none;
    border: none;
    color: #333;
    cursor: pointer;
    font-size: 12px;
    margin: 0;
    padding: 0;
  }

  .ugc-add-to-cart-colorpicker-text {
    margin: 0;
    padding: 0;
    padding: 8px 0;
  }

  #variant-container p {
    margin: 18px 0 8px;
  }

  .ugc-add-to-cart-colorpicker {
    display: flex;
    gap: 12px;
  }

  .ugc-add-to-cart-colorpicker-ring {
    height: 24px;
    width: 24px;
    margin: 0;
  }

  .ugc-add-to-cart-colorpicker-inner {
    width: 15.6px;
    height: 15.6px;
    left: 24.5%;
    top: 24%;
  }

  .ugc-add-to-cart-sizepicker {
    display: flex;
    gap: 10px;
  }

  .ugc-add-to-cart-sizepicker-btn {
    border-radius: 0;
    cursor: pointer;

    // TODO: import font
    font-family: "Open Sans", sans-serif;
    font-size: 12px;
    font-weight: 400;
    height: 34px;
    margin: 0;
  }

  .ugc-add-to-cart-sizepicker-btn[selected="true"] {
    border: 2px solid #4083b9;
  }

  .ugc-add-to-cart-sizepicker-btn:not([enabled="true"]) {
    border: 1px solid #dcdcdc;
    background: #f2f2f2;
    color: #b9b9b9;
    cursor: not-allowed;
    text-decoration: line-through;
  }

  .ugc-add-to-cart-sizepicker-btn:not([enabled="true"])::before {
    content: none;
  }
}

@mixin add-to-cart-styles($parent: null) {
  // if parent selector is supplied use it
  @if $parent {
    #{string.unquote($parent) add-to-cart} {
      @extend %add-to-cart-styles-ph;

      // any style overrides
      @content;
    }
  } @else {
    // dynamically determine the parent selector if available
    #{if(&, "& add-to-cart", "add-to-cart")} {
      @extend %add-to-cart-styles-ph;

      // any style overrides
      @content;
    }
  }
}



================================================
File: styles/templates/load-more.scss
================================================
@use "sass:string";
@use "@styles/partials/media-queries";

$load-more-margin: 20px;

// style placeholder
load-more {
  cursor: pointer;

  #buttons {
    display: flex;
    place-content: center;
    margin-top: $load-more-margin;
    margin-bottom: $load-more-margin;

    .load-more {
      display: flex;
    }
  }
}


================================================
File: styles/templates/products.scss
================================================
@use "sass:map";
@use "sass:string";

// style placeholder
%product-styles-ph {
  $border-active: #9f9f9f;
  $tide: #b4b2af;
  $black: #000;
  $white: #fff;
  $natural-grey: #928f8a;
  $dark-grey: #2c2c2c;
  $button-disabled: #c4c4c4;
  $button-disabled-text: #9d9d9d;
  $loader-width: 50px;
  $rec-label: (
    "width": 69px,
    "height": 16px
  );
  $prod-arrow: (
    "width": 20px,
    "height": 20px,
    "top": 78px
  );
  $icon-like: (
    "width": 9px,
    "height": 9px
  );
  $prod-img-wrapper-mw: 100%;
  $breakpoint-md: 992px;

  &{
    --product-price-font-color: $black;
    --product-title-font-color: $white;
    --product-description-font-color: $black;

    display: flex;
    flex-direction: column;
    border-top: 1px solid #F4F4F4;
    padding-top: 16px;
  }

  .stacklapopup-products-header {
    display: flex;
    margin-bottom: 0;

    .stacklapopup-products-header {
      margin-bottom: 0;
    }

    .stacklapopup-products-item-header {
      display: none;

      &.stacklapopup-products-item-active {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        gap: 16px;
      }

      .stacklapopup-products-item-price {
        color: var(--product-price-font-color);
        font-size: 14px;
        font-weight: 400;
        line-height: 12px;
        margin-bottom: 8px;
      }

      .stacklapopup-products-item-title {
        color: var(--product-title-font-color);
        font-size: 14px;
        font-weight: 500;
        line-height: 16px;
        text-decoration: none;
      }
    }
  }

  .stacklapopup-product-images-wrapper {
    display: flex;
    margin-top: 24px;
    position: relative;

    &::-webkit-scrollbar {
      display: none;
    }

    &.arrows-hidden {
      .swiper-nav-icon {
        cursor: not-allowed;

        &.icon-prev {
          background-image: url("assets/svg/prev-grey.svg") !important;
        }

        &.icon-next {
          background-image: url("assets/svg/next-grey.svg") !important;
        }
      }
    }

    .swiper-expanded-product-recs {
      width: calc(90% - 20px);

      .swiper-wrapper {
        width: calc(100% - 20px);
        max-width: initial;
        max-height: initial;
      }

      .swiper-slide.stacklapopup-product-wrapper {
        width: 84.9px !important;
        height: 110px !important;
        position: relative;
        cursor: pointer;
        display: inline-block;
        padding: 2px;

        &:hover .stacklapopup-products-item {
          opacity: 1;
        }

        .stacklapopup-products-item {
          display: flex;
          flex-shrink: 0;
          height: 100%;
          align-items: center;

          &.stacklapopup-products-item-active {
            img {
              border: 0.5px solid $border-active;
              opacity: 1;
            }
          }

          .stacklapopup-products-item-image {
            opacity: 0.4;
            border-radius: 3px;
            display: flex;
            align-items: center;
            width: 100%;
            height: calc(100% - 2px);
          }
        }

        .stacklapopup-products-item-image-recommendation-label {
          display: flex;
          width: map.get($rec-label, "width");
          height: map.get($rec-label, "height");
          justify-content: center;
          align-items: center;
          flex-shrink: 0;
          background: $black;
          border-radius: 14px;
          position: absolute;
          top: 0;
          left: 10px;
          z-index: 2;

          p {
            color: $white;

            // TODO: import the font family
            // font-family: "Gotham SSm";
            font-size: 8px;
            font-style: normal;
            font-weight: 350;
            line-height: 160%;
            text-align: center;
            display: flex;
            align-items: center;

            .icon-like {
              height: map.get($icon-like, "height");
              width: map.get($icon-like, "width");
              display: inline-block;
              background-image: url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%229%22%20height%3D%229%22%20viewBox%3D%220%200%209%209%22%20fill%3D%22none%22%3E%3Cmask%20id%3D%22mask0_2185_4584%22%20style%3D%22mask-type%3Aalpha%22%20maskUnits%3D%22userSpaceOnUse%22%20x%3D%220%22%20y%3D%220%22%20width%3D%229%22%20height%3D%229%22%3E%3Crect%20width%3D%229%22%20height%3D%229%22%20fill%3D%22%23D9D9D9%22/%3E%3C/mask%3E%3Cg%20mask%3D%22url%28%23mask0_2185_4584%29%22%3E%3Cpath%20d%3D%22M6.75%207.875H2.625V3L5.25%200.375L5.71875%200.84375C5.7625%200.8875%205.79844%200.946875%205.82656%201.02188C5.85469%201.09688%205.86875%201.16875%205.86875%201.2375V1.36875L5.45625%203H7.875C8.075%203%208.25%203.075%208.4%203.225C8.55%203.375%208.625%203.55%208.625%203.75V4.5C8.625%204.54375%208.61875%204.59062%208.60625%204.64062C8.59375%204.69063%208.58125%204.7375%208.56875%204.78125L7.44375%207.425C7.3875%207.55%207.29375%207.65625%207.1625%207.74375C7.03125%207.83125%206.89375%207.875%206.75%207.875ZM3.375%207.125H6.75L7.875%204.5V3.75H4.5L5.00625%201.6875L3.375%203.31875V7.125ZM2.625%203V3.75H1.5V7.125H2.625V7.875H0.75V3H2.625Z%22%20fill%3D%22white%22/%3E%3C/g%3E%3C/svg%3E");
              background-size: cover;
              margin-right: 2px;
            }
          }
        }
      }
    }

    .swiper-exp-product-recs-button-prev.swiper-button-prev {
      left: 0;
    }

    .swiper-exp-product-recs-button-next.swiper-button-next {
      right: 0;
    }
  }

  .stacklapopup-products-item-content {
    display: none;

    &.stacklapopup-products-item-active {
      display: flex;
      flex-direction: column;
    }

    .stacklapopup-products-item-button-wrap {
      all: unset;
      position: relative;
      width: 100%;

      .stacklapopup-products-item-button {
        display: inline-block;
        font-weight: 500;
        line-height: 14px;
        text-align: center;
        text-decoration: none;
        width: 100%;
        background-color: var(--cta-button-background-color);
        color: var(--cta-button-font-color);
        font-size: var(--cta-button-font-size);

        &.disabled {
          background: $button-disabled;
          font-weight: bold;
          cursor: default;
          color: $button-disabled-text;
        }
      }
    }

    .stacklapopup-products-item-description-wrapper {
      overflow: hidden auto;
      width: 100%;

      .stacklapopup-products-item-description {
        color: var(--product-description-font-color);
        font-size: 12px;
        font-weight: 300;
        line-height: 160%;
        text-overflow: ellipsis;
        overflow-y: scroll;
        display: -webkit-box;
        margin: 10px 0 16px;
        scrollbar-width: thin;
        scrollbar-color: #e6e6e6 white;
      }
    }
  }

  .loader {
    width: $loader-width;
    aspect-ratio: 1;
    border-radius: 50%;
    background:
      radial-gradient(farthest-side, $tide 94%, $black) top / 8px 8px no-repeat,
      conic-gradient($black 30%, $natural-grey);
    mask: radial-gradient(farthest-side, $black calc(100% - 8px), $black 0);
    animation: l13 1s infinite linear;
  }

  .top-section {
    margin-bottom: 14px;

    .down-arrow-thin {
      cursor: pointer;
    }
  }

  @keyframes l13 {
    100% {
      transform: rotate(1turn);
    }
  }

  .recommendations-text {
    color: $dark-grey;
    font-size: 10px;
    font-weight: 400;
    text-decoration: underline;
    text-underline-offset: 2px;
  }

  .stacklapopup-products-item-button,
  .stacklapopup-products-item-button-wrap {
    align-content: center;
    display: flex;
    flex-direction: column;
    height: 40px;
  }

  @media only screen and (max-width: $breakpoint-md) {
    .stacklapopup-products-item-button-wrap {
      bottom: unset;
      position: unset;
    }
  }
}

@mixin products-styles($parent: null) {
  // if parent selector is supplied use it
  @if $parent {
    #{string.unquote($parent) ugc-products} {
      @extend %product-styles-ph;

      // any style overrides
      @content;
    }
  } @else {
    // dynamically determine the parent selector if available
    #{if(&, "& ugc-products", "ugc-products")} {
      @extend %product-styles-ph;

      // any style overrides
      @content;
    }
  }
}



================================================
File: styles/templates/share-menu.scss
================================================
@use "sass:string";
@use "@styles/partials/media-queries";

// style placeholder
%share-menu-styles-ph {
  .share-button {
    display: flex;
    cursor: pointer;
    margin-left: auto;
  }

  .share-socials-popup-wrapper {
    display: none;
    position: absolute;
    place-items: center;
    z-index: 20;

    &::backdrop {
      background: rgb(0 0 0 / 80%); 
      backdrop-filter: blur(5px);
    }


    .panel-overlay {
      display: none;

      &.active {
        display: block;
        background: #000;
        cursor: pointer;
        height: 100vh;
        opacity: 0.8;
        position: absolute;
        width: 100vw;
        z-index: 6;
        top: 0;
        left: 50%;
        transform: translate(-50%, -50%);
      }
    }

    .share-socials-popup {
      display: flex;
      flex-direction: column;
      width: 351px;
      border-radius: 5px;
      background: #fff;
      position: relative;
      z-index: 7;

      .share-modal-exit {
        position: absolute;
        top: -12px;
        right: -12px;
        z-index: 8;
      }
    }

    .ugc-inline-share-buttons {
      align-items: baseline;
      display: flex;
      justify-content: space-between;
      padding: 20px 19px;
    }

    .popup-text {
      text-align: center;
      font-size: 14px;
      font-style: normal;
      font-weight: 400;
      line-height: 50%;
      border-bottom: solid #d6d4d5 1px;
      padding: 20px 0 12px;
      color: #000;
    }

    .url-copy {
      margin: 0 19px 20px;

      .url-controls {
        display: flex;
        height: 32px;
        align-items: flex-start;
        border-radius: 3px;
        border: 1px solid #d6d4d5;
        background: #fff;
      }

      .share-url {
        border: none;
        outline: none;
        background: #fff;
        margin: 0;
        box-shadow: none;
        padding: 8px 12px;
        width: 100%;
        color: #4d4a4c;
        font-size: 12px;
        font-weight: 400;
      }

      .copy-button {
        border: none;
        border-left: 1px solid #d6d4d5;
        outline: none;
        background: #fff;
        box-shadow: none;
        cursor: pointer;
        height: 100%;
        padding: 9px 12px;
        color: #1f63ca;
        font-size: 12px;

        &:hover {
          background-color: #1f63ca;
          color: #fff;
        }
      }

      .copy-status {
        display: none;
        color: green;
        font-weight: 500;
        position: absolute;
        left: 20px;
      }
    }
  }

  @include media-queries.breakpoint(tablet) {
    .share-socials-popup-wrapper {
      top: 30%;
    }
  }
}

@mixin share-menu-styles($parent: null) {
  // if parent selector is supplied use it
  @if $parent {
    #{string.unquote($parent) share-menu} {
      @extend %share-menu-styles-ph;

      // any style overrides
      @content;
    }
  } @else {
    // dynamically determine the parent selector if available
    #{if(&, "& share-menu", "share-menu")} {
      @extend %share-menu-styles-ph;

      // any style overrides
      @content;
    }
  }
}



================================================
File: styles/templates/shopspot-icon.scss
================================================
@use "sass:string";
@use "@styles/partials/media-queries";

// style placeholder
%shopspot-icon-styles-ph {
  &[mode="expanded"] {
    .fs-tag {
      display: var(--shopspots-display-expanded);
    }
  }

  .stacklapopup-shopspot-badge {
    background: #fff;
    border-radius: 50%;
    cursor: pointer;
    left: -12px;
    position: absolute;
    top: -12px;
    padding: 5px 8px;
    text-align: center;
  }

  .fs-tag {
    position: absolute;
    width: 13px;
    height: 13px;
    background: var(--shopspot-icon);
    color: white;
    display: var(--shopspots-display-inline);
    background-size: 70%;
    border: solid #fff 1px;
    border-radius: 50%;
    text-align: center;
    font-size: 10px;
    font-style: normal;
    font-weight: 500;
    z-index: 10;

    > .tooltip {
      display: none;
      width: auto;
      background-color: #000;
      color: #fff;
      text-align: center;
      padding: 3px;
      border-radius: 0.5px;
      position: absolute;
      z-index: 1;
      top: 25px;
      left: 50%;
      transform: translateX(-50%);
      transition: opacity 0.3s;
      white-space: nowrap;
      line-height: 12px;
      font-size: 12px;
    }

    > .tooltip::after {
      content: "";
      position: absolute;
      bottom: 100%;
      left: 50%;
      margin-left: -5px;
      border-width: 5px;
      border-style: solid;
      border-color: transparent transparent #000;
    }
  }
}

@mixin shopspot-icon-styles($parent: null) {
  // if parent selector is supplied use it
  @if $parent {
    #{string.unquote($parent) shopspot-icon} {
      @extend %shopspot-icon-styles-ph;

      // any style overrides
      @content;
    }
  } @else {
    // dynamically determine the parent selector if available
    #{if(&, "& shopspot-icon", "shopspot-icon")} {
      @extend %shopspot-icon-styles-ph;

      // any style overrides
      @content;
    }
  }
}



================================================
File: styles/templates/swiper-overrides.scss
================================================
@use "../partials/media-queries";

.swiper {
  display: flex;
  height: 100%;
  width: 100%;

  .swiper-slide {
    align-items: center;
    position: relative;
    display: flex;
    justify-content: center;
    overflow: hidden;

    &:not(.swiper-initialized) {
      .swiper-slide > .ugc-tile > img {
        opacity: 0;
      }
    }
  }
}

.swiper-button-next,
.swiper-button-prev {
  top: unset;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

.swiper-button-prev::after,
.swiper-button-next::after {
  content: unset !important;

  --swiper-navigation-size: 20px;
}

@include media-queries.breakpoint(mobile) {
  .swiper .swiper-wrapper {
    max-height: 100vh;
  }
}

@include media-queries.media-query-target(tablet) {
  .swiper-button-next.btn-lg,
  .swiper-button-prev.btn-lg {
    display: none !important;
  }
}

@include media-queries.breakpoint(desktop) {
  .swiper-button-next,
  .swiper-button-prev {
    display: flex;
  }
}



================================================
File: styles/templates/tags.scss
================================================
@use "sass:string";
@use "@styles/partials/media-queries";

// style placeholder
%tags-styles-ph {
  --swiper-navigation-sides-offset: 0;
  --swiper-navigation-top-offset: 3px;
  
  align-items: center;
  display: var(--tags-display-inline);
  position: relative;
  overflow: hidden;
  height: 20px;
  width: 100%;

  .swiper-slide {
      height: 100% !important;
  }

  &[context="expanded"] {
    display: var(--tags-display-expanded);
    overflow: visible;
  }

  .mask-left {
    mask-image: linear-gradient(to right, transparent 10%, black 25%);
  }

  .mask-right {
    mask-image: linear-gradient(to left, transparent 10%, black 25%);
  }

  .mask-both {
    mask-image: linear-gradient(to right, transparent 5%, black 15%, black 85%, transparent 95%);
  }

  &[context*="inline"] {
    .swiper-tags {
      margin-left: initial;
      width: 100%;
    }
  }

  &[context*="inline"][navigation-arrows="true"] {
    .swiper-tags {
      width: 100%;
    }
  }

  &:has(.swiper-tags-button-prev:not(.swiper-button-disabled)) {
    .swiper-tags {
      mask-image: linear-gradient(to right, transparent 5%, black 25%);
    }
  }

  &:has(.swiper-tags-button-next:not(.swiper-button-disabled)) {
    .swiper-tags {
      mask-image: linear-gradient(to left, transparent 5%, black 25%);
    }
  }

  &:has(.swiper-tags-button-prev:not(.swiper-button-disabled)):has(
      .swiper-tags-button-next:not(.swiper-button-disabled)
    ) {
    .swiper-tags {
      mask-image: linear-gradient(to right, transparent 5%, black 15%, black 85%, transparent 95%);
    }
  }

  .swiper-button-disabled {
    display: none;
  }

  .swiper-tags-button-prev,
  .swiper-tags-button-next {
    position: relative;

    .swiper-nav-icon {
      width: 12px;
      height: 12px;
    }
  }

  .swiper-tags-button-prev::after,
  .swiper-tags-button-next::after {
    content: "";
  }

  .tile-tags-wapper {
    flex-direction: column;
    width: 100%;

    .tile-tags {
      display: var(--tags-display-inline);
      align-items: center;
      z-index: 2;
      flex-direction: row;
      gap: var(--tags-gap);
    }
  }

  .tile-tags-wapper .tile-tag,
  .swiper-tags .swiper-slide {
    display: inline-flex;
    background: var(--tile-tag-background, '#D6D4D5');
    border-radius: 3px;
    font-size: 10px;
    font-style: normal;
    font-weight: 400;
    padding: 2px 4px;
    line-height: 16px;
    text-wrap: nowrap;
    max-width: fit-content;

    a {
      color: #000;
      text-decoration: none;

      .tag-title {
        margin: 0 6px;
        display: flex;
      }
    }
  }

  &[variation="small"][context*="inline"] {
    .swiper-tags .swiper-slide {
      max-width: 100%;
    }
  }

  .tile-tags-wapper .tile-tag {
    padding: 2px 4px;
  }

  .swiper-tags .swiper-slide {
    padding: 2px 0;
  }

  &[variant="dark"] {
    .tile-tags .tile-tag,
    .swiper-tags .swiper-slide {
      background: var(--tile-tag-inline-background, color(srgb 0 0 0 / 40%));
      border-radius: 25px;
      line-height: 12px;

      a {
        color: #fff;
      }
    }
  }
}

@mixin tile-tags-styles($parent: null) {
  // if parent selector is supplied use it
  @if $parent {
    #{string.unquote($parent) tile-tags} {
      @extend %tags-styles-ph;

      // any style overrides
      @content;
    }
  } @else {
    // dynamically determine the parent selector if available
    #{if(&, "& tile-tags", "tile-tags")} {
      @extend %tags-styles-ph;

      // any style overrides
      @content;
    }
  }
}



================================================
File: styles/templates/tile-content.scss
================================================
@use "sass:math";
@use "sass:string";
@use "@styles/partials/media-queries";

// style placeholder
%tile-content-styles-ph {
  display: flex;

  .tile-content-wrapper {
    --max-lines: 7;

    display: flex;
    flex-direction: column;
    height: 100%;
    gap: 24px;
    width: 100%;

    .description {
      display: flex;
      flex-direction: column;
      overflow: hidden;
      flex: 1 1 auto;
      width: 100%;

      .caption {
        // intentional duplicate display props. When --webkit-box not supported, display with be flex
        display: flex;
        line-height: 1.2rem;
        overflow: hidden;
        flex: 1 1 auto;

        .caption-paragraph {
          display: flex;
          display: -webkit-box;
          -webkit-line-clamp: var(--lines);
          color: var(--text-tile-font-color);
          line-clamp: 7;
          -webkit-box-orient: vertical;
          font-size: var(--text-tile-font-size);
          font-weight: 300;
          line-height: 16px;
          -webkit-box-pack: end;
          height: fit-content;
          max-height: 80px;
          margin-bottom: 16px;
          text-overflow: ellipsis;
          overflow: hidden;
          overflow-y: scroll;
          scrollbar-width: none;
          -ms-overflow-style: none;

          &::-webkit-scrollbar {
            display: none;
          }
        }
      }
    }

    .user-info {
      display: flex;
      align-items: center;

      .user-link {
        display: flex;
        flex-direction: column;
        margin-right: auto;
        text-decoration: none;
        gap: 8px;

        .user-name {
          font-size: var(--text-tile-user-name-font-size);
          color: var(--text-tile-user-name-font-color);
        }

        .user-handle {
          font-size: var(--text-tile-user-handle-font-size);
          color: var(--text-tile-user-handle-font-color);
        }
      }

      .avatar-wrapper {
        margin-right: 16px;
        display: flex;

        .avatar-link {
          display: flex;

          > img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
          }
        }
      }
    }

    .header {
      display: flex;
      flex-direction: row;
      width: 100%;

      share-menu {
        display: flex;
        margin-left: auto;
        margin-right: 10px;
        align-items: center;
      }

      time-phrase {
        display: flex;
        margin-left: auto;
        align-items: center;
      }

      .share-menu-timephrase-wrapper {
        display: flex;
        flex-direction: column;
        margin-left: auto;
        padding-top: 4px;
        padding-bottom: 2px;
        align-items: end;

        .share-menu-products-icon {
          display: flex;
          flex-direction: row;
          align-items: center;

          .icon-products {
            margin-right: 6px;
          }

          share-menu {
            display: flex;
            margin-left: auto;
            margin-right: 0;
            align-items: center;
          }
        }

        time-phrase {
          margin-top: auto;
        }
      }
    }

    &.light {
      .user-info {
        .user-link {
          color: #000;
        }
      }
    }

    &.dark {
      .caption .caption-paragraph {
        color: #fff;
      }

      .user-info {
        .user-link {
          color: #fff;

          .user-handle {
            color: #fff;
          }
        }
      }
    }

    &.dark-weight {
      .user-info {
        .user-link {
          color: #fff;
          font-weight: 600;

          .user-handle {
            color: #fff;
            font-weight: 400;
          }
        }
      }
    }

    &.custom {
      .user-info {
        .user-link {
          .user-name {
            color: var(--text-tile-user-name-font-color);
            font-weight: 600;
          }

          .user-handle {
            color: var(--text-tile-user-handle-font-color);
            font-weight: 400;
          }
        }
      }
    }
  }

  &[orientation="vertical"] {
    .tile-content-wrapper .user-info {
      flex-direction: column;
      gap: 10px;

      .avatar-wrapper,
      .user-link {
        margin-right: unset;
      }
    }
  }
}

@mixin tile-content-styles($parent: null) {
  // if parent selector is supplied use it
  @if $parent {
    #{string.unquote($parent) tile-content} {
      @extend %tile-content-styles-ph;
    }
  } @else {
    // dynamically determine the parent selector if available
    #{if(&, "& tile-content", "tile-content")} {
      @extend %tile-content-styles-ph;
    }
  }
  @content;
}



================================================
File: styles/templates/time-phrase.scss
================================================
@use "sass:string";
@use "@styles/partials/media-queries";

// style placeholder
%time-phrase-styles-ph {
  display: flex;

  .tile-timephrase {
    color: #b9bab9;
    border-radius: 2px;
    font-weight: 400;
    display: inline-block;
    font-size: 10px;
  }
}

@mixin time-phrase-styles($parent: null) {
  // if parent selector is supplied use it
  @if $parent {
    #{string.unquote($parent) time-phrase} {
      @extend %time-phrase-styles-ph;

      // any style overrides
      @content;
    }
  } @else {
    // dynamically determine the parent selector if available
    #{if(&, "& time-phrase", "time-phrase")} {
      @extend %time-phrase-styles-ph;

      // any style overrides
      @content;
    }
  }
}



================================================
File: styles/templates/expanded-tiles/_colors.scss
================================================
$panel-bg: #fff;
$panel-txt: #fff;
$bg-dark: #000;
$text-dark: #000;
$text-grey: #636062;



================================================
File: styles/templates/expanded-tiles/_dimens.scss
================================================
$width-lg: 1002px;
$height-lg: 712px;
$panel-left-width-lg: 517px;
$panel-right-width-lg: 363px;
$panel-padding: 20px;

// back arrow icon used in smaller screens (md)
$back-icon-height: 56px;
$container-max-width-lg: 895px;
$container-max-height-lg: 90vh;

// responsiveness dimensions
$tablet-panel-top-width-upper-limit: 643px;
$breakpoint-mob-max-width: 576px;
$breakpoint-tab-min-width: 577px;
$breakpoint-tab-max-width: 992px;

// video play icon
$play-icon-width: 50px;
$play-icon-height: 50px;



================================================
File: styles/templates/expanded-tiles/_index.scss
================================================
@use "sass:map";
@use "dimens";
@use "responsive";
@use "colors";
@use "../add-to-cart";
@use "../products";
@use "@styles/partials/media-queries";

$max-height: 880px;
$min-height: 88vh;
$panel-left-width: unset;

html {
  background: var(--widget-background);
}

#overlay-expanded-tiles {
  margin: 0 !important;
  padding: 0 !important;
  max-width: 100% !important;
  max-height: 100% !important;
  border:0 !important;
}

expanded-tiles {
  --expanded-tiles-background: #fff;
}

expanded-tiles:not(:empty) {
  :host {
    transition: ease all 0.5s;
  }

  min-height: $min-height;
  display: flex;
  flex-direction: row;
  justify-content: center;
  background-color: transparent;
  text-rendering: auto;
  max-width: dimens.$width-lg;
  max-height: dimens.$height-lg;
  position: relative;

  .ugc-tiles {
    height: auto !important;
  }

  .play-icon {
    z-index: 9;
    display: inline-block;
    width: dimens.$play-icon-width;
    height: dimens.$play-icon-height;
    background-image: url('data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 30 30" fill="none"><circle cx="15" cy="15" r="15" fill="%23BCBBBC"/><path d="M19.5 14.1336C20.1667 14.5185 20.1667 15.4808 19.5 15.8657L13.5 19.3298C12.8333 19.7147 12 19.2335 12 18.4637L12 11.5355C12 10.7657 12.8333 10.2846 13.5 10.6695L19.5 14.1336Z" fill="black"/></svg>');
    background-size: contain;
    position: absolute;
    top: calc(50% - 15px);
    left: calc(50% - 15px);
  }

  .hidden {
    display: none !important;
  }

  .back {
    display: none;
    background: #fff;
    position: relative;
    height: dimens.$back-icon-height;
    align-items: center;
    padding-left: 16px;

    // TODO: change to a variable that is used for .swiper .swiper-slide too
    border-radius: 5px 5px 0 0;
    width: 100%;
  }

  .expanded-tile-wrapper {
    --swiper-navigation-top-offset: calc(50% - 20px);

    display: flex;
    place-items: center;
    width: 100vw;
    flex-direction: column;

    .swiper {
      .swiper-wrapper {
        max-width: dimens.$container-max-width-lg;
        max-height: dimens.$container-max-height-lg;

        .swiper-slide {
          align-items: flex-start;
          height: fit-content;

          ugc-products {
            max-width: calc(dimens.$panel-right-width-lg - (dimens.$panel-padding * 2));
          }

          div.image-filler {
            background-position: top;
            background-repeat: no-repeat;
            background-size: cover;
            position: absolute;
            inset: 0;

            &.blurred {
              filter: blur(20px);
            }
          }
        }
      }
    }

    @include media-queries.breakpoint(tablet) {
      .exit {
        right: 8px !important;
        top: 13px !important;
      }
    }

    .exit {
      position: absolute;
      display: flex;
      right: 5%;
      top: -15px;
      z-index: 2;
      justify-content: end;
    }

    .panel {
      overflow: hidden;
      display: grid;
      height: 100%;
      position: relative;
      max-width: 879px;
      min-height: $min-height;
      max-height: $max-height;
      background: var(--expanded-tiles-background);
      border-radius: var(--expanded-tile-border-radius);
      grid-template-columns: minmax(0, dimens.$panel-left-width-lg) minmax(0, dimens.$panel-right-width-lg);
      grid-template-rows: 1fr;

      .panel-left {
        min-height: 300px;
        min-width: $panel-left-width;
        display: flex;
        place-items: center center;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        overflow: hidden;
        position: relative;
        color: colors.$panel-txt;
        max-width: dimens.$panel-left-width-lg;

        &:has(> .video-content) {
          align-items: stretch;
        }

        .image-wrapper {
          display: flex;
          position: relative;
          height: 100%;
          width: 100%;

          .image-wrapper-inner {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;

            div.image {
              display: flex;
              position: relative;

              img.image-element {
                display: flex;
                width: 100%;
                height: 100%;
                margin-bottom: 0;
                object-fit: cover;
              }
            }

            &:has(> .video-content) {
              align-items: stretch;
            }

            .video-content {
              display: flex;
              flex-grow: 1;
              border: none;
              margin: 0;
              padding: 0;
              z-index: 1;
            }
          }
        }

        video {
          display: flex;
          width: 100%;
          height: 100%;
          z-index: 10;
          position: relative;
        }

        .video-content-wrapper {
          display: flex;
          width: 100%;
          height: 100%;
          place-items: center;
          justify-content: center;
        }

        .video-fallback-content {
          display: flex;
          height: 100%;
          justify-content: center;
          align-items: center;

          &.hidden {
            display: none;
          }
        }

        .icon-section {
          display: flex;
          width: 100%;
          height: 100%;
          position: absolute;
        }

        .content-text,
        .content-html {
          display: flex;
          white-space: break-spaces;
          mix-blend-mode: difference;
          padding: 20px;
        }

        carousel-grouping {
          height: 100%;

          .tile-product {
            &.swiper-slide {
              height: 100%;
              align-items: center;
            }
          }

          .tile-product-panel {
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            height: 100%;
            width: 100%;

            .image {
              height: 100%;
              width: 100%;
            }

            .carousel-grouping-img {
              min-width: 100%;
              min-height: 100%;
              object-fit: cover;
              object-position: var(--image-position);
              height: 70vw;
            }
          }

          .expand-control {
            width: 60px;
            height: 9px;
            margin-left: 21px;
            margin-bottom: 8px;
            display: inline-flex;
            padding: 4px;
            justify-content: center;
            align-items: center;
            gap: 4px;
            border-radius: 25px;
            opacity: 0.7;
            background-color: #FFF;
            cursor: pointer;

            &.collapsed {
              visibility: hidden;
            }

            .expand-control-label {
              color: #201C1F;
              font-size: 12px;
              font-style: normal;
              font-weight: 500;
              line-height: 12px;
            }
          }

          .swiper-pagination {
            bottom: var(--swiper-pagination-bottom, 20px);
          }

          .swiper-pagination-bullet-active {
            background-color: #fff;
          }
        }
      }

      .panel-right {
        display: flex;
        padding: dimens.$panel-padding;
        overflow-y: scroll;
        scrollbar-width: none;
        max-height: 80vh;

        .panel-right-wrapper {
          display: flex;
          overflow: hidden auto;
          scrollbar-width: none;
          width: 100vw;
        }

        .content-wrapper {
          display: flex;
          height: 100%;
          width: 100%;

          .content-inner-wrapper {
            gap: 8px;
            display: flex;
            flex-direction: column;
            height: 100%;
            width: 100%;

            .tile-tags {
              display: var(--tags-display-expanded);
              margin: 0 16.4px 8.4px 0;
              width: 100%;
         
            }
          }
        }
      }
    }
  }

  @include products.products-styles;
  @include responsive.md-panel;
  @include responsive.sm-panel;
  @include add-to-cart.add-to-cart-styles;
}



================================================
File: styles/templates/expanded-tiles/_responsive.scss
================================================
@use "dimens";
@use "../../partials/media-queries";

@mixin common-panel {
  // For tables or medium sized screens
  @media only screen and (max-width: dimens.$breakpoint-tab-max-width) {
    margin: 0;
    max-width: unset;
    max-height: unset;
    height: 100vh;
    width: 100%;

    .expanded-tile-wrapper {
      .back {
        display: flex;
      }

      .swiper {
        overflow-y: scroll;
        scrollbar-width: none;

        .swiper-wrapper {
          max-height: calc(100vh - 50px);
  
          .swiper-slide ugc-products {
            max-width: calc(100vw - (dimens.$panel-padding * 2));
          }
        }
      }

      .panel {
        grid-template-columns: 1fr;
        width: 100%;
        max-height: unset;
        overflow: hidden;

        .panel-left,
        .panel-right {
          height: 100%;
          width: auto;
        }

        .panel-left {
          max-width: 100vw;
        }

        .panel-right {
          max-width: 100vw;
          overflow: visible;
          margin-bottom: 10px;
          padding: 0;

          .panel-right-wrapper {
            padding: 10px;
          }
        }
      }
    }
  }
}

@mixin md-panel {
  @include common-panel;

  @media only screen and (min-width: dimens.$breakpoint-tab-min-width) and (max-width: dimens.$breakpoint-tab-max-width) {
    .expanded-tile-wrapper {
      flex-direction: column;

      .swiper .swiper-wrapper.ugc-tiles {
        max-height: unset;
        max-width: 100vw;
        height: auto;

        .swiper-slide.ugc-tile {
          min-height: 100vh;
          border-radius: 0;
        }
      }
    }
  }
}

@mixin sm-panel {
  @include common-panel;

  @media only screen and (max-width: dimens.$breakpoint-mob-max-width) {
    .expanded-tile-wrapper {
      height: 100%;

      .swiper {
        max-width: unset;
        overflow-y: scroll;
        scrollbar-width: none;

        .swiper-wrapper {
          max-width: 100vw;

          .ugc-tile {
            min-height: 100vh;
          }

          .panel {
            min-height: 100vh;
            grid-template-columns: minmax(100%, 1fr) !important;
            grid-template-rows: auto !important;

            .panel-right {
              overflow: visible;
            }
          }
        }
      }
    }
  }
}




================================================
File: styles/templates/story-line-expanded/_dimens.scss
================================================
$width: 373px;
$height: 703px;
$panel-left-width-lg: 517px;
$panel-right-width-lg: 363px;
$panel-padding: 10px;

// back arrow icon used in smaller screens (md)
$back-icon-height: 56px;
$container-max-width-lg: 895px;
$container-max-height-lg: 90vh;

// responsiveness dimensions
$tablet-panel-top-width-upper-limit: 643px;
$breakpoint-mob-max-width: 576px;
$breakpoint-tab-min-width: 577px;
$breakpoint-tab-max-width: 992px;

// video play icon
$play-icon-width: 50px;
$play-icon-height: 50px;



================================================
File: styles/templates/story-line-expanded/_index.scss
================================================
@use "sass:color";
@use "dimens";
@use "../add-to-cart";
@use "../products";
@use "@styles/partials/media-queries";

html {
  background: var(--widget-background);
}

expanded-tiles {
  --expanded-tiles-background: #fff;

  .swiper-3d {
    perspective: none !important;
  }

  .story-expanded {
      max-width: 500px;
  }
}

expanded-tiles:not(:empty) {
  :host {
    transition: ease all 0.5s;
  }

  .ugc-tile {
      min-height: 500px;
  }

  display: flex;
  flex-direction: row;
  justify-content: center;
  background-color: transparent;
  text-rendering: auto;
  width: 100%;
  height: auto;
  position: relative;

  .play-icon {
    display: inline-block;
    width: dimens.$play-icon-width;
    height: dimens.$play-icon-height;
    background-image: url('data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 30 30" fill="none"><circle cx="15" cy="15" r="15" fill="%23BCBBBC"/><path d="M19.5 14.1336C20.1667 14.5185 20.1667 15.4808 19.5 15.8657L13.5 19.3298C12.8333 19.7147 12 19.2335 12 18.4637L12 11.5355C12 10.7657 12.8333 10.2846 13.5 10.6695L19.5 14.1336Z" fill="black"/></svg>');
    background-size: contain;
    position: absolute;
    top: calc(50% - 15px);
    left: calc(50% - 15px);
  }

  .hidden {
    display: none !important;
  }

  .back {
    display: none;
    background: #fff;
    position: relative;
    height: dimens.$back-icon-height;
    align-items: center;
    padding-left: 16px;
    max-width: dimens.$width;
    max-height: dimens.$height;

    // TODO: change to a variable that is used for .swiper .swiper-slide too
    border-radius: 5px 5px 0 0;
    width: 100%;
  }

  .expanded-tile-wrapper {
    --swiper-navigation-top-offset: calc(50% - 20px);

    display: flex;
    place-items: center;
    width: 100%;
    flex-direction: column;
    position: relative;

    .panel-active {
      .overlay {
        position: absolute;
        inset: 0;
        background-color: rgb(134 134 134 / 20%);
        z-index: 1;
      }

      tile-content .header {
        position: absolute;
        left: 0;
        right: 0;
        top: 20px;
        display: flex;
        padding: 20px;
        box-sizing: border-box;
      }

      .content-icon {
        margin-top: 15px;
        margin-left: 20px;
      }

      time-phrase {
        padding-top: 10px;
      }
    }

    .story-progress-wrapper {
      box-sizing: border-box;
      z-index: 50;
      width: 100%;
      display: flex;
      padding: 2px;
      justify-content: center;
      margin-top: 15px;
      position: absolute;
      top: 10px;

      .story-autoplay-progress {
        display: flex;
        width: 95%;
        justify-content: flex-start;
        font-weight: bold;
        border-radius: 30px;
        background: rgba(0 0 0 / 25%);
        box-shadow:
          inset 0 1px 2px rgba(0 0 0 / 25%),
          0 1px rgba(255 255 255 / 8%);

        .progress-content {
          height: 3px;
          border-radius: 30px;
          background-image: linear-gradient(to bottom, rgba(255 255 255 / 3%), rgba(255 255 255 / 5%));
          transition: 0.4s linear;
          transition-property: width, background-color;
          background-color: #fff;
        }
      }
    }

    .story-controls {
      display: flex;
      flex-direction: row;
      position: absolute;
      place-items: center flex-end;
      width: auto;
      height: fit-content;
      right: 20px;
      gap: 10px;
      z-index: 20;
      transition: all 0.2s ease-in;

      .icon-video-pause,
      .icon-video-play {
        width: 26px;
        height: 26px;
      }

      .icon-video-volume,
      .icon-video-mute {
        width: 16px;
        height: 16px;
      }

      .exit {
        position: unset;
      }
    }

    .swiper {
      .swiper-wrapper {
        .swiper-slide {
          align-items: flex-start;
          width: dimens.$width;
          height: dimens.$height;
          max-height: 90vh !important;

          .panel-active,
          .panel-inactive {
            overflow: hidden;
            position: relative;
            background-color: #000;
            border-radius: var(--expanded-tile-border-radius);
            flex-direction: column;
            height: 100%;
            width: 100%;
          }

          .panel-inactive {
            margin-left: -10%;
            display: grid;
            place-content: center;
            place-items: center;
            gap: 20px;
            grid-template-rows: repeat(3, 1fr);
            grid-auto-flow: row;
            grid-template-columns: 1fr;

            .network-icon {
              display: flex;
              place-self: center;
              width: 36px;
              height: 36px;
              opacity: 0.3;
            }
          }

          .panel-active {
            display: none;
            background: var(--expanded-tiles-background);

            tile-content {
              flex: 1;
              z-index: 1;
            }

            .bottom-section {
              bottom: var(--story-expanded-display-bottom-section);
            }

            .image-wrapper {
              display: flex;
              position: absolute;
              height: 100%;
              width: 100%;

              .image-wrapper-inner {
                display: flex;
                align-items: center;
                justify-content: center;
                width: 100%;
                height: 100%;

                div.image {
                  display: flex;
                  position: relative;

                  img.image-element {
                    display: flex;
                    width: 100%;
                    height: 100%;
                    margin-bottom: 0;
                  }
                }

                &:has(> .video-content) {
                  align-items: stretch;
                }

                .video-content {
                  display: flex;
                  flex-grow: 1;
                  border: none;
                  margin: 0;
                  padding: 0;
                  z-index: 0;
                }
              }

              video {
                display: flex;
                width: 100%;
                height: 100%;
                z-index: 10;
                position: relative;
              }

              .video-content-wrapper {
                display: flex;
                width: 100%;
                height: 100%;
                place-items: center;
              }

              .video-fallback-content {
                display: flex;
                height: 100%;
                justify-content: center;
                align-items: center;

                &.hidden {
                  display: none;
                }
              }
            }

            .story-expanded-bottom-section {
              height: 20px;
              display: flex;
              position: absolute;
              justify-content: space-between;
              z-index: 1;
              width: 100%;
              align-items: flex-end;
              flex-direction: row;

              tile-tags {
                display: var(--tags-display-expanded);
                position: absolute;
                left: 0;
                top: 4px;
                bottom: 0;
                height: 18px;
                margin-left: 5px;

                .tile-tag {
                  height: 13px !important;
                }
              }
            }

            inline-products {
              position: absolute;
              width: 100%;
              height: 171px;
              bottom: 60px;

              .expand-control {
                width: 60px;
                height: 9px;
                margin-left: 21px;
                margin-bottom: 8px;
                display: inline-flex;
                padding: 4px;
                justify-content: center;
                align-items: center;
                gap: 4px;
                border-radius: 25px;
                opacity: 0.7;
                background-color: #FFF;
                cursor: pointer;

                &.collapsed {
                  visibility: hidden;
                }

                .expand-control-label {
                  color: #201C1F;
                  font-size: 12px;
                  font-style: normal;
                  font-weight: 500;
                  line-height: 12px;
                }
              }

              .swiper-pagination {
                --swiper-pagination-top: 180px;
                --swiper-pagination-color: #FFF;
              }

              .swiper-inline-products {
                border-radius: 5px;
                height: fit-content;

                .tile-product {
                  width: 329px;
                  border-radius: 10px;
                  background-color: #FFF;
                  height: 145px;

                  .tile-product-left-panel {
                    width: 30%;
                    height: 100%;
                  }

                  .tile-product-right-panel {
                    width: 70%;
                    height: 128px;
                    padding-left: 12px;
                    padding-right: 12px;

                    .stacklapopup-inline-products-item-title {
                      margin-top: 15px;
                      color: #201C1F;
                      font-size: 14px;
                      font-style: normal;
                      font-weight: 600;
                      height: 22.4px;
                      overflow: hidden;
                      line-height: 20px;
                      display: -webkit-box;
                      -webkit-line-clamp: 1;
                      -webkit-box-orient: vertical;
                    }

                    .stacklapopup-inline-products-item-description {
                      height: 24px;
                      overflow: hidden;
                      color: #4D4A4C;
                      font-size: 10px;
                      font-style: normal;
                      font-weight: 400;
                      line-height: 12px;
                      display: -webkit-box;
                      -webkit-line-clamp: 2;
                      -webkit-box-orient: vertical;
                    }

                    .stacklapopup-inline-products-item-price {
                      margin-top: 4px;
                      color: #201C1F;
                      font-size: 16px;
                      font-style: normal;
                      font-weight: 500;
                      line-height: 16px;
                    }


                    .stacklapopup-inline-products-item-button-wrap {
                      margin-top: 10px;
                      padding: 7px 16px 8px 17px;
                      background-color: var(--cta-button-background-color);
                      text-align:center;
                      border-radius: 4px;
                      text-decoration: none;
                      display: block;
                      width: 100px;
                      cursor: pointer;

                      &.disabled {
                          background:  #c4c4c4;
                          font-weight: bold;
                          cursor: default;
                          color: #9d9d9d;
                          pointer-events: none;
                      }

                      .stacklapopup-inline-products-item-button {
                        width: 100%;
                        justify-content: center;
                        align-items: center;
                        flex-shrink: 0;
                        color: var(--cta-button-font-color);
                        text-align: center;
                        font-size: 12px;
                        font-style: normal;
                        font-weight: 600;

                        &.disabled {
                          background:  #c4c4c4;
                          font-weight: bold;
                          cursor: default;
                          color: #9d9d9d;
                          pointer-events: none;
                        }
                      }
                    }
                  }

                  .inline-product-img {
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                    object-position: top;
                  }
                }
              }
            }
          }

          .ugc-products-wrap {
            position: absolute;
            z-index: 60;
            height: 100%;
            width: 100%;
            background-color: white;
            display: none;
            justify-content: center;

            ugc-products {
              padding: 16px;
            }
          }

          &.swiper-slide-active {
            .panel-inactive {
              display: none;
            }

            .panel-active {
              display: flex;
            }
          }

          &:not(.swiper-slide-active) {
            .ugc-products-wrap {
              display: none !important;
            }
          }

          div.image-filler {
            background-position: top;
            background-repeat: no-repeat;
            background-size: cover;
            position: absolute;
            inset: 0;

            &.blurred {
              filter: blur(20px) brightness(0.5);
            }
          }
        }
      }
    }
  }

  @include products.products-styles;
  @include add-to-cart.add-to-cart-styles;
}

@include media-queries.breakpoint(mobile) { 
  expanded-tiles:not(:empty) {
    height: 100vh !important;
  }

  iframe {
    z-index: 9 !important;
  }

  .expanded-tile-overlay {
    justify-content: stretch !important;
    align-items: stretch !important;
    max-width: none;
    max-height: none;
    height: 100vh;
    width: 100vw;
  }

  .story-expanded {
    overflow-y: hidden !important;
  }

  .story-progress-wrapper {
    top: -5px !important;
  }

  .story-controls {
    right: 0 !important;
    padding-top: 20px;
    padding-right: 20px;
  }

  .ugc-products-wrap {
    width: 100vw;
  }

  .share-menu-timephrase-wrapper {
    padding-top: 10px !important;
  }

  ugc-products {
    padding: 16px;
    max-width: 80vw;
    margin: 0 auto;
  }
}


================================================
File: waterfall/_styles.scss
================================================
@forward "pkg:swiper/swiper-bundle.css";
@use "@styles/partials/fonts";
@forward "@styles/partials/icons";
@forward "@styles/partials/loading";
@forward "@styles/partials/tile-overlay";
@forward "@styles/templates/expanded-tiles";
@forward "@styles/templates/swiper-overrides";
@use "@styles/templates/tags";
@use "@styles/templates/load-more";
@use "@styles/templates/tile-content" as tc;
@use "@styles/templates/shopspot-icon" as sicon;
@use "@styles/templates/time-phrase" as tphrase;
@use "@styles/templates/share-menu" as smenu;
@use "@styles/partials/icon-sections" as is;
@use "@styles/partials/expanded-swiper" as es;
@use "@styles/partials/inline";

.waterfall-inline,
expanded-tiles {
  @include is.icon-sections-styles;
  @include sicon.shopspot-icon-styles;
  @include tphrase.time-phrase-styles;
  @include smenu.share-menu-styles;
  @include tags.tile-tags-styles;
  @include tc.tile-content-styles;
  @include es.swiper-expanded-styles;
}



================================================
File: waterfall/layout.hbs
================================================
<div id="widget-container" class="hidden-container">
    <div class="ugc-tiles grid waterfall-inline">
        {{#tiles}}
        {{>tpl-tile options=../options.config}}
        {{/tiles}}
    </div>
    <load-more />
</div>


================================================
File: waterfall/tile.hbs
================================================
{{#tile class="grid-item"}}
  <div class="tile">
    <div class="tile-top">
      <div class="tile-loading"></div>
      <div class="icon-section">
        <div class="top-section">
          {{#each attrs}}
          {{#ifequals this "instagram.reel"}}
          <div class="content-icon icon-reel"></div>
          {{/ifequals}}
          {{#ifequals this "youtube.short"}}
          <div class="content-icon icon-youtube-short"></div>
          {{/ifequals}}
          {{/each}}
          {{#ifHasProductTags this}}
          <div class="shopping-icon icon-products"></div>
          {{/ifHasProductTags}}
        </div>
        <div class="center-section">
          {{#ifequals media "video"}}
              <div class="icon-play"></div>
          {{/ifequals}}
        </div>
        <div class="bottom-section">
          <div class="network-icon icon-{{source}}"></div>
        </div>
      </div>
      <div class="tile-image-wrapper">
        {{#ifAutoPlayVideo media options.tile_options.auto_play_video }}
          {{playVideo this "100%" "100%"}}
        {{else}}
          {{#lazy image_thumbnail_url "120"}}{{/lazy}}
        {{/ifAutoPlayVideo}}
        <div class="swiper-lazy-preloader"></div>
        <shopspot-icon tile-id={{id}} />
      </div>
    </div>
    <div class="tile-bottom">
      <div class="tile-bottom-container">
        {{#if tags_extended}}
        <tile-tags tile-id="{{id}}" mode="swiper" context="waterfall-inline" navigation-arrows="true" theme="light"></tile-tags>
        {{/if}}
        <div class="description">
            {{#if name}}
            <div class="user-name">{{name}}</div>
            {{/if}}
            {{#if user}}
            <div class="user-handle">@{{user}}</div>
            {{/if}}
            <div class="tile-share-content">
              <time-phrase source-created-at="{{source_created_at}}"></time-phrase>
              <share-menu tile-id="{{id}}" theme="light"></share-menu>
            </div>
            <div class="caption">
              <div class="caption-paragraph">{{message}}</div>
            </div>
        </div>
      </div>
    </div>
  </div>
{{/tile}}



================================================
File: waterfall/waterfall.lib.ts
================================================
import { ISdk } from "@stackla/widget-utils"

declare const sdk: ISdk

export async function loadWaterfallLayout(reset = false) {
  const widgetContainer = sdk.querySelector("#widget-container")

  if (!widgetContainer) {
    return
  }

  widgetContainer.classList.add("hidden-container")

  const allTiles = Array.from(sdk.querySelectorAll<HTMLElement>(".grid-item") ?? [])
  const ugcTiles = reset ? allTiles : allTiles.filter(tile => tile.getAttribute("height-set") !== "true")
  const { inline_tile_size } = sdk.getStyleConfig()

  if (!ugcTiles || ugcTiles.length === 0) {
    return
  }

  const promises = ugcTiles.map(async (tile: HTMLElement) => {
    return new Promise<void>((resolve, reject) => {
      const hasUserHandle = tile.querySelector(".user-handle") !== null
      const hasTimePhrase = tile.querySelector(".tile-timephrase") !== null
      const bottomContainer = tile.querySelector<HTMLElement>(".tile-bottom-container")
      const caption = tile.querySelector(".caption")
      const icons = tile.querySelectorAll(".icon-share, .network-icon, .content-icon, .icon-products")

      if (!bottomContainer) {
        reject()
        return
      }

      if (inline_tile_size === "small") {
        bottomContainer.classList.add("small")
      }

      icons.forEach(icon => icon.classList.add(`${inline_tile_size}`))

      if (caption) {
        if (hasUserHandle || hasTimePhrase) {
          caption.classList.add("lines-4")
        } else {
          caption.classList.add("lines-5")
        }
      }

      const tileTop = tile.querySelector<HTMLElement>(".tile-top")
      const tileBottom = tile.querySelector<HTMLElement>(".tile-bottom")

      if (tileTop && tileBottom) {
        const imageElement = tileTop.querySelector<HTMLImageElement>("img")

        const calculateHeight = () => {
          const rowSpan = Math.floor(Math.random() * 30) + 15
          tile.style.gridRowEnd = `span ${rowSpan}`
        }

        if (imageElement && !imageElement.complete) {
          imageElement.onload = () => {
            calculateHeight()
            resolve()
          }
          imageElement.onerror = () => {
            imageElement.parentElement?.remove()
            reject()
          }
        } else {
          calculateHeight()
          resolve()
        }
      }

      reject()
    })
  })

  await Promise.allSettled(promises)

  setTimeout(() => {
    widgetContainer.classList.remove("hidden-container")
  }, 100)
}



================================================
File: waterfall/widget.scss
================================================
@use "styles";

#nosto-ugc-container {
  #widget-container {
    transition: opacity 3s;
    opacity: 1;
    visibility: visible;

    &.hidden-container {
      opacity: 0;
      visibility: hidden;
    }
  }

  background-color: var(--widget-background);
  padding: var(--margin);

  .grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(var(--tile-size), 1fr));
    grid-auto-rows: 10px;
    gap: var(--margin);
    background: var(--widget-background);
  }

  .ugc-tile {
    $total-padding: 10px;

    box-sizing: border-box;
    max-width: 100%;
    grid-row-end: span 30;
  }

  .tile {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    background: var(--text-tile-background);
    box-sizing: border-box;
    height: 100%;
    border-radius: var(--inline-tile-border-radius);
    overflow: hidden;
  }

  .tile-top {
    position: relative;
    width: 100%;
    background-repeat: no-repeat;
    background-size: cover;
    overflow: hidden;
    height: 100%;
  }

  .network-icon.small {
    height: 12px;
    width: 12px;
  }

  .network-icon.large {
    height: 22px;
    width: 24px;
  }

  .content-icon.small,
  .icon-products.small {
    height: 10px;
    width: 10px;
  }

  .content-icon.large,
  .icon-products.large {
    height: 14px;
    width: 14px;
  }

  .tile-bottom {
    width: 100%;

    .tile-bottom-container {
      padding: 0 10px;

      .description {
        margin: 10px 10px 10px 0;
      }

      tile-tags {
        margin-top: 16.25px;
        width: 100%;
    
        .swiper-tags {
          margin: 0;
        }
    
        .swiper-button-prev,
        .swiper-button-next {
          top: 0;
          height: 100%;
        }
    
        .swiper-button-next {
          right: 8px;
        }
    
        .swiper-nav-icon {
          height: 10px;
          width: 10px;
        }
    
        .swiper-button-disabled {
          display: none;
        }
      }
    }

    .tile-bottom-container.small {
      padding: 0 5px 10px 9px;

      .description {
        margin: 8px 5px 0 0;
      }

      tile-tags {
        display: flex;
        margin-top: 8px;
      }

      .swiper-tags {
        max-width: 100%;
      }

      .swiper-tags-button-next {
        right: 0;
      }
    }

    .tile-bottom-container.small * {
      font-size: 8px;
    }
  }

  .tag-inline {
    background: var(--tile-tag-background);
    border-radius: 3px !important;
    font-size: 10px;
    font-style: normal;
    font-weight: 400;
    padding: 0 4px;
    line-height: 16px;
    text-wrap: nowrap;

    a {
      color: #000;
      text-decoration: none;
    }
  }

  .tag-inline:last-child {
    margin-right: 10px;
  }

  .tag-slider {
    display: flex;
    align-items: center;
    position: relative;
    overflow: hidden;
  }

  .tag-slider-arrow {
    background: none;
    border: none;
    font-size: 20px;
    cursor: pointer;
    padding: 0 5px;
    z-index: 10;
    display: none;
  }

  .tag-slider-arrow.left-arrow,
  .tag-slider-arrow.right-arrow {
    position: absolute;
    top: -4px;
  }

  .tag-slider-arrow.left-arrow {
    left: 0;
  }

  .tag-slider-arrow.right-arrow {
    right: 7px;
  }

  .tile-tags::-webkit-scrollbar {
    display: none;
  }

  .tile-timestamp {
    color: #908e8f;
    font-size: 10px;
    font-weight: 400;
    line-height: 16px;
    display: inline-block;
  }

  time-phrase {
    display: var(--timephrase-display-inline);
  }

  share-menu {
    right: 0;
    top: 15%;
    position: absolute;

    .share-socials-popup-wrapper {
      position: fixed;
    }

    .panel-overlay-active {
      inset: 0;
    }

    display: var(--share-icon-display-inline);
  }

  .caption {
    display: var(--show-caption-inline-webkit);
    font-size: var(--text-tile-font-size);
    color: #000;
    -ms-overflow-style: none;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .caption.lines-4 {
    -webkit-line-clamp: 4;
    max-height: 70px;
  }

  .caption.lines-5 {
    -webkit-line-clamp: 5;
    max-height: 80px;
  }

  .caption-paragraph {
    color: var(--text-tile-font-color);
    font-size: var(--text-tile-font-size);
  }

  .caption-paragraph a {
    color: var(--text-tile-link-color);
  }

  .user-name {
    color: var(--text-tile-user-name-font-color);
    font-size: var(--text-tile-user-name-font-size);
    font-weight: 600;
  }

  .user-handle {
    color: var(--text-tile-user-handle-font-color);
    font-size: var(--text-tile-user-handle-font-size);
    margin-bottom: 4px;
  }

  .tile-share-content {
    min-height: 24px;
    justify-content: space-between;
    position: relative;
    display: var(--tile-share-content-display-inline);

    .icon-share.small {
      height: 16px;
      width: 16px;
    }
  }

  .bottom-section {
    bottom: 3px;
  }

  .network-icon {
    margin: 0 8px 8px auto;
  }

  .shopping-icon {
    margin-right: 8px;
  }

  .tile-image-wrapper {
    height: 100%;

    img {
      height: 100%;
      aspect-ratio: 1 / 1;
      width: 100%;
      object-fit: cover;
      object-position: var(--image-position);
    }
  }

  .tile-content-wrapper {
    gap: 0 !important;
    padding-right: 17px !important;
  }
}



================================================
File: waterfall/widget.tsx
================================================
import { loadWidget, Sdk } from "@stackla/widget-utils"
import { loadWaterfallLayout } from "./waterfall.lib"

declare const sdk: Sdk
loadWidget({
  callbacks: {
    onLoadMore: [() => loadWaterfallLayout(false)]
  },
  templates: {},
  features: {
    cssVariables: {
      "--tile-share-content-display-inline":
        sdk.getInlineTileConfig().show_sharing || sdk.getInlineTileConfig().show_timestamp ? "flex" : "none"
    }
  },
  extensions: {}
})

void loadWaterfallLayout(false)


